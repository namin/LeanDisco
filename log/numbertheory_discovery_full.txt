=== ITERATION 0 COMPLETE ===
Total Concepts: 133 (+0 new)
Patterns: 0
Conjectures: 0
Theorems: 39
Top Concepts:
  - pattern_importance (score: 1.000000)
  - add_assoc (score: 1.000000)
  - add_comm (score: 1.000000)
  - add_zero (score: 1.000000)
  - zero_add (score: 1.000000)
  - mul_assoc (score: 1.000000)
  - mul_comm (score: 1.000000)
  - mul_one (score: 1.000000)
  - one_mul (score: 1.000000)
  - mul_zero (score: 1.000000)
Generation Methods:
  seed: 9
All Theorems (39):
  - add_assoc
    Statement: forall (n : Nat) (m : Nat) (k : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n m) k) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m k))
  - add_comm
    Statement: forall (n : Nat) (m : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n m) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m n)
  - add_zero
    Statement: forall (n : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) n
  - zero_add
    Statement: forall (n : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) n) n
  - mul_assoc
    Statement: forall (n : Nat) (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n m) k) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m k))
  - mul_comm
    Statement: forall (n : Nat) (m : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n m) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m n)
  - mul_one
    Statement: forall (n : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) n
  - one_mul
    Statement: forall (n : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) n) n
  - mul_zero
    Statement: forall (n : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - zero_mul
    Statement: forall (n : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) n) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - left_distrib
    Statement: forall (n : Nat) (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m k)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n m) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n k))
  - right_distrib
    Statement: forall (n : Nat) (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n m) k) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n k) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m k))
  - dvd_refl
    Statement: forall (a : Nat), Dvd.dvd.{0} Nat Nat.instDvd a a
  - dvd_trans
    Statement: forall {a : Nat} {b : Nat} {c : Nat}, (Dvd.dvd.{0} Nat Nat.instDvd a b) -> (Dvd.dvd.{0} Nat Nat.instDvd b c) -> (Dvd.dvd.{0} Nat Nat.instDvd a c)
  - dvd_add
    Statement: forall {a : Nat} {b : Nat} {c : Nat}, (Dvd.dvd.{0} Nat Nat.instDvd a b) -> (Dvd.dvd.{0} Nat Nat.instDvd a c) -> (Dvd.dvd.{0} Nat Nat.instDvd a (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) b c))
  - dvd_mul
    Statement: forall {k : Nat} {m : Nat} {n : Nat}, Iff (Dvd.dvd.{0} Nat Nat.instDvd k (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m n)) (Exists.{1} Nat (fun (k₁ : Nat) => Exists.{1} Nat (fun (k₂ : Nat) => And (Dvd.dvd.{0} Nat Nat.instDvd k₁ m) (And (Dvd.dvd.{0} Nat Nat.instDvd k₂ n) (Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) k₁ k₂) k)))))
  - gcd_comm
    Statement: forall (m : Nat) (n : Nat), Eq.{1} Nat (Nat.gcd m n) (Nat.gcd n m)
  - gcd_assoc
    Statement: forall (m : Nat) (n : Nat) (k : Nat), Eq.{1} Nat (Nat.gcd (Nat.gcd m n) k) (Nat.gcd m (Nat.gcd n k))
  - gcd_zero_left
    Statement: forall (y : Nat), Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} ([mdata borrowed:1 Nat]) 0 (instOfNatNat 0)) y) y
  - gcd_zero_right
    Statement: forall (n : Nat), Eq.{1} Nat (Nat.gcd n (OfNat.ofNat.{0} ([mdata borrowed:1 Nat]) 0 (instOfNatNat 0))) n
  - lcm_comm
    Statement: forall (m : Nat) (n : Nat), Eq.{1} Nat (Nat.lcm m n) (Nat.lcm n m)
  - lcm_assoc
    Statement: forall (m : Nat) (n : Nat) (k : Nat), Eq.{1} Nat (Nat.lcm (Nat.lcm m n) k) (Nat.lcm m (Nat.lcm n k))
  - prime_def
    Statement: forall {p : Nat}, Iff (Nat.Prime p) (And (LE.le.{0} Nat instLENat (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) p) (forall (m : Nat), (Dvd.dvd.{0} Nat Nat.instDvd m p) -> (Or (Eq.{1} Nat m (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (Eq.{1} Nat m p))))
  - prime_two
    Statement: Nat.Prime (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - prime_three
    Statement: Nat.Prime (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - prime_five
    Statement: Nat.Prime (OfNat.ofNat.{0} Nat 5 (instOfNatNat 5))
  - prime_seven
    Statement: Nat.Prime (OfNat.ofNat.{0} Nat 7 (instOfNatNat 7))
  - mod_mod
    Statement: forall (a : Nat) (n : Nat), Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) a n) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) a n)
  - add_mod
    Statement: forall (a : Nat) (b : Nat) (n : Nat), Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) a b) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) a n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) b n)) n)
  - mul_mod
    Statement: forall (a : Nat) (b : Nat) (n : Nat), Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) a b) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) a n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) b n)) n)
  - mod_two_eq_zero_or_one
    Statement: forall (n : Nat), Or (Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) n (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) n (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))
  - fib_zero
    Statement: Eq.{1} Nat (Nat.fib (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - fib_one
    Statement: Eq.{1} Nat (Nat.fib (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - fib_add
    Statement: forall (m : Nat) (n : Nat), Eq.{1} Nat (Nat.fib (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m n) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (Nat.fib m) (Nat.fib n)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (Nat.fib (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Nat.fib (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))))
  - zero_eq_zero
    Statement: Eq.{1} Nat Nat.zero Nat.zero
  - add_comm
    Statement: forall (n : Nat) (m : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n m) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m n)
  - zero_add_zero
    Statement: Eq.{1} Nat (Nat.add Nat.zero Nat.zero) Nat.zero
  - one_add_one_eq_two
    Statement: Eq.{1} Nat (Nat.add (Nat.succ Nat.zero) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ Nat.zero))
  - two_add_one_eq_three
    Statement: Eq.{1} Nat (Nat.add (Nat.succ (Nat.succ Nat.zero)) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ (Nat.succ Nat.zero)))

================================================================================
=== ITERATION 1 COMPLETE ===
Total Concepts: 290 (+169 new)
Patterns: 4
Conjectures: 53
Theorems: 112
Top Concepts:
  - nat_48 (score: 1.000000)
  - add_assoc (score: 1.000000)
  - add_comm (score: 1.000000)
  - add_zero (score: 1.000000)
  - zero_add (score: 1.000000)
  - mul_assoc (score: 1.000000)
  - mul_comm (score: 1.000000)
  - mul_one (score: 1.000000)
  - one_mul (score: 1.000000)
  - mul_zero (score: 1.000000)
Generation Methods:
  seed: 9
  application: 20
  specialization: 50
  pattern_recognition: 1
  composition: 6
  lemma_application: 11
All Patterns (4):
  - natural_number_sequence: Sequence: 0, 1, 2, ... (natural numbers via successor)
  - variation_add_assoc: Variation pattern based on theorem add_assoc
  - variation_add_comm: Variation pattern based on theorem add_comm
  - variation_add_zero: Variation pattern based on theorem add_zero
All Conjectures (53):
  - function_lemma_for_zero_add_zero
    Statement: Eq.{1} Nat (Nat.add Nat.zero Nat.zero)
  - function_lemma_for_one_add_one_eq_two
    Statement: Eq.{1} Nat (Nat.add (Nat.succ Nat.zero) (Nat.succ Nat.zero))
  - function_lemma_for_two_add_one_eq_three
    Statement: Eq.{1} Nat (Nat.add (Nat.succ (Nat.succ Nat.zero)) (Nat.succ Nat.zero))
  - add_comp_succ_eq_0
    Statement: Eq.{1} Nat (Nat.add (Nat.succ Nat.zero)) (Nat.add Nat.zero)
  - add_comp_succ_eq_1
    Statement: Eq.{1} Nat (Nat.add (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - add_comp_succ_eq_2
    Statement: Eq.{1} Nat (Nat.add (Nat.succ Nat.zero)) Nat.zero
  - add_comp_succ_eq_3
    Statement: Eq.{1} Nat (Nat.add (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - add_comp_add1_eq_0
    Statement: Eq.{1} Nat (Nat.add ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.add Nat.zero)
  - add_comp_add1_eq_1
    Statement: Eq.{1} Nat (Nat.add ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)
  - add_comp_add1_eq_2
    Statement: Eq.{1} Nat (Nat.add ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) Nat.zero
  - add_comp_add1_eq_3
    Statement: Eq.{1} Nat (Nat.add ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.succ Nat.zero)
  - add_comp_add2_eq_0
    Statement: Eq.{1} Nat (Nat.add ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.add Nat.zero)
  - add_comp_add2_eq_1
    Statement: Eq.{1} Nat (Nat.add ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)
  - add_comp_add2_eq_2
    Statement: Eq.{1} Nat (Nat.add ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) Nat.zero
  - add_comp_add2_eq_3
    Statement: Eq.{1} Nat (Nat.add ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.succ Nat.zero)
  - mul_comp_succ_eq_0
    Statement: Eq.{1} Nat (Nat.mul (Nat.succ Nat.zero)) (Nat.mul Nat.zero)
  - mul_comp_succ_eq_1
    Statement: Eq.{1} Nat (Nat.mul (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - mul_comp_succ_eq_2
    Statement: Eq.{1} Nat (Nat.mul (Nat.succ Nat.zero)) Nat.zero
  - mul_comp_succ_eq_3
    Statement: Eq.{1} Nat (Nat.mul (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - mul_comp_add1_eq_0
    Statement: Eq.{1} Nat (Nat.mul ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.mul Nat.zero)
  - mul_comp_add1_eq_1
    Statement: Eq.{1} Nat (Nat.mul ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)
  - mul_comp_add1_eq_2
    Statement: Eq.{1} Nat (Nat.mul ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) Nat.zero
  - mul_comp_add1_eq_3
    Statement: Eq.{1} Nat (Nat.mul ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.succ Nat.zero)
  - mul_comp_add2_eq_0
    Statement: Eq.{1} Nat (Nat.mul ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.mul Nat.zero)
  - mul_comp_add2_eq_1
    Statement: Eq.{1} Nat (Nat.mul ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)
  - mul_comp_add2_eq_2
    Statement: Eq.{1} Nat (Nat.mul ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) Nat.zero
  - mul_comp_add2_eq_3
    Statement: Eq.{1} Nat (Nat.mul ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.succ Nat.zero)
  - sub_comp_succ_eq_0
    Statement: Eq.{1} Nat (Nat.sub (Nat.succ Nat.zero)) (Nat.sub Nat.zero)
  - sub_comp_succ_eq_1
    Statement: Eq.{1} Nat (Nat.sub (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - sub_comp_succ_eq_2
    Statement: Eq.{1} Nat (Nat.sub (Nat.succ Nat.zero)) Nat.zero
  - sub_comp_succ_eq_3
    Statement: Eq.{1} Nat (Nat.sub (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - sub_comp_add1_eq_0
    Statement: Eq.{1} Nat (Nat.sub ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.sub Nat.zero)
  - sub_comp_add1_eq_1
    Statement: Eq.{1} Nat (Nat.sub ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)
  - sub_comp_add1_eq_2
    Statement: Eq.{1} Nat (Nat.sub ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) Nat.zero
  - sub_comp_add1_eq_3
    Statement: Eq.{1} Nat (Nat.sub ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.succ Nat.zero)
  - sub_comp_add2_eq_0
    Statement: Eq.{1} Nat (Nat.sub ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.sub Nat.zero)
  - sub_comp_add2_eq_1
    Statement: Eq.{1} Nat (Nat.sub ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)
  - sub_comp_add2_eq_2
    Statement: Eq.{1} Nat (Nat.sub ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) Nat.zero
  - sub_comp_add2_eq_3
    Statement: Eq.{1} Nat (Nat.sub ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.succ Nat.zero)
  - mod_comp_succ_eq_0
    Statement: Eq.{1} Nat (Nat.mod (Nat.succ Nat.zero)) (Nat.mod Nat.zero)
  - mod_comp_succ_eq_1
    Statement: Eq.{1} Nat (Nat.mod (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - mod_comp_succ_eq_2
    Statement: Eq.{1} Nat (Nat.mod (Nat.succ Nat.zero)) Nat.zero
  - mod_comp_succ_eq_3
    Statement: Eq.{1} Nat (Nat.mod (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - mod_comp_add1_eq_0
    Statement: Eq.{1} Nat (Nat.mod ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.mod Nat.zero)
  - mod_comp_add1_eq_1
    Statement: Eq.{1} Nat (Nat.mod ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)
  - mod_comp_add1_eq_2
    Statement: Eq.{1} Nat (Nat.mod ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) Nat.zero
  - mod_comp_add1_eq_3
    Statement: Eq.{1} Nat (Nat.mod ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.succ Nat.zero)
  - mod_comp_add2_eq_0
    Statement: Eq.{1} Nat (Nat.mod ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.mod Nat.zero)
  - mod_comp_add2_eq_1
    Statement: Eq.{1} Nat (Nat.mod ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)
  - mod_comp_add2_eq_2
    Statement: Eq.{1} Nat (Nat.mod ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) Nat.zero
  - mod_comp_add2_eq_3
    Statement: Eq.{1} Nat (Nat.mod ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.succ Nat.zero)
  - gcd_comp_succ_eq_0
    Statement: Eq.{1} Nat (Nat.gcd (Nat.succ Nat.zero)) (Nat.gcd Nat.zero)
  - gcd_comp_succ_eq_1
    Statement: Eq.{1} Nat (Nat.gcd (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
All Theorems (112):
  - add_assoc
    Statement: forall (n : Nat) (m : Nat) (k : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n m) k) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m k))
  - add_comm
    Statement: forall (n : Nat) (m : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n m) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m n)
  - add_zero
    Statement: forall (n : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) n
  - zero_add
    Statement: forall (n : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) n) n
  - mul_assoc
    Statement: forall (n : Nat) (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n m) k) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m k))
  - mul_comm
    Statement: forall (n : Nat) (m : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n m) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m n)
  - mul_one
    Statement: forall (n : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) n
  - one_mul
    Statement: forall (n : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) n) n
  - mul_zero
    Statement: forall (n : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - zero_mul
    Statement: forall (n : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) n) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - left_distrib
    Statement: forall (n : Nat) (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m k)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n m) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n k))
  - right_distrib
    Statement: forall (n : Nat) (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n m) k) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n k) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m k))
  - dvd_refl
    Statement: forall (a : Nat), Dvd.dvd.{0} Nat Nat.instDvd a a
  - dvd_trans
    Statement: forall {a : Nat} {b : Nat} {c : Nat}, (Dvd.dvd.{0} Nat Nat.instDvd a b) -> (Dvd.dvd.{0} Nat Nat.instDvd b c) -> (Dvd.dvd.{0} Nat Nat.instDvd a c)
  - dvd_add
    Statement: forall {a : Nat} {b : Nat} {c : Nat}, (Dvd.dvd.{0} Nat Nat.instDvd a b) -> (Dvd.dvd.{0} Nat Nat.instDvd a c) -> (Dvd.dvd.{0} Nat Nat.instDvd a (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) b c))
  - dvd_mul
    Statement: forall {k : Nat} {m : Nat} {n : Nat}, Iff (Dvd.dvd.{0} Nat Nat.instDvd k (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m n)) (Exists.{1} Nat (fun (k₁ : Nat) => Exists.{1} Nat (fun (k₂ : Nat) => And (Dvd.dvd.{0} Nat Nat.instDvd k₁ m) (And (Dvd.dvd.{0} Nat Nat.instDvd k₂ n) (Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) k₁ k₂) k)))))
  - gcd_comm
    Statement: forall (m : Nat) (n : Nat), Eq.{1} Nat (Nat.gcd m n) (Nat.gcd n m)
  - gcd_assoc
    Statement: forall (m : Nat) (n : Nat) (k : Nat), Eq.{1} Nat (Nat.gcd (Nat.gcd m n) k) (Nat.gcd m (Nat.gcd n k))
  - gcd_zero_left
    Statement: forall (y : Nat), Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} ([mdata borrowed:1 Nat]) 0 (instOfNatNat 0)) y) y
  - gcd_zero_right
    Statement: forall (n : Nat), Eq.{1} Nat (Nat.gcd n (OfNat.ofNat.{0} ([mdata borrowed:1 Nat]) 0 (instOfNatNat 0))) n
  - lcm_comm
    Statement: forall (m : Nat) (n : Nat), Eq.{1} Nat (Nat.lcm m n) (Nat.lcm n m)
  - lcm_assoc
    Statement: forall (m : Nat) (n : Nat) (k : Nat), Eq.{1} Nat (Nat.lcm (Nat.lcm m n) k) (Nat.lcm m (Nat.lcm n k))
  - prime_def
    Statement: forall {p : Nat}, Iff (Nat.Prime p) (And (LE.le.{0} Nat instLENat (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) p) (forall (m : Nat), (Dvd.dvd.{0} Nat Nat.instDvd m p) -> (Or (Eq.{1} Nat m (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (Eq.{1} Nat m p))))
  - prime_two
    Statement: Nat.Prime (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - prime_three
    Statement: Nat.Prime (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - prime_five
    Statement: Nat.Prime (OfNat.ofNat.{0} Nat 5 (instOfNatNat 5))
  - prime_seven
    Statement: Nat.Prime (OfNat.ofNat.{0} Nat 7 (instOfNatNat 7))
  - mod_mod
    Statement: forall (a : Nat) (n : Nat), Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) a n) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) a n)
  - add_mod
    Statement: forall (a : Nat) (b : Nat) (n : Nat), Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) a b) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) a n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) b n)) n)
  - mul_mod
    Statement: forall (a : Nat) (b : Nat) (n : Nat), Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) a b) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) a n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) b n)) n)
  - mod_two_eq_zero_or_one
    Statement: forall (n : Nat), Or (Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) n (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) n (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))
  - fib_zero
    Statement: Eq.{1} Nat (Nat.fib (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - fib_one
    Statement: Eq.{1} Nat (Nat.fib (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - fib_add
    Statement: forall (m : Nat) (n : Nat), Eq.{1} Nat (Nat.fib (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m n) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (Nat.fib m) (Nat.fib n)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (Nat.fib (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Nat.fib (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))))
  - zero_eq_zero
    Statement: Eq.{1} Nat Nat.zero Nat.zero
  - add_comm
    Statement: forall (n : Nat) (m : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n m) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m n)
  - zero_add_zero
    Statement: Eq.{1} Nat (Nat.add Nat.zero Nat.zero) Nat.zero
  - one_add_one_eq_two
    Statement: Eq.{1} Nat (Nat.add (Nat.succ Nat.zero) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ Nat.zero))
  - two_add_one_eq_three
    Statement: Eq.{1} Nat (Nat.add (Nat.succ (Nat.succ Nat.zero)) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ (Nat.succ Nat.zero)))
  - add_assoc_spec_nat_0
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) m) k) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m k))
  - add_assoc_spec_nat_1
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) m) k) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m k))
  - add_assoc_spec_nat_2
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) m) k) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m k))
  - add_assoc_spec_nat_3
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) m) k) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m k))
  - add_assoc_spec_nat_4
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) m) k) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m k))
  - add_comm_spec_nat_0
    Statement: forall (m : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) m) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)))
  - add_comm_spec_nat_1
    Statement: forall (m : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) m) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))
  - add_comm_spec_nat_2
    Statement: forall (m : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) m) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)))
  - add_comm_spec_nat_3
    Statement: forall (m : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) m) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)))
  - add_comm_spec_nat_4
    Statement: forall (m : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) m) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)))
  - add_zero_spec_nat_0
    Statement: Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - add_zero_spec_nat_1
    Statement: Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - add_zero_spec_nat_2
    Statement: Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - add_zero_spec_nat_3
    Statement: Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - add_zero_spec_nat_4
    Statement: Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - zero_add_spec_nat_0
    Statement: Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - zero_add_spec_nat_1
    Statement: Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - zero_add_spec_nat_2
    Statement: Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - zero_add_spec_nat_3
    Statement: Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - zero_add_spec_nat_4
    Statement: Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - mul_assoc_spec_nat_0
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) m) k) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m k))
  - mul_assoc_spec_nat_1
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) m) k) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m k))
  - mul_assoc_spec_nat_2
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) m) k) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m k))
  - mul_assoc_spec_nat_3
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) m) k) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m k))
  - mul_assoc_spec_nat_4
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) m) k) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m k))
  - mul_comm_spec_nat_0
    Statement: forall (m : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) m) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)))
  - mul_comm_spec_nat_1
    Statement: forall (m : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) m) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))
  - mul_comm_spec_nat_2
    Statement: forall (m : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) m) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)))
  - mul_comm_spec_nat_3
    Statement: forall (m : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) m) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)))
  - mul_comm_spec_nat_4
    Statement: forall (m : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) m) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)))
  - mul_one_spec_nat_0
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - mul_one_spec_nat_1
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - mul_one_spec_nat_2
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - mul_one_spec_nat_3
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - mul_one_spec_nat_4
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - one_mul_spec_nat_0
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - one_mul_spec_nat_1
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - one_mul_spec_nat_2
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - one_mul_spec_nat_3
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - one_mul_spec_nat_4
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - mul_zero_spec_nat_0
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - mul_zero_spec_nat_1
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - mul_zero_spec_nat_2
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - mul_zero_spec_nat_3
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - mul_zero_spec_nat_4
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - zero_mul_spec_nat_0
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - zero_mul_spec_nat_1
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - zero_mul_spec_nat_2
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - zero_mul_spec_nat_3
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - zero_mul_spec_nat_4
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - fib_zero_on_nat_0
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - fib_zero_on_zero
    Statement: Eq.{1} Nat Nat.zero (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - fib_one_on_nat_1
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - fib_one_on_one
    Statement: Eq.{1} Nat (Nat.succ Nat.zero) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - zero_eq_zero_on_nat_0
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) Nat.zero
  - zero_add_zero_on_nat_0
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) Nat.zero
  - one_add_one_eq_two_on_nat_2
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (Nat.succ (Nat.succ Nat.zero))
  - one_add_one_eq_two_on_prime_2
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (Nat.succ (Nat.succ Nat.zero))
  - one_add_one_eq_two_on_two
    Statement: Eq.{1} Nat (Nat.succ (Nat.succ Nat.zero)) (Nat.succ (Nat.succ Nat.zero))
  - two_add_one_eq_three_on_nat_3
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (Nat.succ (Nat.succ (Nat.succ Nat.zero)))
  - two_add_one_eq_three_on_prime_3
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (Nat.succ (Nat.succ (Nat.succ Nat.zero)))
  - intermediate_for_zero_add_zero_via_add
    Statement: Eq.{1} Nat (Nat.add Nat.zero Nat.zero) Nat.zero
  - intermediate_for_zero_add_zero_via_zero
    Statement: Eq.{1} Nat (Nat.add Nat.zero Nat.zero) Nat.zero
  - dual_of_zero_add_zero
    Statement: Eq.{1} Nat (Nat.add Nat.zero Nat.zero) Nat.zero
  - intermediate_for_one_add_one_eq_two_via_add
    Statement: Eq.{1} Nat (Nat.add (Nat.succ Nat.zero) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ Nat.zero))
  - intermediate_for_one_add_one_eq_two_via_one
    Statement: Eq.{1} Nat (Nat.add (Nat.succ Nat.zero) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ Nat.zero))
  - intermediate_for_one_add_one_eq_two_via_two
    Statement: Eq.{1} Nat (Nat.add (Nat.succ Nat.zero) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ Nat.zero))
  - dual_of_one_add_one_eq_two
    Statement: Eq.{1} Nat (Nat.add (Nat.succ Nat.zero) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ Nat.zero))
  - intermediate_for_two_add_one_eq_three_via_add
    Statement: Eq.{1} Nat (Nat.add (Nat.succ (Nat.succ Nat.zero)) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ (Nat.succ Nat.zero)))
  - intermediate_for_two_add_one_eq_three_via_two
    Statement: Eq.{1} Nat (Nat.add (Nat.succ (Nat.succ Nat.zero)) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ (Nat.succ Nat.zero)))
  - intermediate_for_two_add_one_eq_three_via_one
    Statement: Eq.{1} Nat (Nat.add (Nat.succ (Nat.succ Nat.zero)) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ (Nat.succ Nat.zero)))
  - intermediate_for_two_add_one_eq_three_via_succ
    Statement: Eq.{1} Nat (Nat.add (Nat.succ (Nat.succ Nat.zero)) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ (Nat.succ Nat.zero)))
  - dual_of_two_add_one_eq_three
    Statement: Eq.{1} Nat (Nat.add (Nat.succ (Nat.succ Nat.zero)) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ (Nat.succ Nat.zero)))

================================================================================
=== ITERATION 2 COMPLETE ===
Total Concepts: 535 (+245 new)
Patterns: 13
Conjectures: 121
Theorems: 212
Top Concepts:
  - concept_freshness (score: 1.000000)
  - add_assoc (score: 1.000000)
  - add_comm (score: 1.000000)
  - add_zero (score: 1.000000)
  - zero_add (score: 1.000000)
  - mul_assoc (score: 1.000000)
  - mul_comm (score: 1.000000)
  - mul_one (score: 1.000000)
  - one_mul (score: 1.000000)
  - mul_zero (score: 1.000000)
Generation Methods:
  seed: 9
  application: 38
  specialization: 100
  pattern_recognition: 5
  composition: 56
  lemma_application: 61
All Patterns (13):
  - natural_number_sequence: Sequence: 0, 1, 2, ... (natural numbers via successor)
  - variation_add_assoc: Variation pattern based on theorem add_assoc
  - variation_add_comm: Variation pattern based on theorem add_comm
  - variation_add_zero: Variation pattern based on theorem add_zero
  - succ_iteration_pattern: Repeated application of succ
  - add_iteration_pattern: Repeated application of add
  - add1_iteration_pattern: Repeated application of add1
  - add2_iteration_pattern: Repeated application of add2
  - meta_pattern_application_successful: Meta-pattern: application has been successful (20 concepts)
  - meta_pattern_composition_successful: Meta-pattern: composition has been successful (6 concepts)
  - meta_pattern_specialization_successful: Meta-pattern: specialization has been successful (50 concepts)
  - revived_natural_number_sequence: Revived: Sequence: 0, 1, 2, ... (natural numbers via successor)
  - revived_variation_add_assoc: Revived: Variation pattern based on theorem add_assoc
All Conjectures (121):
  - function_lemma_for_zero_add_zero
    Statement: Eq.{1} Nat (Nat.add Nat.zero Nat.zero)
  - function_lemma_for_one_add_one_eq_two
    Statement: Eq.{1} Nat (Nat.add (Nat.succ Nat.zero) (Nat.succ Nat.zero))
  - function_lemma_for_two_add_one_eq_three
    Statement: Eq.{1} Nat (Nat.add (Nat.succ (Nat.succ Nat.zero)) (Nat.succ Nat.zero))
  - add_comp_succ_eq_0
    Statement: Eq.{1} Nat (Nat.add (Nat.succ Nat.zero)) (Nat.add Nat.zero)
  - add_comp_succ_eq_1
    Statement: Eq.{1} Nat (Nat.add (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - add_comp_succ_eq_2
    Statement: Eq.{1} Nat (Nat.add (Nat.succ Nat.zero)) Nat.zero
  - add_comp_succ_eq_3
    Statement: Eq.{1} Nat (Nat.add (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - add_comp_add1_eq_0
    Statement: Eq.{1} Nat (Nat.add ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.add Nat.zero)
  - add_comp_add1_eq_1
    Statement: Eq.{1} Nat (Nat.add ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)
  - add_comp_add1_eq_2
    Statement: Eq.{1} Nat (Nat.add ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) Nat.zero
  - add_comp_add1_eq_3
    Statement: Eq.{1} Nat (Nat.add ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.succ Nat.zero)
  - add_comp_add2_eq_0
    Statement: Eq.{1} Nat (Nat.add ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.add Nat.zero)
  - add_comp_add2_eq_1
    Statement: Eq.{1} Nat (Nat.add ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)
  - add_comp_add2_eq_2
    Statement: Eq.{1} Nat (Nat.add ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) Nat.zero
  - add_comp_add2_eq_3
    Statement: Eq.{1} Nat (Nat.add ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.succ Nat.zero)
  - mul_comp_succ_eq_0
    Statement: Eq.{1} Nat (Nat.mul (Nat.succ Nat.zero)) (Nat.mul Nat.zero)
  - mul_comp_succ_eq_1
    Statement: Eq.{1} Nat (Nat.mul (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - mul_comp_succ_eq_2
    Statement: Eq.{1} Nat (Nat.mul (Nat.succ Nat.zero)) Nat.zero
  - mul_comp_succ_eq_3
    Statement: Eq.{1} Nat (Nat.mul (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - mul_comp_add1_eq_0
    Statement: Eq.{1} Nat (Nat.mul ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.mul Nat.zero)
  - mul_comp_add1_eq_1
    Statement: Eq.{1} Nat (Nat.mul ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)
  - mul_comp_add1_eq_2
    Statement: Eq.{1} Nat (Nat.mul ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) Nat.zero
  - mul_comp_add1_eq_3
    Statement: Eq.{1} Nat (Nat.mul ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.succ Nat.zero)
  - mul_comp_add2_eq_0
    Statement: Eq.{1} Nat (Nat.mul ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.mul Nat.zero)
  - mul_comp_add2_eq_1
    Statement: Eq.{1} Nat (Nat.mul ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)
  - mul_comp_add2_eq_2
    Statement: Eq.{1} Nat (Nat.mul ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) Nat.zero
  - mul_comp_add2_eq_3
    Statement: Eq.{1} Nat (Nat.mul ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.succ Nat.zero)
  - sub_comp_succ_eq_0
    Statement: Eq.{1} Nat (Nat.sub (Nat.succ Nat.zero)) (Nat.sub Nat.zero)
  - sub_comp_succ_eq_1
    Statement: Eq.{1} Nat (Nat.sub (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - sub_comp_succ_eq_2
    Statement: Eq.{1} Nat (Nat.sub (Nat.succ Nat.zero)) Nat.zero
  - sub_comp_succ_eq_3
    Statement: Eq.{1} Nat (Nat.sub (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - sub_comp_add1_eq_0
    Statement: Eq.{1} Nat (Nat.sub ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.sub Nat.zero)
  - sub_comp_add1_eq_1
    Statement: Eq.{1} Nat (Nat.sub ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)
  - sub_comp_add1_eq_2
    Statement: Eq.{1} Nat (Nat.sub ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) Nat.zero
  - sub_comp_add1_eq_3
    Statement: Eq.{1} Nat (Nat.sub ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.succ Nat.zero)
  - sub_comp_add2_eq_0
    Statement: Eq.{1} Nat (Nat.sub ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.sub Nat.zero)
  - sub_comp_add2_eq_1
    Statement: Eq.{1} Nat (Nat.sub ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)
  - sub_comp_add2_eq_2
    Statement: Eq.{1} Nat (Nat.sub ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) Nat.zero
  - sub_comp_add2_eq_3
    Statement: Eq.{1} Nat (Nat.sub ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.succ Nat.zero)
  - mod_comp_succ_eq_0
    Statement: Eq.{1} Nat (Nat.mod (Nat.succ Nat.zero)) (Nat.mod Nat.zero)
  - mod_comp_succ_eq_1
    Statement: Eq.{1} Nat (Nat.mod (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - mod_comp_succ_eq_2
    Statement: Eq.{1} Nat (Nat.mod (Nat.succ Nat.zero)) Nat.zero
  - mod_comp_succ_eq_3
    Statement: Eq.{1} Nat (Nat.mod (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - mod_comp_add1_eq_0
    Statement: Eq.{1} Nat (Nat.mod ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.mod Nat.zero)
  - mod_comp_add1_eq_1
    Statement: Eq.{1} Nat (Nat.mod ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)
  - mod_comp_add1_eq_2
    Statement: Eq.{1} Nat (Nat.mod ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) Nat.zero
  - mod_comp_add1_eq_3
    Statement: Eq.{1} Nat (Nat.mod ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.succ Nat.zero)
  - mod_comp_add2_eq_0
    Statement: Eq.{1} Nat (Nat.mod ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.mod Nat.zero)
  - mod_comp_add2_eq_1
    Statement: Eq.{1} Nat (Nat.mod ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)
  - mod_comp_add2_eq_2
    Statement: Eq.{1} Nat (Nat.mod ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) Nat.zero
  - mod_comp_add2_eq_3
    Statement: Eq.{1} Nat (Nat.mod ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.succ Nat.zero)
  - gcd_comp_succ_eq_0
    Statement: Eq.{1} Nat (Nat.gcd (Nat.succ Nat.zero)) (Nat.gcd Nat.zero)
  - gcd_comp_succ_eq_1
    Statement: Eq.{1} Nat (Nat.gcd (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - gcd_comp_succ_eq_2
    Statement: Eq.{1} Nat (Nat.gcd (Nat.succ Nat.zero)) Nat.zero
  - gcd_comp_succ_eq_3
    Statement: Eq.{1} Nat (Nat.gcd (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - gcd_comp_add1_eq_0
    Statement: Eq.{1} Nat (Nat.gcd ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.gcd Nat.zero)
  - gcd_comp_add1_eq_1
    Statement: Eq.{1} Nat (Nat.gcd ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)
  - gcd_comp_add1_eq_2
    Statement: Eq.{1} Nat (Nat.gcd ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) Nat.zero
  - gcd_comp_add1_eq_3
    Statement: Eq.{1} Nat (Nat.gcd ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.succ Nat.zero)
  - gcd_comp_add2_eq_0
    Statement: Eq.{1} Nat (Nat.gcd ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.gcd Nat.zero)
  - gcd_comp_add2_eq_1
    Statement: Eq.{1} Nat (Nat.gcd ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)
  - gcd_comp_add2_eq_2
    Statement: Eq.{1} Nat (Nat.gcd ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) Nat.zero
  - gcd_comp_add2_eq_3
    Statement: Eq.{1} Nat (Nat.gcd ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.succ Nat.zero)
  - lcm_comp_succ_eq_0
    Statement: Eq.{1} Nat (Nat.lcm (Nat.succ Nat.zero)) (Nat.lcm Nat.zero)
  - lcm_comp_succ_eq_1
    Statement: Eq.{1} Nat (Nat.lcm (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - lcm_comp_succ_eq_2
    Statement: Eq.{1} Nat (Nat.lcm (Nat.succ Nat.zero)) Nat.zero
  - lcm_comp_succ_eq_3
    Statement: Eq.{1} Nat (Nat.lcm (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - lcm_comp_add1_eq_0
    Statement: Eq.{1} Nat (Nat.lcm ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.lcm Nat.zero)
  - lcm_comp_add1_eq_1
    Statement: Eq.{1} Nat (Nat.lcm ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)
  - lcm_comp_add1_eq_2
    Statement: Eq.{1} Nat (Nat.lcm ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) Nat.zero
  - lcm_comp_add1_eq_3
    Statement: Eq.{1} Nat (Nat.lcm ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.succ Nat.zero)
  - lcm_comp_add2_eq_0
    Statement: Eq.{1} Nat (Nat.lcm ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.lcm Nat.zero)
  - lcm_comp_add2_eq_1
    Statement: Eq.{1} Nat (Nat.lcm ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)
  - lcm_comp_add2_eq_2
    Statement: Eq.{1} Nat (Nat.lcm ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) Nat.zero
  - lcm_comp_add2_eq_3
    Statement: Eq.{1} Nat (Nat.lcm ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.succ Nat.zero)
  - succ_comp_add1_eq_0
    Statement: Eq.{1} Nat (Nat.succ ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.succ Nat.zero)
  - succ_comp_add1_eq_1
    Statement: Eq.{1} Nat (Nat.succ ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)
  - succ_comp_add1_eq_2
    Statement: Eq.{1} Nat (Nat.succ ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) Nat.zero
  - succ_comp_add1_eq_3
    Statement: Eq.{1} Nat (Nat.succ ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.succ Nat.zero)
  - succ_comp_add2_eq_0
    Statement: Eq.{1} Nat (Nat.succ ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.succ Nat.zero)
  - succ_comp_add2_eq_1
    Statement: Eq.{1} Nat (Nat.succ ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)
  - succ_comp_add2_eq_2
    Statement: Eq.{1} Nat (Nat.succ ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) Nat.zero
  - succ_comp_add2_eq_3
    Statement: Eq.{1} Nat (Nat.succ ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.succ Nat.zero)
  - add1_comp_succ_eq_0
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) (Nat.succ Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)
  - add1_comp_succ_eq_1
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - add1_comp_succ_eq_2
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) (Nat.succ Nat.zero)) Nat.zero
  - add1_comp_succ_eq_3
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - add1_comp_add2_eq_0
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)
  - add1_comp_add2_eq_1
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)
  - add1_comp_add2_eq_2
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) Nat.zero
  - add1_comp_add2_eq_3
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.succ Nat.zero)
  - add2_comp_succ_eq_0
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) (Nat.succ Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)
  - add2_comp_succ_eq_1
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - add2_comp_succ_eq_2
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) (Nat.succ Nat.zero)) Nat.zero
  - add2_comp_succ_eq_3
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - add2_comp_add1_eq_0
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)
  - add2_comp_add1_eq_1
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)
  - add2_comp_add1_eq_2
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) Nat.zero
  - add2_comp_add1_eq_3
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.succ Nat.zero)
  - succ_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat (Nat.succ Nat.zero) (Nat.succ (Nat.succ Nat.zero))
  - add1_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) (Nat.succ Nat.zero))
  - add2_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) (Nat.succ Nat.zero))
  - succ_compose_add1_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 1 x)) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 1 x)) (Nat.succ Nat.zero))
  - cross_apply_zero_add_zero_to_zero
    Statement: True
  - cross_apply_zero_add_zero_to_succ
    Statement: True
  - cross_apply_zero_add_zero_to_one
    Statement: True
  - cross_apply_zero_add_zero_to_two
    Statement: True
  - cross_apply_zero_add_zero_to_add
    Statement: True
  - cross_apply_one_add_one_eq_two_to_zero
    Statement: True
  - cross_apply_one_add_one_eq_two_to_succ
    Statement: True
  - cross_apply_one_add_one_eq_two_to_one
    Statement: True
  - cross_apply_one_add_one_eq_two_to_two
    Statement: True
  - cross_apply_one_add_one_eq_two_to_add
    Statement: True
  - cross_apply_two_add_one_eq_three_to_zero
    Statement: True
  - cross_apply_two_add_one_eq_three_to_succ
    Statement: True
  - cross_apply_two_add_one_eq_three_to_one
    Statement: True
  - cross_apply_two_add_one_eq_three_to_two
    Statement: True
  - cross_apply_two_add_one_eq_three_to_add
    Statement: True
  - extension_zero_add_zero
    Statement: True
  - extension_one_add_one_eq_two
    Statement: True
  - extension_two_add_one_eq_three
    Statement: True
All Theorems (212):
  - add_assoc
    Statement: forall (n : Nat) (m : Nat) (k : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n m) k) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m k))
  - add_comm
    Statement: forall (n : Nat) (m : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n m) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m n)
  - add_zero
    Statement: forall (n : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) n
  - zero_add
    Statement: forall (n : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) n) n
  - mul_assoc
    Statement: forall (n : Nat) (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n m) k) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m k))
  - mul_comm
    Statement: forall (n : Nat) (m : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n m) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m n)
  - mul_one
    Statement: forall (n : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) n
  - one_mul
    Statement: forall (n : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) n) n
  - mul_zero
    Statement: forall (n : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - zero_mul
    Statement: forall (n : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) n) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - left_distrib
    Statement: forall (n : Nat) (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m k)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n m) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n k))
  - right_distrib
    Statement: forall (n : Nat) (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n m) k) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n k) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m k))
  - dvd_refl
    Statement: forall (a : Nat), Dvd.dvd.{0} Nat Nat.instDvd a a
  - dvd_trans
    Statement: forall {a : Nat} {b : Nat} {c : Nat}, (Dvd.dvd.{0} Nat Nat.instDvd a b) -> (Dvd.dvd.{0} Nat Nat.instDvd b c) -> (Dvd.dvd.{0} Nat Nat.instDvd a c)
  - dvd_add
    Statement: forall {a : Nat} {b : Nat} {c : Nat}, (Dvd.dvd.{0} Nat Nat.instDvd a b) -> (Dvd.dvd.{0} Nat Nat.instDvd a c) -> (Dvd.dvd.{0} Nat Nat.instDvd a (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) b c))
  - dvd_mul
    Statement: forall {k : Nat} {m : Nat} {n : Nat}, Iff (Dvd.dvd.{0} Nat Nat.instDvd k (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m n)) (Exists.{1} Nat (fun (k₁ : Nat) => Exists.{1} Nat (fun (k₂ : Nat) => And (Dvd.dvd.{0} Nat Nat.instDvd k₁ m) (And (Dvd.dvd.{0} Nat Nat.instDvd k₂ n) (Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) k₁ k₂) k)))))
  - gcd_comm
    Statement: forall (m : Nat) (n : Nat), Eq.{1} Nat (Nat.gcd m n) (Nat.gcd n m)
  - gcd_assoc
    Statement: forall (m : Nat) (n : Nat) (k : Nat), Eq.{1} Nat (Nat.gcd (Nat.gcd m n) k) (Nat.gcd m (Nat.gcd n k))
  - gcd_zero_left
    Statement: forall (y : Nat), Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} ([mdata borrowed:1 Nat]) 0 (instOfNatNat 0)) y) y
  - gcd_zero_right
    Statement: forall (n : Nat), Eq.{1} Nat (Nat.gcd n (OfNat.ofNat.{0} ([mdata borrowed:1 Nat]) 0 (instOfNatNat 0))) n
  - lcm_comm
    Statement: forall (m : Nat) (n : Nat), Eq.{1} Nat (Nat.lcm m n) (Nat.lcm n m)
  - lcm_assoc
    Statement: forall (m : Nat) (n : Nat) (k : Nat), Eq.{1} Nat (Nat.lcm (Nat.lcm m n) k) (Nat.lcm m (Nat.lcm n k))
  - prime_def
    Statement: forall {p : Nat}, Iff (Nat.Prime p) (And (LE.le.{0} Nat instLENat (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) p) (forall (m : Nat), (Dvd.dvd.{0} Nat Nat.instDvd m p) -> (Or (Eq.{1} Nat m (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (Eq.{1} Nat m p))))
  - prime_two
    Statement: Nat.Prime (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - prime_three
    Statement: Nat.Prime (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - prime_five
    Statement: Nat.Prime (OfNat.ofNat.{0} Nat 5 (instOfNatNat 5))
  - prime_seven
    Statement: Nat.Prime (OfNat.ofNat.{0} Nat 7 (instOfNatNat 7))
  - mod_mod
    Statement: forall (a : Nat) (n : Nat), Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) a n) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) a n)
  - add_mod
    Statement: forall (a : Nat) (b : Nat) (n : Nat), Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) a b) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) a n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) b n)) n)
  - mul_mod
    Statement: forall (a : Nat) (b : Nat) (n : Nat), Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) a b) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) a n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) b n)) n)
  - mod_two_eq_zero_or_one
    Statement: forall (n : Nat), Or (Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) n (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) n (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))
  - fib_zero
    Statement: Eq.{1} Nat (Nat.fib (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - fib_one
    Statement: Eq.{1} Nat (Nat.fib (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - fib_add
    Statement: forall (m : Nat) (n : Nat), Eq.{1} Nat (Nat.fib (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m n) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (Nat.fib m) (Nat.fib n)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (Nat.fib (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Nat.fib (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))))
  - zero_eq_zero
    Statement: Eq.{1} Nat Nat.zero Nat.zero
  - add_comm
    Statement: forall (n : Nat) (m : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n m) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m n)
  - zero_add_zero
    Statement: Eq.{1} Nat (Nat.add Nat.zero Nat.zero) Nat.zero
  - one_add_one_eq_two
    Statement: Eq.{1} Nat (Nat.add (Nat.succ Nat.zero) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ Nat.zero))
  - two_add_one_eq_three
    Statement: Eq.{1} Nat (Nat.add (Nat.succ (Nat.succ Nat.zero)) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ (Nat.succ Nat.zero)))
  - add_assoc_spec_nat_0
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) m) k) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m k))
  - add_assoc_spec_nat_1
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) m) k) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m k))
  - add_assoc_spec_nat_2
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) m) k) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m k))
  - add_assoc_spec_nat_3
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) m) k) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m k))
  - add_assoc_spec_nat_4
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) m) k) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m k))
  - add_comm_spec_nat_0
    Statement: forall (m : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) m) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)))
  - add_comm_spec_nat_1
    Statement: forall (m : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) m) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))
  - add_comm_spec_nat_2
    Statement: forall (m : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) m) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)))
  - add_comm_spec_nat_3
    Statement: forall (m : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) m) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)))
  - add_comm_spec_nat_4
    Statement: forall (m : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) m) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)))
  - add_zero_spec_nat_0
    Statement: Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - add_zero_spec_nat_1
    Statement: Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - add_zero_spec_nat_2
    Statement: Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - add_zero_spec_nat_3
    Statement: Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - add_zero_spec_nat_4
    Statement: Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - zero_add_spec_nat_0
    Statement: Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - zero_add_spec_nat_1
    Statement: Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - zero_add_spec_nat_2
    Statement: Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - zero_add_spec_nat_3
    Statement: Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - zero_add_spec_nat_4
    Statement: Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - mul_assoc_spec_nat_0
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) m) k) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m k))
  - mul_assoc_spec_nat_1
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) m) k) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m k))
  - mul_assoc_spec_nat_2
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) m) k) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m k))
  - mul_assoc_spec_nat_3
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) m) k) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m k))
  - mul_assoc_spec_nat_4
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) m) k) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m k))
  - mul_comm_spec_nat_0
    Statement: forall (m : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) m) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)))
  - mul_comm_spec_nat_1
    Statement: forall (m : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) m) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))
  - mul_comm_spec_nat_2
    Statement: forall (m : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) m) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)))
  - mul_comm_spec_nat_3
    Statement: forall (m : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) m) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)))
  - mul_comm_spec_nat_4
    Statement: forall (m : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) m) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)))
  - mul_one_spec_nat_0
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - mul_one_spec_nat_1
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - mul_one_spec_nat_2
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - mul_one_spec_nat_3
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - mul_one_spec_nat_4
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - one_mul_spec_nat_0
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - one_mul_spec_nat_1
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - one_mul_spec_nat_2
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - one_mul_spec_nat_3
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - one_mul_spec_nat_4
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - mul_zero_spec_nat_0
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - mul_zero_spec_nat_1
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - mul_zero_spec_nat_2
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - mul_zero_spec_nat_3
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - mul_zero_spec_nat_4
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - zero_mul_spec_nat_0
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - zero_mul_spec_nat_1
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - zero_mul_spec_nat_2
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - zero_mul_spec_nat_3
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - zero_mul_spec_nat_4
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - fib_zero_on_nat_0
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - fib_zero_on_zero
    Statement: Eq.{1} Nat Nat.zero (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - fib_one_on_nat_1
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - fib_one_on_one
    Statement: Eq.{1} Nat (Nat.succ Nat.zero) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - zero_eq_zero_on_nat_0
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) Nat.zero
  - zero_add_zero_on_nat_0
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) Nat.zero
  - one_add_one_eq_two_on_nat_2
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (Nat.succ (Nat.succ Nat.zero))
  - one_add_one_eq_two_on_prime_2
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (Nat.succ (Nat.succ Nat.zero))
  - one_add_one_eq_two_on_two
    Statement: Eq.{1} Nat (Nat.succ (Nat.succ Nat.zero)) (Nat.succ (Nat.succ Nat.zero))
  - two_add_one_eq_three_on_nat_3
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (Nat.succ (Nat.succ (Nat.succ Nat.zero)))
  - two_add_one_eq_three_on_prime_3
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (Nat.succ (Nat.succ (Nat.succ Nat.zero)))
  - intermediate_for_zero_add_zero_via_add
    Statement: Eq.{1} Nat (Nat.add Nat.zero Nat.zero) Nat.zero
  - intermediate_for_zero_add_zero_via_zero
    Statement: Eq.{1} Nat (Nat.add Nat.zero Nat.zero) Nat.zero
  - dual_of_zero_add_zero
    Statement: Eq.{1} Nat (Nat.add Nat.zero Nat.zero) Nat.zero
  - intermediate_for_one_add_one_eq_two_via_add
    Statement: Eq.{1} Nat (Nat.add (Nat.succ Nat.zero) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ Nat.zero))
  - intermediate_for_one_add_one_eq_two_via_one
    Statement: Eq.{1} Nat (Nat.add (Nat.succ Nat.zero) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ Nat.zero))
  - intermediate_for_one_add_one_eq_two_via_two
    Statement: Eq.{1} Nat (Nat.add (Nat.succ Nat.zero) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ Nat.zero))
  - dual_of_one_add_one_eq_two
    Statement: Eq.{1} Nat (Nat.add (Nat.succ Nat.zero) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ Nat.zero))
  - intermediate_for_two_add_one_eq_three_via_add
    Statement: Eq.{1} Nat (Nat.add (Nat.succ (Nat.succ Nat.zero)) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ (Nat.succ Nat.zero)))
  - intermediate_for_two_add_one_eq_three_via_two
    Statement: Eq.{1} Nat (Nat.add (Nat.succ (Nat.succ Nat.zero)) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ (Nat.succ Nat.zero)))
  - intermediate_for_two_add_one_eq_three_via_one
    Statement: Eq.{1} Nat (Nat.add (Nat.succ (Nat.succ Nat.zero)) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ (Nat.succ Nat.zero)))
  - intermediate_for_two_add_one_eq_three_via_succ
    Statement: Eq.{1} Nat (Nat.add (Nat.succ (Nat.succ Nat.zero)) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ (Nat.succ Nat.zero)))
  - dual_of_two_add_one_eq_three
    Statement: Eq.{1} Nat (Nat.add (Nat.succ (Nat.succ Nat.zero)) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ (Nat.succ Nat.zero)))
  - left_distrib_spec_nat_0
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m k)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) m) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) k))
  - left_distrib_spec_nat_1
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m k)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) m) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) k))
  - left_distrib_spec_nat_2
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m k)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) m) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) k))
  - left_distrib_spec_nat_3
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m k)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) m) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) k))
  - left_distrib_spec_nat_4
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m k)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) m) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) k))
  - right_distrib_spec_nat_0
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) m) k) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) k) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m k))
  - right_distrib_spec_nat_1
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) m) k) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) k) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m k))
  - right_distrib_spec_nat_2
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) m) k) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) k) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m k))
  - right_distrib_spec_nat_3
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) m) k) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) k) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m k))
  - right_distrib_spec_nat_4
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) m) k) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) k) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m k))
  - dvd_refl_spec_nat_0
    Statement: Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - dvd_refl_spec_nat_1
    Statement: Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - dvd_refl_spec_nat_2
    Statement: Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - dvd_refl_spec_nat_3
    Statement: Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - dvd_refl_spec_nat_4
    Statement: Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - dvd_trans_spec_nat_0
    Statement: forall {b : Nat} {c : Nat}, (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) b) -> (Dvd.dvd.{0} Nat Nat.instDvd b c) -> (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) c)
  - dvd_trans_spec_nat_1
    Statement: forall {b : Nat} {c : Nat}, (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) b) -> (Dvd.dvd.{0} Nat Nat.instDvd b c) -> (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) c)
  - dvd_trans_spec_nat_2
    Statement: forall {b : Nat} {c : Nat}, (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) b) -> (Dvd.dvd.{0} Nat Nat.instDvd b c) -> (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) c)
  - dvd_trans_spec_nat_3
    Statement: forall {b : Nat} {c : Nat}, (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) b) -> (Dvd.dvd.{0} Nat Nat.instDvd b c) -> (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) c)
  - dvd_trans_spec_nat_4
    Statement: forall {b : Nat} {c : Nat}, (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) b) -> (Dvd.dvd.{0} Nat Nat.instDvd b c) -> (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) c)
  - dvd_add_spec_nat_0
    Statement: forall {b : Nat} {c : Nat}, (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) b) -> (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) c) -> (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) b c))
  - dvd_add_spec_nat_1
    Statement: forall {b : Nat} {c : Nat}, (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) b) -> (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) c) -> (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) b c))
  - dvd_add_spec_nat_2
    Statement: forall {b : Nat} {c : Nat}, (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) b) -> (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) c) -> (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) b c))
  - dvd_add_spec_nat_3
    Statement: forall {b : Nat} {c : Nat}, (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) b) -> (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) c) -> (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) b c))
  - dvd_add_spec_nat_4
    Statement: forall {b : Nat} {c : Nat}, (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) b) -> (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) c) -> (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) b c))
  - dvd_mul_spec_nat_0
    Statement: forall {m : Nat} {n : Nat}, Iff (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m n)) (Exists.{1} Nat (fun (k₁ : Nat) => Exists.{1} Nat (fun (k₂ : Nat) => And (Dvd.dvd.{0} Nat Nat.instDvd k₁ m) (And (Dvd.dvd.{0} Nat Nat.instDvd k₂ n) (Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) k₁ k₂) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)))))))
  - dvd_mul_spec_nat_1
    Statement: forall {m : Nat} {n : Nat}, Iff (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m n)) (Exists.{1} Nat (fun (k₁ : Nat) => Exists.{1} Nat (fun (k₂ : Nat) => And (Dvd.dvd.{0} Nat Nat.instDvd k₁ m) (And (Dvd.dvd.{0} Nat Nat.instDvd k₂ n) (Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) k₁ k₂) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))))))
  - dvd_mul_spec_nat_2
    Statement: forall {m : Nat} {n : Nat}, Iff (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m n)) (Exists.{1} Nat (fun (k₁ : Nat) => Exists.{1} Nat (fun (k₂ : Nat) => And (Dvd.dvd.{0} Nat Nat.instDvd k₁ m) (And (Dvd.dvd.{0} Nat Nat.instDvd k₂ n) (Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) k₁ k₂) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)))))))
  - dvd_mul_spec_nat_3
    Statement: forall {m : Nat} {n : Nat}, Iff (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m n)) (Exists.{1} Nat (fun (k₁ : Nat) => Exists.{1} Nat (fun (k₂ : Nat) => And (Dvd.dvd.{0} Nat Nat.instDvd k₁ m) (And (Dvd.dvd.{0} Nat Nat.instDvd k₂ n) (Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) k₁ k₂) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)))))))
  - dvd_mul_spec_nat_4
    Statement: forall {m : Nat} {n : Nat}, Iff (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m n)) (Exists.{1} Nat (fun (k₁ : Nat) => Exists.{1} Nat (fun (k₂ : Nat) => And (Dvd.dvd.{0} Nat Nat.instDvd k₁ m) (And (Dvd.dvd.{0} Nat Nat.instDvd k₂ n) (Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) k₁ k₂) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)))))))
  - gcd_comm_spec_nat_0
    Statement: forall (n : Nat), Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) n) (Nat.gcd n (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)))
  - gcd_comm_spec_nat_1
    Statement: forall (n : Nat), Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) n) (Nat.gcd n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))
  - gcd_comm_spec_nat_2
    Statement: forall (n : Nat), Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) n) (Nat.gcd n (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)))
  - gcd_comm_spec_nat_3
    Statement: forall (n : Nat), Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) n) (Nat.gcd n (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)))
  - gcd_comm_spec_nat_4
    Statement: forall (n : Nat), Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) n) (Nat.gcd n (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)))
  - gcd_assoc_spec_nat_0
    Statement: forall (n : Nat) (k : Nat), Eq.{1} Nat (Nat.gcd (Nat.gcd (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) n) k) (Nat.gcd (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (Nat.gcd n k))
  - gcd_assoc_spec_nat_1
    Statement: forall (n : Nat) (k : Nat), Eq.{1} Nat (Nat.gcd (Nat.gcd (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) n) k) (Nat.gcd (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (Nat.gcd n k))
  - gcd_assoc_spec_nat_2
    Statement: forall (n : Nat) (k : Nat), Eq.{1} Nat (Nat.gcd (Nat.gcd (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) n) k) (Nat.gcd (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (Nat.gcd n k))
  - gcd_assoc_spec_nat_3
    Statement: forall (n : Nat) (k : Nat), Eq.{1} Nat (Nat.gcd (Nat.gcd (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) n) k) (Nat.gcd (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (Nat.gcd n k))
  - gcd_assoc_spec_nat_4
    Statement: forall (n : Nat) (k : Nat), Eq.{1} Nat (Nat.gcd (Nat.gcd (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) n) k) (Nat.gcd (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (Nat.gcd n k))
  - gcd_zero_left_spec_nat_0
    Statement: Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} ([mdata borrowed:1 Nat]) 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - gcd_zero_left_spec_nat_1
    Statement: Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} ([mdata borrowed:1 Nat]) 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - gcd_zero_left_spec_nat_2
    Statement: Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} ([mdata borrowed:1 Nat]) 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - gcd_zero_left_spec_nat_3
    Statement: Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} ([mdata borrowed:1 Nat]) 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - gcd_zero_left_spec_nat_4
    Statement: Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} ([mdata borrowed:1 Nat]) 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - gcd_zero_right_spec_nat_0
    Statement: Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} ([mdata borrowed:1 Nat]) 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - gcd_zero_right_spec_nat_1
    Statement: Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} ([mdata borrowed:1 Nat]) 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - gcd_zero_right_spec_nat_2
    Statement: Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} ([mdata borrowed:1 Nat]) 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - gcd_zero_right_spec_nat_3
    Statement: Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (OfNat.ofNat.{0} ([mdata borrowed:1 Nat]) 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - gcd_zero_right_spec_nat_4
    Statement: Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (OfNat.ofNat.{0} ([mdata borrowed:1 Nat]) 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - fib_one_on_succ_applied_to_nat_0
    Statement: Eq.{1} Nat 1 (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - fib_one_on_add1_applied_to_nat_0
    Statement: Eq.{1} Nat 1 (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - one_add_one_eq_two_on_succ_applied_to_nat_1
    Statement: Eq.{1} Nat 2 (Nat.succ (Nat.succ Nat.zero))
  - one_add_one_eq_two_on_add1_applied_to_nat_1
    Statement: Eq.{1} Nat 2 (Nat.succ (Nat.succ Nat.zero))
  - one_add_one_eq_two_on_add2_applied_to_nat_0
    Statement: Eq.{1} Nat 2 (Nat.succ (Nat.succ Nat.zero))
  - two_add_one_eq_three_on_num_3
    Statement: Eq.{1} Nat (Nat.succ (Nat.succ (Nat.succ Nat.zero))) (Nat.succ (Nat.succ (Nat.succ Nat.zero)))
  - two_add_one_eq_three_on_succ_applied_to_nat_2
    Statement: Eq.{1} Nat 3 (Nat.succ (Nat.succ (Nat.succ Nat.zero)))
  - two_add_one_eq_three_on_add1_applied_to_nat_2
    Statement: Eq.{1} Nat 3 (Nat.succ (Nat.succ (Nat.succ Nat.zero)))
  - two_add_one_eq_three_on_add2_applied_to_nat_1
    Statement: Eq.{1} Nat 3 (Nat.succ (Nat.succ (Nat.succ Nat.zero)))
  - add_zero_spec_nat_1_on_succ_applied_to_nat_0
    Statement: Eq.{1} Nat 1 (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - add_zero_spec_nat_1_on_add1_applied_to_nat_0
    Statement: Eq.{1} Nat 1 (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - add_zero_spec_nat_2_on_nat_2
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - add_zero_spec_nat_2_on_prime_2
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - add_zero_spec_nat_2_on_two
    Statement: Eq.{1} Nat (Nat.succ (Nat.succ Nat.zero)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - add_zero_spec_nat_2_on_succ_applied_to_nat_1
    Statement: Eq.{1} Nat 2 (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - add_zero_spec_nat_2_on_add1_applied_to_nat_1
    Statement: Eq.{1} Nat 2 (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - add_zero_spec_nat_2_on_add2_applied_to_nat_0
    Statement: Eq.{1} Nat 2 (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - add_zero_spec_nat_3_on_nat_3
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - add_zero_spec_nat_3_on_prime_3
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - add_zero_spec_nat_3_on_num_3
    Statement: Eq.{1} Nat (Nat.succ (Nat.succ (Nat.succ Nat.zero))) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - add_zero_spec_nat_3_on_succ_applied_to_nat_2
    Statement: Eq.{1} Nat 3 (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - add_zero_spec_nat_3_on_add1_applied_to_nat_2
    Statement: Eq.{1} Nat 3 (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - add_zero_spec_nat_3_on_add2_applied_to_nat_1
    Statement: Eq.{1} Nat 3 (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - add_zero_spec_nat_4_on_nat_4
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - add_zero_spec_nat_4_on_succ_applied_to_nat_3
    Statement: Eq.{1} Nat 4 (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - add_zero_spec_nat_4_on_add1_applied_to_nat_3
    Statement: Eq.{1} Nat 4 (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - add_zero_spec_nat_4_on_add2_applied_to_nat_2
    Statement: Eq.{1} Nat 4 (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - zero_add_spec_nat_1_on_succ_applied_to_nat_0
    Statement: Eq.{1} Nat 1 (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - zero_add_spec_nat_1_on_add1_applied_to_nat_0
    Statement: Eq.{1} Nat 1 (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - zero_add_spec_nat_2_on_nat_2
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - zero_add_spec_nat_2_on_prime_2
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - zero_add_spec_nat_2_on_two
    Statement: Eq.{1} Nat (Nat.succ (Nat.succ Nat.zero)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - zero_add_spec_nat_2_on_succ_applied_to_nat_1
    Statement: Eq.{1} Nat 2 (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - zero_add_spec_nat_2_on_add1_applied_to_nat_1
    Statement: Eq.{1} Nat 2 (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - zero_add_spec_nat_2_on_add2_applied_to_nat_0
    Statement: Eq.{1} Nat 2 (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - zero_add_spec_nat_3_on_nat_3
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - zero_add_spec_nat_3_on_prime_3
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - zero_add_spec_nat_3_on_num_3
    Statement: Eq.{1} Nat (Nat.succ (Nat.succ (Nat.succ Nat.zero))) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - zero_add_spec_nat_3_on_succ_applied_to_nat_2
    Statement: Eq.{1} Nat 3 (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - zero_add_spec_nat_3_on_add1_applied_to_nat_2
    Statement: Eq.{1} Nat 3 (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - zero_add_spec_nat_3_on_add2_applied_to_nat_1
    Statement: Eq.{1} Nat 3 (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - zero_add_spec_nat_4_on_nat_4
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - zero_add_spec_nat_4_on_succ_applied_to_nat_3
    Statement: Eq.{1} Nat 4 (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - zero_add_spec_nat_4_on_add1_applied_to_nat_3
    Statement: Eq.{1} Nat 4 (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - zero_add_spec_nat_4_on_add2_applied_to_nat_2
    Statement: Eq.{1} Nat 4 (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - mul_one_spec_nat_1_on_succ_applied_to_nat_0
    Statement: Eq.{1} Nat 1 (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - mul_one_spec_nat_1_on_add1_applied_to_nat_0
    Statement: Eq.{1} Nat 1 (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - mul_one_spec_nat_2_on_nat_2
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - mul_one_spec_nat_2_on_prime_2
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - mul_one_spec_nat_2_on_two
    Statement: Eq.{1} Nat (Nat.succ (Nat.succ Nat.zero)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))

================================================================================
=== ITERATION 3 COMPLETE ===
Total Concepts: 667 (+132 new)
Patterns: 13
Conjectures: 191
Theorems: 252
Top Concepts:
  - nat_49 (score: 1.000000)
  - add_assoc (score: 1.000000)
  - add_comm (score: 1.000000)
  - add_zero (score: 1.000000)
  - zero_add (score: 1.000000)
  - mul_assoc (score: 1.000000)
  - mul_comm (score: 1.000000)
  - mul_one (score: 1.000000)
  - one_mul (score: 1.000000)
  - mul_zero (score: 1.000000)
Generation Methods:
  seed: 9
  application: 54
  specialization: 140
  pattern_recognition: 5
  composition: 60
  lemma_application: 61
All Patterns (13):
  - natural_number_sequence: Sequence: 0, 1, 2, ... (natural numbers via successor)
  - variation_add_assoc: Variation pattern based on theorem add_assoc
  - variation_add_comm: Variation pattern based on theorem add_comm
  - variation_add_zero: Variation pattern based on theorem add_zero
  - succ_iteration_pattern: Repeated application of succ
  - add_iteration_pattern: Repeated application of add
  - add1_iteration_pattern: Repeated application of add1
  - add2_iteration_pattern: Repeated application of add2
  - meta_pattern_application_successful: Meta-pattern: application has been successful (20 concepts)
  - meta_pattern_composition_successful: Meta-pattern: composition has been successful (6 concepts)
  - meta_pattern_specialization_successful: Meta-pattern: specialization has been successful (50 concepts)
  - revived_natural_number_sequence: Revived: Sequence: 0, 1, 2, ... (natural numbers via successor)
  - revived_variation_add_assoc: Revived: Variation pattern based on theorem add_assoc
All Conjectures (191):
  - function_lemma_for_zero_add_zero
    Statement: Eq.{1} Nat (Nat.add Nat.zero Nat.zero)
  - function_lemma_for_one_add_one_eq_two
    Statement: Eq.{1} Nat (Nat.add (Nat.succ Nat.zero) (Nat.succ Nat.zero))
  - function_lemma_for_two_add_one_eq_three
    Statement: Eq.{1} Nat (Nat.add (Nat.succ (Nat.succ Nat.zero)) (Nat.succ Nat.zero))
  - add_comp_succ_eq_0
    Statement: Eq.{1} Nat (Nat.add (Nat.succ Nat.zero)) (Nat.add Nat.zero)
  - add_comp_succ_eq_1
    Statement: Eq.{1} Nat (Nat.add (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - add_comp_succ_eq_2
    Statement: Eq.{1} Nat (Nat.add (Nat.succ Nat.zero)) Nat.zero
  - add_comp_succ_eq_3
    Statement: Eq.{1} Nat (Nat.add (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - add_comp_add1_eq_0
    Statement: Eq.{1} Nat (Nat.add ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.add Nat.zero)
  - add_comp_add1_eq_1
    Statement: Eq.{1} Nat (Nat.add ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)
  - add_comp_add1_eq_2
    Statement: Eq.{1} Nat (Nat.add ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) Nat.zero
  - add_comp_add1_eq_3
    Statement: Eq.{1} Nat (Nat.add ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.succ Nat.zero)
  - add_comp_add2_eq_0
    Statement: Eq.{1} Nat (Nat.add ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.add Nat.zero)
  - add_comp_add2_eq_1
    Statement: Eq.{1} Nat (Nat.add ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)
  - add_comp_add2_eq_2
    Statement: Eq.{1} Nat (Nat.add ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) Nat.zero
  - add_comp_add2_eq_3
    Statement: Eq.{1} Nat (Nat.add ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.succ Nat.zero)
  - mul_comp_succ_eq_0
    Statement: Eq.{1} Nat (Nat.mul (Nat.succ Nat.zero)) (Nat.mul Nat.zero)
  - mul_comp_succ_eq_1
    Statement: Eq.{1} Nat (Nat.mul (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - mul_comp_succ_eq_2
    Statement: Eq.{1} Nat (Nat.mul (Nat.succ Nat.zero)) Nat.zero
  - mul_comp_succ_eq_3
    Statement: Eq.{1} Nat (Nat.mul (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - mul_comp_add1_eq_0
    Statement: Eq.{1} Nat (Nat.mul ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.mul Nat.zero)
  - mul_comp_add1_eq_1
    Statement: Eq.{1} Nat (Nat.mul ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)
  - mul_comp_add1_eq_2
    Statement: Eq.{1} Nat (Nat.mul ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) Nat.zero
  - mul_comp_add1_eq_3
    Statement: Eq.{1} Nat (Nat.mul ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.succ Nat.zero)
  - mul_comp_add2_eq_0
    Statement: Eq.{1} Nat (Nat.mul ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.mul Nat.zero)
  - mul_comp_add2_eq_1
    Statement: Eq.{1} Nat (Nat.mul ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)
  - mul_comp_add2_eq_2
    Statement: Eq.{1} Nat (Nat.mul ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) Nat.zero
  - mul_comp_add2_eq_3
    Statement: Eq.{1} Nat (Nat.mul ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.succ Nat.zero)
  - sub_comp_succ_eq_0
    Statement: Eq.{1} Nat (Nat.sub (Nat.succ Nat.zero)) (Nat.sub Nat.zero)
  - sub_comp_succ_eq_1
    Statement: Eq.{1} Nat (Nat.sub (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - sub_comp_succ_eq_2
    Statement: Eq.{1} Nat (Nat.sub (Nat.succ Nat.zero)) Nat.zero
  - sub_comp_succ_eq_3
    Statement: Eq.{1} Nat (Nat.sub (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - sub_comp_add1_eq_0
    Statement: Eq.{1} Nat (Nat.sub ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.sub Nat.zero)
  - sub_comp_add1_eq_1
    Statement: Eq.{1} Nat (Nat.sub ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)
  - sub_comp_add1_eq_2
    Statement: Eq.{1} Nat (Nat.sub ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) Nat.zero
  - sub_comp_add1_eq_3
    Statement: Eq.{1} Nat (Nat.sub ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.succ Nat.zero)
  - sub_comp_add2_eq_0
    Statement: Eq.{1} Nat (Nat.sub ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.sub Nat.zero)
  - sub_comp_add2_eq_1
    Statement: Eq.{1} Nat (Nat.sub ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)
  - sub_comp_add2_eq_2
    Statement: Eq.{1} Nat (Nat.sub ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) Nat.zero
  - sub_comp_add2_eq_3
    Statement: Eq.{1} Nat (Nat.sub ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.succ Nat.zero)
  - mod_comp_succ_eq_0
    Statement: Eq.{1} Nat (Nat.mod (Nat.succ Nat.zero)) (Nat.mod Nat.zero)
  - mod_comp_succ_eq_1
    Statement: Eq.{1} Nat (Nat.mod (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - mod_comp_succ_eq_2
    Statement: Eq.{1} Nat (Nat.mod (Nat.succ Nat.zero)) Nat.zero
  - mod_comp_succ_eq_3
    Statement: Eq.{1} Nat (Nat.mod (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - mod_comp_add1_eq_0
    Statement: Eq.{1} Nat (Nat.mod ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.mod Nat.zero)
  - mod_comp_add1_eq_1
    Statement: Eq.{1} Nat (Nat.mod ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)
  - mod_comp_add1_eq_2
    Statement: Eq.{1} Nat (Nat.mod ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) Nat.zero
  - mod_comp_add1_eq_3
    Statement: Eq.{1} Nat (Nat.mod ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.succ Nat.zero)
  - mod_comp_add2_eq_0
    Statement: Eq.{1} Nat (Nat.mod ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.mod Nat.zero)
  - mod_comp_add2_eq_1
    Statement: Eq.{1} Nat (Nat.mod ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)
  - mod_comp_add2_eq_2
    Statement: Eq.{1} Nat (Nat.mod ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) Nat.zero
  - mod_comp_add2_eq_3
    Statement: Eq.{1} Nat (Nat.mod ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.succ Nat.zero)
  - gcd_comp_succ_eq_0
    Statement: Eq.{1} Nat (Nat.gcd (Nat.succ Nat.zero)) (Nat.gcd Nat.zero)
  - gcd_comp_succ_eq_1
    Statement: Eq.{1} Nat (Nat.gcd (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - gcd_comp_succ_eq_2
    Statement: Eq.{1} Nat (Nat.gcd (Nat.succ Nat.zero)) Nat.zero
  - gcd_comp_succ_eq_3
    Statement: Eq.{1} Nat (Nat.gcd (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - gcd_comp_add1_eq_0
    Statement: Eq.{1} Nat (Nat.gcd ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.gcd Nat.zero)
  - gcd_comp_add1_eq_1
    Statement: Eq.{1} Nat (Nat.gcd ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)
  - gcd_comp_add1_eq_2
    Statement: Eq.{1} Nat (Nat.gcd ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) Nat.zero
  - gcd_comp_add1_eq_3
    Statement: Eq.{1} Nat (Nat.gcd ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.succ Nat.zero)
  - gcd_comp_add2_eq_0
    Statement: Eq.{1} Nat (Nat.gcd ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.gcd Nat.zero)
  - gcd_comp_add2_eq_1
    Statement: Eq.{1} Nat (Nat.gcd ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)
  - gcd_comp_add2_eq_2
    Statement: Eq.{1} Nat (Nat.gcd ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) Nat.zero
  - gcd_comp_add2_eq_3
    Statement: Eq.{1} Nat (Nat.gcd ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.succ Nat.zero)
  - lcm_comp_succ_eq_0
    Statement: Eq.{1} Nat (Nat.lcm (Nat.succ Nat.zero)) (Nat.lcm Nat.zero)
  - lcm_comp_succ_eq_1
    Statement: Eq.{1} Nat (Nat.lcm (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - lcm_comp_succ_eq_2
    Statement: Eq.{1} Nat (Nat.lcm (Nat.succ Nat.zero)) Nat.zero
  - lcm_comp_succ_eq_3
    Statement: Eq.{1} Nat (Nat.lcm (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - lcm_comp_add1_eq_0
    Statement: Eq.{1} Nat (Nat.lcm ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.lcm Nat.zero)
  - lcm_comp_add1_eq_1
    Statement: Eq.{1} Nat (Nat.lcm ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)
  - lcm_comp_add1_eq_2
    Statement: Eq.{1} Nat (Nat.lcm ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) Nat.zero
  - lcm_comp_add1_eq_3
    Statement: Eq.{1} Nat (Nat.lcm ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.succ Nat.zero)
  - lcm_comp_add2_eq_0
    Statement: Eq.{1} Nat (Nat.lcm ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.lcm Nat.zero)
  - lcm_comp_add2_eq_1
    Statement: Eq.{1} Nat (Nat.lcm ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)
  - lcm_comp_add2_eq_2
    Statement: Eq.{1} Nat (Nat.lcm ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) Nat.zero
  - lcm_comp_add2_eq_3
    Statement: Eq.{1} Nat (Nat.lcm ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.succ Nat.zero)
  - succ_comp_add1_eq_0
    Statement: Eq.{1} Nat (Nat.succ ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.succ Nat.zero)
  - succ_comp_add1_eq_1
    Statement: Eq.{1} Nat (Nat.succ ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)
  - succ_comp_add1_eq_2
    Statement: Eq.{1} Nat (Nat.succ ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) Nat.zero
  - succ_comp_add1_eq_3
    Statement: Eq.{1} Nat (Nat.succ ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.succ Nat.zero)
  - succ_comp_add2_eq_0
    Statement: Eq.{1} Nat (Nat.succ ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.succ Nat.zero)
  - succ_comp_add2_eq_1
    Statement: Eq.{1} Nat (Nat.succ ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)
  - succ_comp_add2_eq_2
    Statement: Eq.{1} Nat (Nat.succ ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) Nat.zero
  - succ_comp_add2_eq_3
    Statement: Eq.{1} Nat (Nat.succ ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.succ Nat.zero)
  - add1_comp_succ_eq_0
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) (Nat.succ Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)
  - add1_comp_succ_eq_1
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - add1_comp_succ_eq_2
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) (Nat.succ Nat.zero)) Nat.zero
  - add1_comp_succ_eq_3
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - add1_comp_add2_eq_0
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)
  - add1_comp_add2_eq_1
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)
  - add1_comp_add2_eq_2
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) Nat.zero
  - add1_comp_add2_eq_3
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.succ Nat.zero)
  - add2_comp_succ_eq_0
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) (Nat.succ Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)
  - add2_comp_succ_eq_1
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - add2_comp_succ_eq_2
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) (Nat.succ Nat.zero)) Nat.zero
  - add2_comp_succ_eq_3
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - add2_comp_add1_eq_0
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)
  - add2_comp_add1_eq_1
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)
  - add2_comp_add1_eq_2
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) Nat.zero
  - add2_comp_add1_eq_3
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.succ Nat.zero)
  - succ_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat (Nat.succ Nat.zero) (Nat.succ (Nat.succ Nat.zero))
  - add1_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) (Nat.succ Nat.zero))
  - add2_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) (Nat.succ Nat.zero))
  - succ_compose_add1_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 1 x)) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 1 x)) (Nat.succ Nat.zero))
  - cross_apply_zero_add_zero_to_zero
    Statement: True
  - cross_apply_zero_add_zero_to_succ
    Statement: True
  - cross_apply_zero_add_zero_to_one
    Statement: True
  - cross_apply_zero_add_zero_to_two
    Statement: True
  - cross_apply_zero_add_zero_to_add
    Statement: True
  - cross_apply_one_add_one_eq_two_to_zero
    Statement: True
  - cross_apply_one_add_one_eq_two_to_succ
    Statement: True
  - cross_apply_one_add_one_eq_two_to_one
    Statement: True
  - cross_apply_one_add_one_eq_two_to_two
    Statement: True
  - cross_apply_one_add_one_eq_two_to_add
    Statement: True
  - cross_apply_two_add_one_eq_three_to_zero
    Statement: True
  - cross_apply_two_add_one_eq_three_to_succ
    Statement: True
  - cross_apply_two_add_one_eq_three_to_one
    Statement: True
  - cross_apply_two_add_one_eq_three_to_two
    Statement: True
  - cross_apply_two_add_one_eq_three_to_add
    Statement: True
  - extension_zero_add_zero
    Statement: True
  - extension_one_add_one_eq_two
    Statement: True
  - extension_two_add_one_eq_three
    Statement: True
  - lemma_for_cross_apply_zero_add_zero_to_zero
    Statement: True
  - inverse_cross_apply_zero_add_zero_to_zero
    Statement: True
  - lemma_for_cross_apply_zero_add_zero_to_succ
    Statement: True
  - inverse_cross_apply_zero_add_zero_to_succ
    Statement: True
  - lemma_for_cross_apply_zero_add_zero_to_one
    Statement: True
  - inverse_cross_apply_zero_add_zero_to_one
    Statement: True
  - lemma_for_cross_apply_zero_add_zero_to_two
    Statement: True
  - inverse_cross_apply_zero_add_zero_to_two
    Statement: True
  - lemma_for_cross_apply_zero_add_zero_to_add
    Statement: True
  - inverse_cross_apply_zero_add_zero_to_add
    Statement: True
  - succ_compose_add2_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 2 x)) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 2 x)) (Nat.succ Nat.zero))
  - add1_compose_succ_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 1 x)) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 1 x)) (Nat.succ Nat.zero))
  - add1_compose_add2_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add 1 (Nat.add 2 x)) Nat.zero) ((fun (x : Nat) => Nat.add 1 (Nat.add 2 x)) (Nat.succ Nat.zero))
  - add2_compose_succ_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 2 x)) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 2 x)) (Nat.succ Nat.zero))
  - add2_compose_add1_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add 2 (Nat.add 1 x)) Nat.zero) ((fun (x : Nat) => Nat.add 2 (Nat.add 1 x)) (Nat.succ Nat.zero))
  - succ_compose_succ_compose_add1_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 1 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 1 x))) (Nat.succ Nat.zero))
  - succ_compose_succ_compose_add2_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 2 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 2 x))) (Nat.succ Nat.zero))
  - succ_compose_add1_compose_succ_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 1 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 1 x))) (Nat.succ Nat.zero))
  - succ_compose_add1_compose_add2_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 2 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 2 x))) (Nat.succ Nat.zero))
  - succ_compose_add2_compose_succ_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 2 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 2 x))) (Nat.succ Nat.zero))
  - succ_compose_add2_compose_add1_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 2 (Nat.add 1 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 2 (Nat.add 1 x))) (Nat.succ Nat.zero))
  - add1_compose_succ_compose_add1_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 1 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 1 x))) (Nat.succ Nat.zero))
  - add1_compose_succ_compose_add2_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 2 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 2 x))) (Nat.succ Nat.zero))
  - add1_compose_add1_compose_succ_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 1 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 1 x))) (Nat.succ Nat.zero))
  - add1_compose_add1_compose_add2_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add 1 (Nat.add 1 (Nat.add 2 x))) Nat.zero) ((fun (x : Nat) => Nat.add 1 (Nat.add 1 (Nat.add 2 x))) (Nat.succ Nat.zero))
  - add1_compose_add2_compose_succ_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 2 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 2 x))) (Nat.succ Nat.zero))
  - add1_compose_add2_compose_add1_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add 1 (Nat.add 2 (Nat.add 1 x))) Nat.zero) ((fun (x : Nat) => Nat.add 1 (Nat.add 2 (Nat.add 1 x))) (Nat.succ Nat.zero))
  - add2_compose_succ_compose_add1_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 2 (Nat.add 1 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 2 (Nat.add 1 x))) (Nat.succ Nat.zero))
  - add2_compose_succ_compose_add2_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 2 (Nat.add 2 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 2 (Nat.add 2 x))) (Nat.succ Nat.zero))
  - add2_compose_add1_compose_succ_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 2 (Nat.add 1 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 2 (Nat.add 1 x))) (Nat.succ Nat.zero))
  - add2_compose_add1_compose_add2_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add 2 (Nat.add 1 (Nat.add 2 x))) Nat.zero) ((fun (x : Nat) => Nat.add 2 (Nat.add 1 (Nat.add 2 x))) (Nat.succ Nat.zero))
  - add2_compose_add2_compose_succ_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 2 (Nat.add 2 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 2 (Nat.add 2 x))) (Nat.succ Nat.zero))
  - add2_compose_add2_compose_add1_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add 2 (Nat.add 2 (Nat.add 1 x))) Nat.zero) ((fun (x : Nat) => Nat.add 2 (Nat.add 2 (Nat.add 1 x))) (Nat.succ Nat.zero))
  - succ_compose_add1_compose_succ_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 1 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 1 x))) (Nat.succ Nat.zero))
  - succ_compose_add1_compose_add1_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 1 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 1 x))) (Nat.succ Nat.zero))
  - succ_compose_add1_compose_add2_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 2 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 2 x))) (Nat.succ Nat.zero))
  - succ_compose_add1_compose_succ_compose_add2_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 1 (Nat.add 2 x)))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 1 (Nat.add 2 x)))) (Nat.succ Nat.zero))
  - succ_compose_add1_compose_add1_compose_succ_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 1 (Nat.add 1 x)))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 1 (Nat.add 1 x)))) (Nat.succ Nat.zero))
  - succ_compose_add1_compose_add1_compose_add2_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 1 (Nat.add 2 x)))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 1 (Nat.add 2 x)))) (Nat.succ Nat.zero))
  - succ_compose_add1_compose_add2_compose_succ_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 1 (Nat.add 2 x)))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 1 (Nat.add 2 x)))) (Nat.succ Nat.zero))
  - succ_compose_add1_compose_add2_compose_add1_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 2 (Nat.add 1 x)))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 2 (Nat.add 1 x)))) (Nat.succ Nat.zero))
  - succ_compose_add2_compose_succ_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 2 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 2 x))) (Nat.succ Nat.zero))
  - succ_compose_add2_compose_add1_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 2 (Nat.add 1 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 2 (Nat.add 1 x))) (Nat.succ Nat.zero))
  - succ_compose_add2_compose_add2_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 2 (Nat.add 2 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 2 (Nat.add 2 x))) (Nat.succ Nat.zero))
  - succ_compose_add2_compose_succ_compose_add1_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 2 (Nat.add 1 x)))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 2 (Nat.add 1 x)))) (Nat.succ Nat.zero))
  - succ_compose_add2_compose_add1_compose_succ_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 2 (Nat.add 1 x)))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 2 (Nat.add 1 x)))) (Nat.succ Nat.zero))
  - succ_compose_add2_compose_add1_compose_add2_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 2 (Nat.add 1 (Nat.add 2 x)))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 2 (Nat.add 1 (Nat.add 2 x)))) (Nat.succ Nat.zero))
  - succ_compose_add2_compose_add2_compose_succ_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 2 (Nat.add 2 x)))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 2 (Nat.add 2 x)))) (Nat.succ Nat.zero))
  - succ_compose_add2_compose_add2_compose_add1_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 2 (Nat.add 2 (Nat.add 1 x)))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 2 (Nat.add 2 (Nat.add 1 x)))) (Nat.succ Nat.zero))
  - add1_compose_succ_compose_succ_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 1 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 1 x))) (Nat.succ Nat.zero))
  - add1_compose_succ_compose_add1_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 1 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 1 x))) (Nat.succ Nat.zero))
  - add1_compose_succ_compose_add2_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 2 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 2 x))) (Nat.succ Nat.zero))
  - add1_compose_succ_compose_succ_compose_add1_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 1 (Nat.add 1 x)))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 1 (Nat.add 1 x)))) (Nat.succ Nat.zero))
  - add1_compose_succ_compose_succ_compose_add2_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 1 (Nat.add 2 x)))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 1 (Nat.add 2 x)))) (Nat.succ Nat.zero))
  - add1_compose_succ_compose_add1_compose_add2_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 1 (Nat.add 2 x)))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 1 (Nat.add 2 x)))) (Nat.succ Nat.zero))
  - add1_compose_succ_compose_add2_compose_succ_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 1 (Nat.add 2 x)))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 1 (Nat.add 2 x)))) (Nat.succ Nat.zero))
  - add1_compose_succ_compose_add2_compose_add1_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 2 (Nat.add 1 x)))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 2 (Nat.add 1 x)))) (Nat.succ Nat.zero))
  - add1_compose_add2_compose_succ_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 2 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 2 x))) (Nat.succ Nat.zero))
  - add1_compose_add2_compose_add1_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add 1 (Nat.add 2 (Nat.add 1 x))) Nat.zero) ((fun (x : Nat) => Nat.add 1 (Nat.add 2 (Nat.add 1 x))) (Nat.succ Nat.zero))
  - add1_compose_add2_compose_add2_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add 1 (Nat.add 2 (Nat.add 2 x))) Nat.zero) ((fun (x : Nat) => Nat.add 1 (Nat.add 2 (Nat.add 2 x))) (Nat.succ Nat.zero))
  - cross_apply_one_add_one_eq_two_on_succ_applied_to_nat_1_to_zero
    Statement: True
  - cross_apply_one_add_one_eq_two_on_succ_applied_to_nat_1_to_succ
    Statement: True
  - cross_apply_one_add_one_eq_two_on_succ_applied_to_nat_1_to_one
    Statement: True
  - cross_apply_one_add_one_eq_two_on_succ_applied_to_nat_1_to_two
    Statement: True
  - cross_apply_one_add_one_eq_two_on_succ_applied_to_nat_1_to_add
    Statement: True
  - cross_apply_one_add_one_eq_two_on_add1_applied_to_nat_1_to_zero
    Statement: True
  - cross_apply_one_add_one_eq_two_on_add1_applied_to_nat_1_to_succ
    Statement: True
  - cross_apply_one_add_one_eq_two_on_add1_applied_to_nat_1_to_one
    Statement: True
  - cross_apply_one_add_one_eq_two_on_add1_applied_to_nat_1_to_two
    Statement: True
  - cross_apply_one_add_one_eq_two_on_add1_applied_to_nat_1_to_add
    Statement: True
All Theorems (252):
  - add_assoc
    Statement: forall (n : Nat) (m : Nat) (k : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n m) k) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m k))
  - add_comm
    Statement: forall (n : Nat) (m : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n m) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m n)
  - add_zero
    Statement: forall (n : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) n
  - zero_add
    Statement: forall (n : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) n) n
  - mul_assoc
    Statement: forall (n : Nat) (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n m) k) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m k))
  - mul_comm
    Statement: forall (n : Nat) (m : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n m) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m n)
  - mul_one
    Statement: forall (n : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) n
  - one_mul
    Statement: forall (n : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) n) n
  - mul_zero
    Statement: forall (n : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - zero_mul
    Statement: forall (n : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) n) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - left_distrib
    Statement: forall (n : Nat) (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m k)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n m) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n k))
  - right_distrib
    Statement: forall (n : Nat) (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n m) k) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n k) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m k))
  - dvd_refl
    Statement: forall (a : Nat), Dvd.dvd.{0} Nat Nat.instDvd a a
  - dvd_trans
    Statement: forall {a : Nat} {b : Nat} {c : Nat}, (Dvd.dvd.{0} Nat Nat.instDvd a b) -> (Dvd.dvd.{0} Nat Nat.instDvd b c) -> (Dvd.dvd.{0} Nat Nat.instDvd a c)
  - dvd_add
    Statement: forall {a : Nat} {b : Nat} {c : Nat}, (Dvd.dvd.{0} Nat Nat.instDvd a b) -> (Dvd.dvd.{0} Nat Nat.instDvd a c) -> (Dvd.dvd.{0} Nat Nat.instDvd a (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) b c))
  - dvd_mul
    Statement: forall {k : Nat} {m : Nat} {n : Nat}, Iff (Dvd.dvd.{0} Nat Nat.instDvd k (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m n)) (Exists.{1} Nat (fun (k₁ : Nat) => Exists.{1} Nat (fun (k₂ : Nat) => And (Dvd.dvd.{0} Nat Nat.instDvd k₁ m) (And (Dvd.dvd.{0} Nat Nat.instDvd k₂ n) (Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) k₁ k₂) k)))))
  - gcd_comm
    Statement: forall (m : Nat) (n : Nat), Eq.{1} Nat (Nat.gcd m n) (Nat.gcd n m)
  - gcd_assoc
    Statement: forall (m : Nat) (n : Nat) (k : Nat), Eq.{1} Nat (Nat.gcd (Nat.gcd m n) k) (Nat.gcd m (Nat.gcd n k))
  - gcd_zero_left
    Statement: forall (y : Nat), Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} ([mdata borrowed:1 Nat]) 0 (instOfNatNat 0)) y) y
  - gcd_zero_right
    Statement: forall (n : Nat), Eq.{1} Nat (Nat.gcd n (OfNat.ofNat.{0} ([mdata borrowed:1 Nat]) 0 (instOfNatNat 0))) n
  - lcm_comm
    Statement: forall (m : Nat) (n : Nat), Eq.{1} Nat (Nat.lcm m n) (Nat.lcm n m)
  - lcm_assoc
    Statement: forall (m : Nat) (n : Nat) (k : Nat), Eq.{1} Nat (Nat.lcm (Nat.lcm m n) k) (Nat.lcm m (Nat.lcm n k))
  - prime_def
    Statement: forall {p : Nat}, Iff (Nat.Prime p) (And (LE.le.{0} Nat instLENat (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) p) (forall (m : Nat), (Dvd.dvd.{0} Nat Nat.instDvd m p) -> (Or (Eq.{1} Nat m (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (Eq.{1} Nat m p))))
  - prime_two
    Statement: Nat.Prime (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - prime_three
    Statement: Nat.Prime (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - prime_five
    Statement: Nat.Prime (OfNat.ofNat.{0} Nat 5 (instOfNatNat 5))
  - prime_seven
    Statement: Nat.Prime (OfNat.ofNat.{0} Nat 7 (instOfNatNat 7))
  - mod_mod
    Statement: forall (a : Nat) (n : Nat), Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) a n) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) a n)
  - add_mod
    Statement: forall (a : Nat) (b : Nat) (n : Nat), Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) a b) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) a n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) b n)) n)
  - mul_mod
    Statement: forall (a : Nat) (b : Nat) (n : Nat), Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) a b) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) a n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) b n)) n)
  - mod_two_eq_zero_or_one
    Statement: forall (n : Nat), Or (Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) n (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) n (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))
  - fib_zero
    Statement: Eq.{1} Nat (Nat.fib (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - fib_one
    Statement: Eq.{1} Nat (Nat.fib (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - fib_add
    Statement: forall (m : Nat) (n : Nat), Eq.{1} Nat (Nat.fib (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m n) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (Nat.fib m) (Nat.fib n)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (Nat.fib (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Nat.fib (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))))
  - zero_eq_zero
    Statement: Eq.{1} Nat Nat.zero Nat.zero
  - add_comm
    Statement: forall (n : Nat) (m : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n m) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m n)
  - zero_add_zero
    Statement: Eq.{1} Nat (Nat.add Nat.zero Nat.zero) Nat.zero
  - one_add_one_eq_two
    Statement: Eq.{1} Nat (Nat.add (Nat.succ Nat.zero) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ Nat.zero))
  - two_add_one_eq_three
    Statement: Eq.{1} Nat (Nat.add (Nat.succ (Nat.succ Nat.zero)) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ (Nat.succ Nat.zero)))
  - add_assoc_spec_nat_0
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) m) k) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m k))
  - add_assoc_spec_nat_1
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) m) k) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m k))
  - add_assoc_spec_nat_2
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) m) k) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m k))
  - add_assoc_spec_nat_3
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) m) k) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m k))
  - add_assoc_spec_nat_4
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) m) k) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m k))
  - add_comm_spec_nat_0
    Statement: forall (m : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) m) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)))
  - add_comm_spec_nat_1
    Statement: forall (m : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) m) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))
  - add_comm_spec_nat_2
    Statement: forall (m : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) m) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)))
  - add_comm_spec_nat_3
    Statement: forall (m : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) m) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)))
  - add_comm_spec_nat_4
    Statement: forall (m : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) m) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)))
  - add_zero_spec_nat_0
    Statement: Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - add_zero_spec_nat_1
    Statement: Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - add_zero_spec_nat_2
    Statement: Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - add_zero_spec_nat_3
    Statement: Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - add_zero_spec_nat_4
    Statement: Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - zero_add_spec_nat_0
    Statement: Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - zero_add_spec_nat_1
    Statement: Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - zero_add_spec_nat_2
    Statement: Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - zero_add_spec_nat_3
    Statement: Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - zero_add_spec_nat_4
    Statement: Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - mul_assoc_spec_nat_0
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) m) k) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m k))
  - mul_assoc_spec_nat_1
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) m) k) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m k))
  - mul_assoc_spec_nat_2
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) m) k) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m k))
  - mul_assoc_spec_nat_3
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) m) k) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m k))
  - mul_assoc_spec_nat_4
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) m) k) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m k))
  - mul_comm_spec_nat_0
    Statement: forall (m : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) m) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)))
  - mul_comm_spec_nat_1
    Statement: forall (m : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) m) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))
  - mul_comm_spec_nat_2
    Statement: forall (m : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) m) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)))
  - mul_comm_spec_nat_3
    Statement: forall (m : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) m) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)))
  - mul_comm_spec_nat_4
    Statement: forall (m : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) m) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)))
  - mul_one_spec_nat_0
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - mul_one_spec_nat_1
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - mul_one_spec_nat_2
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - mul_one_spec_nat_3
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - mul_one_spec_nat_4
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - one_mul_spec_nat_0
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - one_mul_spec_nat_1
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - one_mul_spec_nat_2
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - one_mul_spec_nat_3
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - one_mul_spec_nat_4
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - mul_zero_spec_nat_0
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - mul_zero_spec_nat_1
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - mul_zero_spec_nat_2
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - mul_zero_spec_nat_3
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - mul_zero_spec_nat_4
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - zero_mul_spec_nat_0
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - zero_mul_spec_nat_1
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - zero_mul_spec_nat_2
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - zero_mul_spec_nat_3
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - zero_mul_spec_nat_4
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - fib_zero_on_nat_0
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - fib_zero_on_zero
    Statement: Eq.{1} Nat Nat.zero (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - fib_one_on_nat_1
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - fib_one_on_one
    Statement: Eq.{1} Nat (Nat.succ Nat.zero) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - zero_eq_zero_on_nat_0
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) Nat.zero
  - zero_add_zero_on_nat_0
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) Nat.zero
  - one_add_one_eq_two_on_nat_2
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (Nat.succ (Nat.succ Nat.zero))
  - one_add_one_eq_two_on_prime_2
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (Nat.succ (Nat.succ Nat.zero))
  - one_add_one_eq_two_on_two
    Statement: Eq.{1} Nat (Nat.succ (Nat.succ Nat.zero)) (Nat.succ (Nat.succ Nat.zero))
  - two_add_one_eq_three_on_nat_3
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (Nat.succ (Nat.succ (Nat.succ Nat.zero)))
  - two_add_one_eq_three_on_prime_3
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (Nat.succ (Nat.succ (Nat.succ Nat.zero)))
  - intermediate_for_zero_add_zero_via_add
    Statement: Eq.{1} Nat (Nat.add Nat.zero Nat.zero) Nat.zero
  - intermediate_for_zero_add_zero_via_zero
    Statement: Eq.{1} Nat (Nat.add Nat.zero Nat.zero) Nat.zero
  - dual_of_zero_add_zero
    Statement: Eq.{1} Nat (Nat.add Nat.zero Nat.zero) Nat.zero
  - intermediate_for_one_add_one_eq_two_via_add
    Statement: Eq.{1} Nat (Nat.add (Nat.succ Nat.zero) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ Nat.zero))
  - intermediate_for_one_add_one_eq_two_via_one
    Statement: Eq.{1} Nat (Nat.add (Nat.succ Nat.zero) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ Nat.zero))
  - intermediate_for_one_add_one_eq_two_via_two
    Statement: Eq.{1} Nat (Nat.add (Nat.succ Nat.zero) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ Nat.zero))
  - dual_of_one_add_one_eq_two
    Statement: Eq.{1} Nat (Nat.add (Nat.succ Nat.zero) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ Nat.zero))
  - intermediate_for_two_add_one_eq_three_via_add
    Statement: Eq.{1} Nat (Nat.add (Nat.succ (Nat.succ Nat.zero)) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ (Nat.succ Nat.zero)))
  - intermediate_for_two_add_one_eq_three_via_two
    Statement: Eq.{1} Nat (Nat.add (Nat.succ (Nat.succ Nat.zero)) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ (Nat.succ Nat.zero)))
  - intermediate_for_two_add_one_eq_three_via_one
    Statement: Eq.{1} Nat (Nat.add (Nat.succ (Nat.succ Nat.zero)) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ (Nat.succ Nat.zero)))
  - intermediate_for_two_add_one_eq_three_via_succ
    Statement: Eq.{1} Nat (Nat.add (Nat.succ (Nat.succ Nat.zero)) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ (Nat.succ Nat.zero)))
  - dual_of_two_add_one_eq_three
    Statement: Eq.{1} Nat (Nat.add (Nat.succ (Nat.succ Nat.zero)) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ (Nat.succ Nat.zero)))
  - left_distrib_spec_nat_0
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m k)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) m) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) k))
  - left_distrib_spec_nat_1
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m k)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) m) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) k))
  - left_distrib_spec_nat_2
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m k)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) m) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) k))
  - left_distrib_spec_nat_3
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m k)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) m) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) k))
  - left_distrib_spec_nat_4
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m k)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) m) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) k))
  - right_distrib_spec_nat_0
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) m) k) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) k) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m k))
  - right_distrib_spec_nat_1
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) m) k) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) k) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m k))
  - right_distrib_spec_nat_2
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) m) k) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) k) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m k))
  - right_distrib_spec_nat_3
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) m) k) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) k) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m k))
  - right_distrib_spec_nat_4
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) m) k) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) k) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m k))
  - dvd_refl_spec_nat_0
    Statement: Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - dvd_refl_spec_nat_1
    Statement: Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - dvd_refl_spec_nat_2
    Statement: Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - dvd_refl_spec_nat_3
    Statement: Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - dvd_refl_spec_nat_4
    Statement: Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - dvd_trans_spec_nat_0
    Statement: forall {b : Nat} {c : Nat}, (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) b) -> (Dvd.dvd.{0} Nat Nat.instDvd b c) -> (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) c)
  - dvd_trans_spec_nat_1
    Statement: forall {b : Nat} {c : Nat}, (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) b) -> (Dvd.dvd.{0} Nat Nat.instDvd b c) -> (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) c)
  - dvd_trans_spec_nat_2
    Statement: forall {b : Nat} {c : Nat}, (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) b) -> (Dvd.dvd.{0} Nat Nat.instDvd b c) -> (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) c)
  - dvd_trans_spec_nat_3
    Statement: forall {b : Nat} {c : Nat}, (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) b) -> (Dvd.dvd.{0} Nat Nat.instDvd b c) -> (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) c)
  - dvd_trans_spec_nat_4
    Statement: forall {b : Nat} {c : Nat}, (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) b) -> (Dvd.dvd.{0} Nat Nat.instDvd b c) -> (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) c)
  - dvd_add_spec_nat_0
    Statement: forall {b : Nat} {c : Nat}, (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) b) -> (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) c) -> (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) b c))
  - dvd_add_spec_nat_1
    Statement: forall {b : Nat} {c : Nat}, (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) b) -> (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) c) -> (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) b c))
  - dvd_add_spec_nat_2
    Statement: forall {b : Nat} {c : Nat}, (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) b) -> (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) c) -> (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) b c))
  - dvd_add_spec_nat_3
    Statement: forall {b : Nat} {c : Nat}, (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) b) -> (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) c) -> (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) b c))
  - dvd_add_spec_nat_4
    Statement: forall {b : Nat} {c : Nat}, (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) b) -> (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) c) -> (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) b c))
  - dvd_mul_spec_nat_0
    Statement: forall {m : Nat} {n : Nat}, Iff (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m n)) (Exists.{1} Nat (fun (k₁ : Nat) => Exists.{1} Nat (fun (k₂ : Nat) => And (Dvd.dvd.{0} Nat Nat.instDvd k₁ m) (And (Dvd.dvd.{0} Nat Nat.instDvd k₂ n) (Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) k₁ k₂) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)))))))
  - dvd_mul_spec_nat_1
    Statement: forall {m : Nat} {n : Nat}, Iff (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m n)) (Exists.{1} Nat (fun (k₁ : Nat) => Exists.{1} Nat (fun (k₂ : Nat) => And (Dvd.dvd.{0} Nat Nat.instDvd k₁ m) (And (Dvd.dvd.{0} Nat Nat.instDvd k₂ n) (Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) k₁ k₂) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))))))
  - dvd_mul_spec_nat_2
    Statement: forall {m : Nat} {n : Nat}, Iff (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m n)) (Exists.{1} Nat (fun (k₁ : Nat) => Exists.{1} Nat (fun (k₂ : Nat) => And (Dvd.dvd.{0} Nat Nat.instDvd k₁ m) (And (Dvd.dvd.{0} Nat Nat.instDvd k₂ n) (Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) k₁ k₂) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)))))))
  - dvd_mul_spec_nat_3
    Statement: forall {m : Nat} {n : Nat}, Iff (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m n)) (Exists.{1} Nat (fun (k₁ : Nat) => Exists.{1} Nat (fun (k₂ : Nat) => And (Dvd.dvd.{0} Nat Nat.instDvd k₁ m) (And (Dvd.dvd.{0} Nat Nat.instDvd k₂ n) (Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) k₁ k₂) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)))))))
  - dvd_mul_spec_nat_4
    Statement: forall {m : Nat} {n : Nat}, Iff (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m n)) (Exists.{1} Nat (fun (k₁ : Nat) => Exists.{1} Nat (fun (k₂ : Nat) => And (Dvd.dvd.{0} Nat Nat.instDvd k₁ m) (And (Dvd.dvd.{0} Nat Nat.instDvd k₂ n) (Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) k₁ k₂) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)))))))
  - gcd_comm_spec_nat_0
    Statement: forall (n : Nat), Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) n) (Nat.gcd n (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)))
  - gcd_comm_spec_nat_1
    Statement: forall (n : Nat), Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) n) (Nat.gcd n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))
  - gcd_comm_spec_nat_2
    Statement: forall (n : Nat), Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) n) (Nat.gcd n (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)))
  - gcd_comm_spec_nat_3
    Statement: forall (n : Nat), Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) n) (Nat.gcd n (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)))
  - gcd_comm_spec_nat_4
    Statement: forall (n : Nat), Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) n) (Nat.gcd n (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)))
  - gcd_assoc_spec_nat_0
    Statement: forall (n : Nat) (k : Nat), Eq.{1} Nat (Nat.gcd (Nat.gcd (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) n) k) (Nat.gcd (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (Nat.gcd n k))
  - gcd_assoc_spec_nat_1
    Statement: forall (n : Nat) (k : Nat), Eq.{1} Nat (Nat.gcd (Nat.gcd (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) n) k) (Nat.gcd (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (Nat.gcd n k))
  - gcd_assoc_spec_nat_2
    Statement: forall (n : Nat) (k : Nat), Eq.{1} Nat (Nat.gcd (Nat.gcd (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) n) k) (Nat.gcd (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (Nat.gcd n k))
  - gcd_assoc_spec_nat_3
    Statement: forall (n : Nat) (k : Nat), Eq.{1} Nat (Nat.gcd (Nat.gcd (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) n) k) (Nat.gcd (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (Nat.gcd n k))
  - gcd_assoc_spec_nat_4
    Statement: forall (n : Nat) (k : Nat), Eq.{1} Nat (Nat.gcd (Nat.gcd (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) n) k) (Nat.gcd (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (Nat.gcd n k))
  - gcd_zero_left_spec_nat_0
    Statement: Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} ([mdata borrowed:1 Nat]) 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - gcd_zero_left_spec_nat_1
    Statement: Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} ([mdata borrowed:1 Nat]) 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - gcd_zero_left_spec_nat_2
    Statement: Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} ([mdata borrowed:1 Nat]) 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - gcd_zero_left_spec_nat_3
    Statement: Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} ([mdata borrowed:1 Nat]) 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - gcd_zero_left_spec_nat_4
    Statement: Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} ([mdata borrowed:1 Nat]) 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - gcd_zero_right_spec_nat_0
    Statement: Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} ([mdata borrowed:1 Nat]) 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - gcd_zero_right_spec_nat_1
    Statement: Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} ([mdata borrowed:1 Nat]) 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - gcd_zero_right_spec_nat_2
    Statement: Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} ([mdata borrowed:1 Nat]) 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - gcd_zero_right_spec_nat_3
    Statement: Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (OfNat.ofNat.{0} ([mdata borrowed:1 Nat]) 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - gcd_zero_right_spec_nat_4
    Statement: Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (OfNat.ofNat.{0} ([mdata borrowed:1 Nat]) 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - fib_one_on_succ_applied_to_nat_0
    Statement: Eq.{1} Nat 1 (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - fib_one_on_add1_applied_to_nat_0
    Statement: Eq.{1} Nat 1 (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - one_add_one_eq_two_on_succ_applied_to_nat_1
    Statement: Eq.{1} Nat 2 (Nat.succ (Nat.succ Nat.zero))
  - one_add_one_eq_two_on_add1_applied_to_nat_1
    Statement: Eq.{1} Nat 2 (Nat.succ (Nat.succ Nat.zero))
  - one_add_one_eq_two_on_add2_applied_to_nat_0
    Statement: Eq.{1} Nat 2 (Nat.succ (Nat.succ Nat.zero))
  - two_add_one_eq_three_on_num_3
    Statement: Eq.{1} Nat (Nat.succ (Nat.succ (Nat.succ Nat.zero))) (Nat.succ (Nat.succ (Nat.succ Nat.zero)))
  - two_add_one_eq_three_on_succ_applied_to_nat_2
    Statement: Eq.{1} Nat 3 (Nat.succ (Nat.succ (Nat.succ Nat.zero)))
  - two_add_one_eq_three_on_add1_applied_to_nat_2
    Statement: Eq.{1} Nat 3 (Nat.succ (Nat.succ (Nat.succ Nat.zero)))
  - two_add_one_eq_three_on_add2_applied_to_nat_1
    Statement: Eq.{1} Nat 3 (Nat.succ (Nat.succ (Nat.succ Nat.zero)))
  - add_zero_spec_nat_1_on_succ_applied_to_nat_0
    Statement: Eq.{1} Nat 1 (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - add_zero_spec_nat_1_on_add1_applied_to_nat_0
    Statement: Eq.{1} Nat 1 (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - add_zero_spec_nat_2_on_nat_2
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - add_zero_spec_nat_2_on_prime_2
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - add_zero_spec_nat_2_on_two
    Statement: Eq.{1} Nat (Nat.succ (Nat.succ Nat.zero)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - add_zero_spec_nat_2_on_succ_applied_to_nat_1
    Statement: Eq.{1} Nat 2 (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - add_zero_spec_nat_2_on_add1_applied_to_nat_1
    Statement: Eq.{1} Nat 2 (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - add_zero_spec_nat_2_on_add2_applied_to_nat_0
    Statement: Eq.{1} Nat 2 (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - add_zero_spec_nat_3_on_nat_3
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - add_zero_spec_nat_3_on_prime_3
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - add_zero_spec_nat_3_on_num_3
    Statement: Eq.{1} Nat (Nat.succ (Nat.succ (Nat.succ Nat.zero))) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - add_zero_spec_nat_3_on_succ_applied_to_nat_2
    Statement: Eq.{1} Nat 3 (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - add_zero_spec_nat_3_on_add1_applied_to_nat_2
    Statement: Eq.{1} Nat 3 (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - add_zero_spec_nat_3_on_add2_applied_to_nat_1
    Statement: Eq.{1} Nat 3 (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - add_zero_spec_nat_4_on_nat_4
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - add_zero_spec_nat_4_on_succ_applied_to_nat_3
    Statement: Eq.{1} Nat 4 (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - add_zero_spec_nat_4_on_add1_applied_to_nat_3
    Statement: Eq.{1} Nat 4 (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - add_zero_spec_nat_4_on_add2_applied_to_nat_2
    Statement: Eq.{1} Nat 4 (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - zero_add_spec_nat_1_on_succ_applied_to_nat_0
    Statement: Eq.{1} Nat 1 (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - zero_add_spec_nat_1_on_add1_applied_to_nat_0
    Statement: Eq.{1} Nat 1 (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - zero_add_spec_nat_2_on_nat_2
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - zero_add_spec_nat_2_on_prime_2
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - zero_add_spec_nat_2_on_two
    Statement: Eq.{1} Nat (Nat.succ (Nat.succ Nat.zero)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - zero_add_spec_nat_2_on_succ_applied_to_nat_1
    Statement: Eq.{1} Nat 2 (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - zero_add_spec_nat_2_on_add1_applied_to_nat_1
    Statement: Eq.{1} Nat 2 (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - zero_add_spec_nat_2_on_add2_applied_to_nat_0
    Statement: Eq.{1} Nat 2 (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - zero_add_spec_nat_3_on_nat_3
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - zero_add_spec_nat_3_on_prime_3
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - zero_add_spec_nat_3_on_num_3
    Statement: Eq.{1} Nat (Nat.succ (Nat.succ (Nat.succ Nat.zero))) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - zero_add_spec_nat_3_on_succ_applied_to_nat_2
    Statement: Eq.{1} Nat 3 (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - zero_add_spec_nat_3_on_add1_applied_to_nat_2
    Statement: Eq.{1} Nat 3 (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - zero_add_spec_nat_3_on_add2_applied_to_nat_1
    Statement: Eq.{1} Nat 3 (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - zero_add_spec_nat_4_on_nat_4
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - zero_add_spec_nat_4_on_succ_applied_to_nat_3
    Statement: Eq.{1} Nat 4 (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - zero_add_spec_nat_4_on_add1_applied_to_nat_3
    Statement: Eq.{1} Nat 4 (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - zero_add_spec_nat_4_on_add2_applied_to_nat_2
    Statement: Eq.{1} Nat 4 (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - mul_one_spec_nat_1_on_succ_applied_to_nat_0
    Statement: Eq.{1} Nat 1 (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - mul_one_spec_nat_1_on_add1_applied_to_nat_0
    Statement: Eq.{1} Nat 1 (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - mul_one_spec_nat_2_on_nat_2
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - mul_one_spec_nat_2_on_prime_2
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - mul_one_spec_nat_2_on_two
    Statement: Eq.{1} Nat (Nat.succ (Nat.succ Nat.zero)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - lcm_comm_spec_nat_0
    Statement: forall (n : Nat), Eq.{1} Nat (Nat.lcm (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) n) (Nat.lcm n (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)))
  - lcm_comm_spec_nat_1
    Statement: forall (n : Nat), Eq.{1} Nat (Nat.lcm (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) n) (Nat.lcm n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))
  - lcm_comm_spec_nat_2
    Statement: forall (n : Nat), Eq.{1} Nat (Nat.lcm (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) n) (Nat.lcm n (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)))
  - lcm_comm_spec_nat_3
    Statement: forall (n : Nat), Eq.{1} Nat (Nat.lcm (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) n) (Nat.lcm n (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)))
  - lcm_comm_spec_nat_4
    Statement: forall (n : Nat), Eq.{1} Nat (Nat.lcm (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) n) (Nat.lcm n (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)))
  - lcm_assoc_spec_nat_0
    Statement: forall (n : Nat) (k : Nat), Eq.{1} Nat (Nat.lcm (Nat.lcm (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) n) k) (Nat.lcm (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (Nat.lcm n k))
  - lcm_assoc_spec_nat_1
    Statement: forall (n : Nat) (k : Nat), Eq.{1} Nat (Nat.lcm (Nat.lcm (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) n) k) (Nat.lcm (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (Nat.lcm n k))
  - lcm_assoc_spec_nat_2
    Statement: forall (n : Nat) (k : Nat), Eq.{1} Nat (Nat.lcm (Nat.lcm (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) n) k) (Nat.lcm (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (Nat.lcm n k))
  - lcm_assoc_spec_nat_3
    Statement: forall (n : Nat) (k : Nat), Eq.{1} Nat (Nat.lcm (Nat.lcm (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) n) k) (Nat.lcm (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (Nat.lcm n k))
  - lcm_assoc_spec_nat_4
    Statement: forall (n : Nat) (k : Nat), Eq.{1} Nat (Nat.lcm (Nat.lcm (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) n) k) (Nat.lcm (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (Nat.lcm n k))
  - prime_def_spec_nat_0
    Statement: Iff (Nat.Prime (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (And (LE.le.{0} Nat instLENat (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (forall (m : Nat), (Dvd.dvd.{0} Nat Nat.instDvd m (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) -> (Or (Eq.{1} Nat m (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (Eq.{1} Nat m (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))))))
  - prime_def_spec_nat_1
    Statement: Iff (Nat.Prime (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (And (LE.le.{0} Nat instLENat (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (forall (m : Nat), (Dvd.dvd.{0} Nat Nat.instDvd m (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) -> (Or (Eq.{1} Nat m (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (Eq.{1} Nat m (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))))
  - prime_def_spec_nat_2
    Statement: Iff (Nat.Prime (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (And (LE.le.{0} Nat instLENat (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (forall (m : Nat), (Dvd.dvd.{0} Nat Nat.instDvd m (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) -> (Or (Eq.{1} Nat m (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (Eq.{1} Nat m (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))))))
  - prime_def_spec_nat_3
    Statement: Iff (Nat.Prime (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))) (And (LE.le.{0} Nat instLENat (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))) (forall (m : Nat), (Dvd.dvd.{0} Nat Nat.instDvd m (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))) -> (Or (Eq.{1} Nat m (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (Eq.{1} Nat m (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))))))
  - prime_def_spec_nat_4
    Statement: Iff (Nat.Prime (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))) (And (LE.le.{0} Nat instLENat (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))) (forall (m : Nat), (Dvd.dvd.{0} Nat Nat.instDvd m (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))) -> (Or (Eq.{1} Nat m (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (Eq.{1} Nat m (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))))))
  - mod_mod_spec_nat_0
    Statement: forall (n : Nat), Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) n) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) n)
  - mod_mod_spec_nat_1
    Statement: forall (n : Nat), Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) n) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) n)
  - mod_mod_spec_nat_2
    Statement: forall (n : Nat), Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) n) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) n)
  - mod_mod_spec_nat_3
    Statement: forall (n : Nat), Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) n) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) n)
  - mod_mod_spec_nat_4
    Statement: forall (n : Nat), Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) n) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) n)
  - add_mod_spec_nat_0
    Statement: forall (b : Nat) (n : Nat), Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) b) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) b n)) n)
  - add_mod_spec_nat_1
    Statement: forall (b : Nat) (n : Nat), Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) b) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) b n)) n)
  - add_mod_spec_nat_2
    Statement: forall (b : Nat) (n : Nat), Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) b) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) b n)) n)
  - add_mod_spec_nat_3
    Statement: forall (b : Nat) (n : Nat), Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) b) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) b n)) n)
  - add_mod_spec_nat_4
    Statement: forall (b : Nat) (n : Nat), Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) b) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) b n)) n)
  - mul_mod_spec_nat_0
    Statement: forall (b : Nat) (n : Nat), Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) b) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) b n)) n)
  - mul_mod_spec_nat_1
    Statement: forall (b : Nat) (n : Nat), Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) b) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) b n)) n)
  - mul_mod_spec_nat_2
    Statement: forall (b : Nat) (n : Nat), Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) b) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) b n)) n)
  - mul_mod_spec_nat_3
    Statement: forall (b : Nat) (n : Nat), Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) b) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) b n)) n)
  - mul_mod_spec_nat_4
    Statement: forall (b : Nat) (n : Nat), Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) b) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) b n)) n)
  - mod_two_eq_zero_or_one_spec_nat_0
    Statement: Or (Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))
  - mod_two_eq_zero_or_one_spec_nat_1
    Statement: Or (Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))
  - mod_two_eq_zero_or_one_spec_nat_2
    Statement: Or (Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))
  - mod_two_eq_zero_or_one_spec_nat_3
    Statement: Or (Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))
  - mod_two_eq_zero_or_one_spec_nat_4
    Statement: Or (Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))
  - fib_add_spec_nat_0
    Statement: forall (n : Nat), Eq.{1} Nat (Nat.fib (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) n) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (Nat.fib (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (Nat.fib n)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (Nat.fib (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Nat.fib (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))))
  - fib_add_spec_nat_1
    Statement: forall (n : Nat), Eq.{1} Nat (Nat.fib (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) n) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (Nat.fib (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (Nat.fib n)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (Nat.fib (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Nat.fib (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))))
  - fib_add_spec_nat_2
    Statement: forall (n : Nat), Eq.{1} Nat (Nat.fib (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) n) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (Nat.fib (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (Nat.fib n)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (Nat.fib (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Nat.fib (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))))
  - fib_add_spec_nat_3
    Statement: forall (n : Nat), Eq.{1} Nat (Nat.fib (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) n) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (Nat.fib (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))) (Nat.fib n)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (Nat.fib (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Nat.fib (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))))
  - fib_add_spec_nat_4
    Statement: forall (n : Nat), Eq.{1} Nat (Nat.fib (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) n) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (Nat.fib (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))) (Nat.fib n)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (Nat.fib (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Nat.fib (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))))

================================================================================
=== ITERATION 0 COMPLETE ===
Total Concepts: 133 (+0 new)
Patterns: 0
Conjectures: 0
Theorems: 39
Top Concepts:
  - pattern_importance (score: 1.000000)
  - add_assoc (score: 1.000000)
  - add_comm (score: 1.000000)
  - add_zero (score: 1.000000)
  - zero_add (score: 1.000000)
  - mul_assoc (score: 1.000000)
  - mul_comm (score: 1.000000)
  - mul_one (score: 1.000000)
  - one_mul (score: 1.000000)
  - mul_zero (score: 1.000000)
Generation Methods:
  seed: 9
All Theorems (39):
  - add_assoc
    Statement: forall (n : Nat) (m : Nat) (k : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n m) k) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m k))
  - add_comm
    Statement: forall (n : Nat) (m : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n m) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m n)
  - add_zero
    Statement: forall (n : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) n
  - zero_add
    Statement: forall (n : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) n) n
  - mul_assoc
    Statement: forall (n : Nat) (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n m) k) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m k))
  - mul_comm
    Statement: forall (n : Nat) (m : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n m) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m n)
  - mul_one
    Statement: forall (n : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) n
  - one_mul
    Statement: forall (n : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) n) n
  - mul_zero
    Statement: forall (n : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - zero_mul
    Statement: forall (n : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) n) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - left_distrib
    Statement: forall (n : Nat) (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m k)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n m) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n k))
  - right_distrib
    Statement: forall (n : Nat) (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n m) k) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n k) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m k))
  - dvd_refl
    Statement: forall (a : Nat), Dvd.dvd.{0} Nat Nat.instDvd a a
  - dvd_trans
    Statement: forall {a : Nat} {b : Nat} {c : Nat}, (Dvd.dvd.{0} Nat Nat.instDvd a b) -> (Dvd.dvd.{0} Nat Nat.instDvd b c) -> (Dvd.dvd.{0} Nat Nat.instDvd a c)
  - dvd_add
    Statement: forall {a : Nat} {b : Nat} {c : Nat}, (Dvd.dvd.{0} Nat Nat.instDvd a b) -> (Dvd.dvd.{0} Nat Nat.instDvd a c) -> (Dvd.dvd.{0} Nat Nat.instDvd a (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) b c))
  - dvd_mul
    Statement: forall {k : Nat} {m : Nat} {n : Nat}, Iff (Dvd.dvd.{0} Nat Nat.instDvd k (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m n)) (Exists.{1} Nat (fun (k₁ : Nat) => Exists.{1} Nat (fun (k₂ : Nat) => And (Dvd.dvd.{0} Nat Nat.instDvd k₁ m) (And (Dvd.dvd.{0} Nat Nat.instDvd k₂ n) (Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) k₁ k₂) k)))))
  - gcd_comm
    Statement: forall (m : Nat) (n : Nat), Eq.{1} Nat (Nat.gcd m n) (Nat.gcd n m)
  - gcd_assoc
    Statement: forall (m : Nat) (n : Nat) (k : Nat), Eq.{1} Nat (Nat.gcd (Nat.gcd m n) k) (Nat.gcd m (Nat.gcd n k))
  - gcd_zero_left
    Statement: forall (y : Nat), Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} ([mdata borrowed:1 Nat]) 0 (instOfNatNat 0)) y) y
  - gcd_zero_right
    Statement: forall (n : Nat), Eq.{1} Nat (Nat.gcd n (OfNat.ofNat.{0} ([mdata borrowed:1 Nat]) 0 (instOfNatNat 0))) n
  - lcm_comm
    Statement: forall (m : Nat) (n : Nat), Eq.{1} Nat (Nat.lcm m n) (Nat.lcm n m)
  - lcm_assoc
    Statement: forall (m : Nat) (n : Nat) (k : Nat), Eq.{1} Nat (Nat.lcm (Nat.lcm m n) k) (Nat.lcm m (Nat.lcm n k))
  - prime_def
    Statement: forall {p : Nat}, Iff (Nat.Prime p) (And (LE.le.{0} Nat instLENat (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) p) (forall (m : Nat), (Dvd.dvd.{0} Nat Nat.instDvd m p) -> (Or (Eq.{1} Nat m (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (Eq.{1} Nat m p))))
  - prime_two
    Statement: Nat.Prime (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - prime_three
    Statement: Nat.Prime (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - prime_five
    Statement: Nat.Prime (OfNat.ofNat.{0} Nat 5 (instOfNatNat 5))
  - prime_seven
    Statement: Nat.Prime (OfNat.ofNat.{0} Nat 7 (instOfNatNat 7))
  - mod_mod
    Statement: forall (a : Nat) (n : Nat), Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) a n) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) a n)
  - add_mod
    Statement: forall (a : Nat) (b : Nat) (n : Nat), Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) a b) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) a n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) b n)) n)
  - mul_mod
    Statement: forall (a : Nat) (b : Nat) (n : Nat), Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) a b) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) a n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) b n)) n)
  - mod_two_eq_zero_or_one
    Statement: forall (n : Nat), Or (Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) n (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) n (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))
  - fib_zero
    Statement: Eq.{1} Nat (Nat.fib (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - fib_one
    Statement: Eq.{1} Nat (Nat.fib (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - fib_add
    Statement: forall (m : Nat) (n : Nat), Eq.{1} Nat (Nat.fib (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m n) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (Nat.fib m) (Nat.fib n)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (Nat.fib (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Nat.fib (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))))
  - zero_eq_zero
    Statement: Eq.{1} Nat Nat.zero Nat.zero
  - add_comm
    Statement: forall (n : Nat) (m : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n m) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m n)
  - zero_add_zero
    Statement: Eq.{1} Nat (Nat.add Nat.zero Nat.zero) Nat.zero
  - one_add_one_eq_two
    Statement: Eq.{1} Nat (Nat.add (Nat.succ Nat.zero) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ Nat.zero))
  - two_add_one_eq_three
    Statement: Eq.{1} Nat (Nat.add (Nat.succ (Nat.succ Nat.zero)) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ (Nat.succ Nat.zero)))

================================================================================
=== ITERATION 1 COMPLETE ===
Total Concepts: 290 (+169 new)
Patterns: 4
Conjectures: 53
Theorems: 112
Top Concepts:
  - nat_48 (score: 1.000000)
  - add_assoc (score: 1.000000)
  - add_comm (score: 1.000000)
  - add_zero (score: 1.000000)
  - zero_add (score: 1.000000)
  - mul_assoc (score: 1.000000)
  - mul_comm (score: 1.000000)
  - mul_one (score: 1.000000)
  - one_mul (score: 1.000000)
  - mul_zero (score: 1.000000)
Generation Methods:
  seed: 9
  application: 20
  specialization: 50
  pattern_recognition: 1
  composition: 6
  lemma_application: 11
All Patterns (4):
  - natural_number_sequence: Sequence: 0, 1, 2, ... (natural numbers via successor)
  - variation_add_assoc: Variation pattern based on theorem add_assoc
  - variation_add_comm: Variation pattern based on theorem add_comm
  - variation_add_zero: Variation pattern based on theorem add_zero
All Conjectures (53):
  - function_lemma_for_zero_add_zero
    Statement: Eq.{1} Nat (Nat.add Nat.zero Nat.zero)
  - function_lemma_for_one_add_one_eq_two
    Statement: Eq.{1} Nat (Nat.add (Nat.succ Nat.zero) (Nat.succ Nat.zero))
  - function_lemma_for_two_add_one_eq_three
    Statement: Eq.{1} Nat (Nat.add (Nat.succ (Nat.succ Nat.zero)) (Nat.succ Nat.zero))
  - add_comp_succ_eq_0
    Statement: Eq.{1} Nat (Nat.add (Nat.succ Nat.zero)) (Nat.add Nat.zero)
  - add_comp_succ_eq_1
    Statement: Eq.{1} Nat (Nat.add (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - add_comp_succ_eq_2
    Statement: Eq.{1} Nat (Nat.add (Nat.succ Nat.zero)) Nat.zero
  - add_comp_succ_eq_3
    Statement: Eq.{1} Nat (Nat.add (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - add_comp_add1_eq_0
    Statement: Eq.{1} Nat (Nat.add ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.add Nat.zero)
  - add_comp_add1_eq_1
    Statement: Eq.{1} Nat (Nat.add ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)
  - add_comp_add1_eq_2
    Statement: Eq.{1} Nat (Nat.add ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) Nat.zero
  - add_comp_add1_eq_3
    Statement: Eq.{1} Nat (Nat.add ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.succ Nat.zero)
  - add_comp_add2_eq_0
    Statement: Eq.{1} Nat (Nat.add ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.add Nat.zero)
  - add_comp_add2_eq_1
    Statement: Eq.{1} Nat (Nat.add ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)
  - add_comp_add2_eq_2
    Statement: Eq.{1} Nat (Nat.add ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) Nat.zero
  - add_comp_add2_eq_3
    Statement: Eq.{1} Nat (Nat.add ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.succ Nat.zero)
  - mul_comp_succ_eq_0
    Statement: Eq.{1} Nat (Nat.mul (Nat.succ Nat.zero)) (Nat.mul Nat.zero)
  - mul_comp_succ_eq_1
    Statement: Eq.{1} Nat (Nat.mul (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - mul_comp_succ_eq_2
    Statement: Eq.{1} Nat (Nat.mul (Nat.succ Nat.zero)) Nat.zero
  - mul_comp_succ_eq_3
    Statement: Eq.{1} Nat (Nat.mul (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - mul_comp_add1_eq_0
    Statement: Eq.{1} Nat (Nat.mul ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.mul Nat.zero)
  - mul_comp_add1_eq_1
    Statement: Eq.{1} Nat (Nat.mul ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)
  - mul_comp_add1_eq_2
    Statement: Eq.{1} Nat (Nat.mul ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) Nat.zero
  - mul_comp_add1_eq_3
    Statement: Eq.{1} Nat (Nat.mul ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.succ Nat.zero)
  - mul_comp_add2_eq_0
    Statement: Eq.{1} Nat (Nat.mul ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.mul Nat.zero)
  - mul_comp_add2_eq_1
    Statement: Eq.{1} Nat (Nat.mul ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)
  - mul_comp_add2_eq_2
    Statement: Eq.{1} Nat (Nat.mul ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) Nat.zero
  - mul_comp_add2_eq_3
    Statement: Eq.{1} Nat (Nat.mul ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.succ Nat.zero)
  - sub_comp_succ_eq_0
    Statement: Eq.{1} Nat (Nat.sub (Nat.succ Nat.zero)) (Nat.sub Nat.zero)
  - sub_comp_succ_eq_1
    Statement: Eq.{1} Nat (Nat.sub (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - sub_comp_succ_eq_2
    Statement: Eq.{1} Nat (Nat.sub (Nat.succ Nat.zero)) Nat.zero
  - sub_comp_succ_eq_3
    Statement: Eq.{1} Nat (Nat.sub (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - sub_comp_add1_eq_0
    Statement: Eq.{1} Nat (Nat.sub ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.sub Nat.zero)
  - sub_comp_add1_eq_1
    Statement: Eq.{1} Nat (Nat.sub ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)
  - sub_comp_add1_eq_2
    Statement: Eq.{1} Nat (Nat.sub ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) Nat.zero
  - sub_comp_add1_eq_3
    Statement: Eq.{1} Nat (Nat.sub ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.succ Nat.zero)
  - sub_comp_add2_eq_0
    Statement: Eq.{1} Nat (Nat.sub ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.sub Nat.zero)
  - sub_comp_add2_eq_1
    Statement: Eq.{1} Nat (Nat.sub ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)
  - sub_comp_add2_eq_2
    Statement: Eq.{1} Nat (Nat.sub ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) Nat.zero
  - sub_comp_add2_eq_3
    Statement: Eq.{1} Nat (Nat.sub ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.succ Nat.zero)
  - mod_comp_succ_eq_0
    Statement: Eq.{1} Nat (Nat.mod (Nat.succ Nat.zero)) (Nat.mod Nat.zero)
  - mod_comp_succ_eq_1
    Statement: Eq.{1} Nat (Nat.mod (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - mod_comp_succ_eq_2
    Statement: Eq.{1} Nat (Nat.mod (Nat.succ Nat.zero)) Nat.zero
  - mod_comp_succ_eq_3
    Statement: Eq.{1} Nat (Nat.mod (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - mod_comp_add1_eq_0
    Statement: Eq.{1} Nat (Nat.mod ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.mod Nat.zero)
  - mod_comp_add1_eq_1
    Statement: Eq.{1} Nat (Nat.mod ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)
  - mod_comp_add1_eq_2
    Statement: Eq.{1} Nat (Nat.mod ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) Nat.zero
  - mod_comp_add1_eq_3
    Statement: Eq.{1} Nat (Nat.mod ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.succ Nat.zero)
  - mod_comp_add2_eq_0
    Statement: Eq.{1} Nat (Nat.mod ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.mod Nat.zero)
  - mod_comp_add2_eq_1
    Statement: Eq.{1} Nat (Nat.mod ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)
  - mod_comp_add2_eq_2
    Statement: Eq.{1} Nat (Nat.mod ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) Nat.zero
  - mod_comp_add2_eq_3
    Statement: Eq.{1} Nat (Nat.mod ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.succ Nat.zero)
  - gcd_comp_succ_eq_0
    Statement: Eq.{1} Nat (Nat.gcd (Nat.succ Nat.zero)) (Nat.gcd Nat.zero)
  - gcd_comp_succ_eq_1
    Statement: Eq.{1} Nat (Nat.gcd (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
All Theorems (112):
  - add_assoc
    Statement: forall (n : Nat) (m : Nat) (k : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n m) k) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m k))
  - add_comm
    Statement: forall (n : Nat) (m : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n m) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m n)
  - add_zero
    Statement: forall (n : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) n
  - zero_add
    Statement: forall (n : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) n) n
  - mul_assoc
    Statement: forall (n : Nat) (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n m) k) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m k))
  - mul_comm
    Statement: forall (n : Nat) (m : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n m) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m n)
  - mul_one
    Statement: forall (n : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) n
  - one_mul
    Statement: forall (n : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) n) n
  - mul_zero
    Statement: forall (n : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - zero_mul
    Statement: forall (n : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) n) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - left_distrib
    Statement: forall (n : Nat) (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m k)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n m) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n k))
  - right_distrib
    Statement: forall (n : Nat) (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n m) k) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n k) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m k))
  - dvd_refl
    Statement: forall (a : Nat), Dvd.dvd.{0} Nat Nat.instDvd a a
  - dvd_trans
    Statement: forall {a : Nat} {b : Nat} {c : Nat}, (Dvd.dvd.{0} Nat Nat.instDvd a b) -> (Dvd.dvd.{0} Nat Nat.instDvd b c) -> (Dvd.dvd.{0} Nat Nat.instDvd a c)
  - dvd_add
    Statement: forall {a : Nat} {b : Nat} {c : Nat}, (Dvd.dvd.{0} Nat Nat.instDvd a b) -> (Dvd.dvd.{0} Nat Nat.instDvd a c) -> (Dvd.dvd.{0} Nat Nat.instDvd a (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) b c))
  - dvd_mul
    Statement: forall {k : Nat} {m : Nat} {n : Nat}, Iff (Dvd.dvd.{0} Nat Nat.instDvd k (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m n)) (Exists.{1} Nat (fun (k₁ : Nat) => Exists.{1} Nat (fun (k₂ : Nat) => And (Dvd.dvd.{0} Nat Nat.instDvd k₁ m) (And (Dvd.dvd.{0} Nat Nat.instDvd k₂ n) (Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) k₁ k₂) k)))))
  - gcd_comm
    Statement: forall (m : Nat) (n : Nat), Eq.{1} Nat (Nat.gcd m n) (Nat.gcd n m)
  - gcd_assoc
    Statement: forall (m : Nat) (n : Nat) (k : Nat), Eq.{1} Nat (Nat.gcd (Nat.gcd m n) k) (Nat.gcd m (Nat.gcd n k))
  - gcd_zero_left
    Statement: forall (y : Nat), Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} ([mdata borrowed:1 Nat]) 0 (instOfNatNat 0)) y) y
  - gcd_zero_right
    Statement: forall (n : Nat), Eq.{1} Nat (Nat.gcd n (OfNat.ofNat.{0} ([mdata borrowed:1 Nat]) 0 (instOfNatNat 0))) n
  - lcm_comm
    Statement: forall (m : Nat) (n : Nat), Eq.{1} Nat (Nat.lcm m n) (Nat.lcm n m)
  - lcm_assoc
    Statement: forall (m : Nat) (n : Nat) (k : Nat), Eq.{1} Nat (Nat.lcm (Nat.lcm m n) k) (Nat.lcm m (Nat.lcm n k))
  - prime_def
    Statement: forall {p : Nat}, Iff (Nat.Prime p) (And (LE.le.{0} Nat instLENat (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) p) (forall (m : Nat), (Dvd.dvd.{0} Nat Nat.instDvd m p) -> (Or (Eq.{1} Nat m (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (Eq.{1} Nat m p))))
  - prime_two
    Statement: Nat.Prime (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - prime_three
    Statement: Nat.Prime (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - prime_five
    Statement: Nat.Prime (OfNat.ofNat.{0} Nat 5 (instOfNatNat 5))
  - prime_seven
    Statement: Nat.Prime (OfNat.ofNat.{0} Nat 7 (instOfNatNat 7))
  - mod_mod
    Statement: forall (a : Nat) (n : Nat), Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) a n) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) a n)
  - add_mod
    Statement: forall (a : Nat) (b : Nat) (n : Nat), Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) a b) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) a n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) b n)) n)
  - mul_mod
    Statement: forall (a : Nat) (b : Nat) (n : Nat), Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) a b) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) a n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) b n)) n)
  - mod_two_eq_zero_or_one
    Statement: forall (n : Nat), Or (Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) n (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) n (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))
  - fib_zero
    Statement: Eq.{1} Nat (Nat.fib (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - fib_one
    Statement: Eq.{1} Nat (Nat.fib (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - fib_add
    Statement: forall (m : Nat) (n : Nat), Eq.{1} Nat (Nat.fib (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m n) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (Nat.fib m) (Nat.fib n)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (Nat.fib (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Nat.fib (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))))
  - zero_eq_zero
    Statement: Eq.{1} Nat Nat.zero Nat.zero
  - add_comm
    Statement: forall (n : Nat) (m : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n m) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m n)
  - zero_add_zero
    Statement: Eq.{1} Nat (Nat.add Nat.zero Nat.zero) Nat.zero
  - one_add_one_eq_two
    Statement: Eq.{1} Nat (Nat.add (Nat.succ Nat.zero) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ Nat.zero))
  - two_add_one_eq_three
    Statement: Eq.{1} Nat (Nat.add (Nat.succ (Nat.succ Nat.zero)) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ (Nat.succ Nat.zero)))
  - add_assoc_spec_nat_0
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) m) k) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m k))
  - add_assoc_spec_nat_1
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) m) k) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m k))
  - add_assoc_spec_nat_2
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) m) k) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m k))
  - add_assoc_spec_nat_3
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) m) k) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m k))
  - add_assoc_spec_nat_4
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) m) k) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m k))
  - add_comm_spec_nat_0
    Statement: forall (m : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) m) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)))
  - add_comm_spec_nat_1
    Statement: forall (m : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) m) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))
  - add_comm_spec_nat_2
    Statement: forall (m : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) m) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)))
  - add_comm_spec_nat_3
    Statement: forall (m : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) m) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)))
  - add_comm_spec_nat_4
    Statement: forall (m : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) m) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)))
  - add_zero_spec_nat_0
    Statement: Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - add_zero_spec_nat_1
    Statement: Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - add_zero_spec_nat_2
    Statement: Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - add_zero_spec_nat_3
    Statement: Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - add_zero_spec_nat_4
    Statement: Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - zero_add_spec_nat_0
    Statement: Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - zero_add_spec_nat_1
    Statement: Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - zero_add_spec_nat_2
    Statement: Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - zero_add_spec_nat_3
    Statement: Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - zero_add_spec_nat_4
    Statement: Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - mul_assoc_spec_nat_0
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) m) k) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m k))
  - mul_assoc_spec_nat_1
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) m) k) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m k))
  - mul_assoc_spec_nat_2
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) m) k) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m k))
  - mul_assoc_spec_nat_3
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) m) k) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m k))
  - mul_assoc_spec_nat_4
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) m) k) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m k))
  - mul_comm_spec_nat_0
    Statement: forall (m : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) m) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)))
  - mul_comm_spec_nat_1
    Statement: forall (m : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) m) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))
  - mul_comm_spec_nat_2
    Statement: forall (m : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) m) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)))
  - mul_comm_spec_nat_3
    Statement: forall (m : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) m) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)))
  - mul_comm_spec_nat_4
    Statement: forall (m : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) m) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)))
  - mul_one_spec_nat_0
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - mul_one_spec_nat_1
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - mul_one_spec_nat_2
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - mul_one_spec_nat_3
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - mul_one_spec_nat_4
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - one_mul_spec_nat_0
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - one_mul_spec_nat_1
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - one_mul_spec_nat_2
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - one_mul_spec_nat_3
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - one_mul_spec_nat_4
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - mul_zero_spec_nat_0
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - mul_zero_spec_nat_1
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - mul_zero_spec_nat_2
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - mul_zero_spec_nat_3
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - mul_zero_spec_nat_4
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - zero_mul_spec_nat_0
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - zero_mul_spec_nat_1
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - zero_mul_spec_nat_2
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - zero_mul_spec_nat_3
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - zero_mul_spec_nat_4
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - fib_zero_on_nat_0
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - fib_zero_on_zero
    Statement: Eq.{1} Nat Nat.zero (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - fib_one_on_nat_1
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - fib_one_on_one
    Statement: Eq.{1} Nat (Nat.succ Nat.zero) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - zero_eq_zero_on_nat_0
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) Nat.zero
  - zero_add_zero_on_nat_0
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) Nat.zero
  - one_add_one_eq_two_on_nat_2
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (Nat.succ (Nat.succ Nat.zero))
  - one_add_one_eq_two_on_prime_2
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (Nat.succ (Nat.succ Nat.zero))
  - one_add_one_eq_two_on_two
    Statement: Eq.{1} Nat (Nat.succ (Nat.succ Nat.zero)) (Nat.succ (Nat.succ Nat.zero))
  - two_add_one_eq_three_on_nat_3
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (Nat.succ (Nat.succ (Nat.succ Nat.zero)))
  - two_add_one_eq_three_on_prime_3
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (Nat.succ (Nat.succ (Nat.succ Nat.zero)))
  - intermediate_for_zero_add_zero_via_add
    Statement: Eq.{1} Nat (Nat.add Nat.zero Nat.zero) Nat.zero
  - intermediate_for_zero_add_zero_via_zero
    Statement: Eq.{1} Nat (Nat.add Nat.zero Nat.zero) Nat.zero
  - dual_of_zero_add_zero
    Statement: Eq.{1} Nat (Nat.add Nat.zero Nat.zero) Nat.zero
  - intermediate_for_one_add_one_eq_two_via_add
    Statement: Eq.{1} Nat (Nat.add (Nat.succ Nat.zero) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ Nat.zero))
  - intermediate_for_one_add_one_eq_two_via_one
    Statement: Eq.{1} Nat (Nat.add (Nat.succ Nat.zero) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ Nat.zero))
  - intermediate_for_one_add_one_eq_two_via_two
    Statement: Eq.{1} Nat (Nat.add (Nat.succ Nat.zero) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ Nat.zero))
  - dual_of_one_add_one_eq_two
    Statement: Eq.{1} Nat (Nat.add (Nat.succ Nat.zero) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ Nat.zero))
  - intermediate_for_two_add_one_eq_three_via_add
    Statement: Eq.{1} Nat (Nat.add (Nat.succ (Nat.succ Nat.zero)) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ (Nat.succ Nat.zero)))
  - intermediate_for_two_add_one_eq_three_via_two
    Statement: Eq.{1} Nat (Nat.add (Nat.succ (Nat.succ Nat.zero)) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ (Nat.succ Nat.zero)))
  - intermediate_for_two_add_one_eq_three_via_one
    Statement: Eq.{1} Nat (Nat.add (Nat.succ (Nat.succ Nat.zero)) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ (Nat.succ Nat.zero)))
  - intermediate_for_two_add_one_eq_three_via_succ
    Statement: Eq.{1} Nat (Nat.add (Nat.succ (Nat.succ Nat.zero)) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ (Nat.succ Nat.zero)))
  - dual_of_two_add_one_eq_three
    Statement: Eq.{1} Nat (Nat.add (Nat.succ (Nat.succ Nat.zero)) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ (Nat.succ Nat.zero)))

================================================================================
=== ITERATION 2 COMPLETE ===
Total Concepts: 535 (+245 new)
Patterns: 13
Conjectures: 121
Theorems: 212
Top Concepts:
  - concept_freshness (score: 1.000000)
  - add_assoc (score: 1.000000)
  - add_comm (score: 1.000000)
  - add_zero (score: 1.000000)
  - zero_add (score: 1.000000)
  - mul_assoc (score: 1.000000)
  - mul_comm (score: 1.000000)
  - mul_one (score: 1.000000)
  - one_mul (score: 1.000000)
  - mul_zero (score: 1.000000)
Generation Methods:
  seed: 9
  application: 38
  specialization: 100
  pattern_recognition: 5
  composition: 56
  lemma_application: 61
All Patterns (13):
  - natural_number_sequence: Sequence: 0, 1, 2, ... (natural numbers via successor)
  - variation_add_assoc: Variation pattern based on theorem add_assoc
  - variation_add_comm: Variation pattern based on theorem add_comm
  - variation_add_zero: Variation pattern based on theorem add_zero
  - succ_iteration_pattern: Repeated application of succ
  - add_iteration_pattern: Repeated application of add
  - add1_iteration_pattern: Repeated application of add1
  - add2_iteration_pattern: Repeated application of add2
  - meta_pattern_application_successful: Meta-pattern: application has been successful (20 concepts)
  - meta_pattern_composition_successful: Meta-pattern: composition has been successful (6 concepts)
  - meta_pattern_specialization_successful: Meta-pattern: specialization has been successful (50 concepts)
  - revived_natural_number_sequence: Revived: Sequence: 0, 1, 2, ... (natural numbers via successor)
  - revived_variation_add_assoc: Revived: Variation pattern based on theorem add_assoc
All Conjectures (121):
  - function_lemma_for_zero_add_zero
    Statement: Eq.{1} Nat (Nat.add Nat.zero Nat.zero)
  - function_lemma_for_one_add_one_eq_two
    Statement: Eq.{1} Nat (Nat.add (Nat.succ Nat.zero) (Nat.succ Nat.zero))
  - function_lemma_for_two_add_one_eq_three
    Statement: Eq.{1} Nat (Nat.add (Nat.succ (Nat.succ Nat.zero)) (Nat.succ Nat.zero))
  - add_comp_succ_eq_0
    Statement: Eq.{1} Nat (Nat.add (Nat.succ Nat.zero)) (Nat.add Nat.zero)
  - add_comp_succ_eq_1
    Statement: Eq.{1} Nat (Nat.add (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - add_comp_succ_eq_2
    Statement: Eq.{1} Nat (Nat.add (Nat.succ Nat.zero)) Nat.zero
  - add_comp_succ_eq_3
    Statement: Eq.{1} Nat (Nat.add (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - add_comp_add1_eq_0
    Statement: Eq.{1} Nat (Nat.add ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.add Nat.zero)
  - add_comp_add1_eq_1
    Statement: Eq.{1} Nat (Nat.add ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)
  - add_comp_add1_eq_2
    Statement: Eq.{1} Nat (Nat.add ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) Nat.zero
  - add_comp_add1_eq_3
    Statement: Eq.{1} Nat (Nat.add ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.succ Nat.zero)
  - add_comp_add2_eq_0
    Statement: Eq.{1} Nat (Nat.add ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.add Nat.zero)
  - add_comp_add2_eq_1
    Statement: Eq.{1} Nat (Nat.add ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)
  - add_comp_add2_eq_2
    Statement: Eq.{1} Nat (Nat.add ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) Nat.zero
  - add_comp_add2_eq_3
    Statement: Eq.{1} Nat (Nat.add ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.succ Nat.zero)
  - mul_comp_succ_eq_0
    Statement: Eq.{1} Nat (Nat.mul (Nat.succ Nat.zero)) (Nat.mul Nat.zero)
  - mul_comp_succ_eq_1
    Statement: Eq.{1} Nat (Nat.mul (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - mul_comp_succ_eq_2
    Statement: Eq.{1} Nat (Nat.mul (Nat.succ Nat.zero)) Nat.zero
  - mul_comp_succ_eq_3
    Statement: Eq.{1} Nat (Nat.mul (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - mul_comp_add1_eq_0
    Statement: Eq.{1} Nat (Nat.mul ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.mul Nat.zero)
  - mul_comp_add1_eq_1
    Statement: Eq.{1} Nat (Nat.mul ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)
  - mul_comp_add1_eq_2
    Statement: Eq.{1} Nat (Nat.mul ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) Nat.zero
  - mul_comp_add1_eq_3
    Statement: Eq.{1} Nat (Nat.mul ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.succ Nat.zero)
  - mul_comp_add2_eq_0
    Statement: Eq.{1} Nat (Nat.mul ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.mul Nat.zero)
  - mul_comp_add2_eq_1
    Statement: Eq.{1} Nat (Nat.mul ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)
  - mul_comp_add2_eq_2
    Statement: Eq.{1} Nat (Nat.mul ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) Nat.zero
  - mul_comp_add2_eq_3
    Statement: Eq.{1} Nat (Nat.mul ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.succ Nat.zero)
  - sub_comp_succ_eq_0
    Statement: Eq.{1} Nat (Nat.sub (Nat.succ Nat.zero)) (Nat.sub Nat.zero)
  - sub_comp_succ_eq_1
    Statement: Eq.{1} Nat (Nat.sub (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - sub_comp_succ_eq_2
    Statement: Eq.{1} Nat (Nat.sub (Nat.succ Nat.zero)) Nat.zero
  - sub_comp_succ_eq_3
    Statement: Eq.{1} Nat (Nat.sub (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - sub_comp_add1_eq_0
    Statement: Eq.{1} Nat (Nat.sub ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.sub Nat.zero)
  - sub_comp_add1_eq_1
    Statement: Eq.{1} Nat (Nat.sub ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)
  - sub_comp_add1_eq_2
    Statement: Eq.{1} Nat (Nat.sub ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) Nat.zero
  - sub_comp_add1_eq_3
    Statement: Eq.{1} Nat (Nat.sub ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.succ Nat.zero)
  - sub_comp_add2_eq_0
    Statement: Eq.{1} Nat (Nat.sub ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.sub Nat.zero)
  - sub_comp_add2_eq_1
    Statement: Eq.{1} Nat (Nat.sub ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)
  - sub_comp_add2_eq_2
    Statement: Eq.{1} Nat (Nat.sub ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) Nat.zero
  - sub_comp_add2_eq_3
    Statement: Eq.{1} Nat (Nat.sub ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.succ Nat.zero)
  - mod_comp_succ_eq_0
    Statement: Eq.{1} Nat (Nat.mod (Nat.succ Nat.zero)) (Nat.mod Nat.zero)
  - mod_comp_succ_eq_1
    Statement: Eq.{1} Nat (Nat.mod (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - mod_comp_succ_eq_2
    Statement: Eq.{1} Nat (Nat.mod (Nat.succ Nat.zero)) Nat.zero
  - mod_comp_succ_eq_3
    Statement: Eq.{1} Nat (Nat.mod (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - mod_comp_add1_eq_0
    Statement: Eq.{1} Nat (Nat.mod ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.mod Nat.zero)
  - mod_comp_add1_eq_1
    Statement: Eq.{1} Nat (Nat.mod ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)
  - mod_comp_add1_eq_2
    Statement: Eq.{1} Nat (Nat.mod ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) Nat.zero
  - mod_comp_add1_eq_3
    Statement: Eq.{1} Nat (Nat.mod ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.succ Nat.zero)
  - mod_comp_add2_eq_0
    Statement: Eq.{1} Nat (Nat.mod ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.mod Nat.zero)
  - mod_comp_add2_eq_1
    Statement: Eq.{1} Nat (Nat.mod ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)
  - mod_comp_add2_eq_2
    Statement: Eq.{1} Nat (Nat.mod ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) Nat.zero
  - mod_comp_add2_eq_3
    Statement: Eq.{1} Nat (Nat.mod ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.succ Nat.zero)
  - gcd_comp_succ_eq_0
    Statement: Eq.{1} Nat (Nat.gcd (Nat.succ Nat.zero)) (Nat.gcd Nat.zero)
  - gcd_comp_succ_eq_1
    Statement: Eq.{1} Nat (Nat.gcd (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - gcd_comp_succ_eq_2
    Statement: Eq.{1} Nat (Nat.gcd (Nat.succ Nat.zero)) Nat.zero
  - gcd_comp_succ_eq_3
    Statement: Eq.{1} Nat (Nat.gcd (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - gcd_comp_add1_eq_0
    Statement: Eq.{1} Nat (Nat.gcd ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.gcd Nat.zero)
  - gcd_comp_add1_eq_1
    Statement: Eq.{1} Nat (Nat.gcd ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)
  - gcd_comp_add1_eq_2
    Statement: Eq.{1} Nat (Nat.gcd ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) Nat.zero
  - gcd_comp_add1_eq_3
    Statement: Eq.{1} Nat (Nat.gcd ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.succ Nat.zero)
  - gcd_comp_add2_eq_0
    Statement: Eq.{1} Nat (Nat.gcd ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.gcd Nat.zero)
  - gcd_comp_add2_eq_1
    Statement: Eq.{1} Nat (Nat.gcd ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)
  - gcd_comp_add2_eq_2
    Statement: Eq.{1} Nat (Nat.gcd ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) Nat.zero
  - gcd_comp_add2_eq_3
    Statement: Eq.{1} Nat (Nat.gcd ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.succ Nat.zero)
  - lcm_comp_succ_eq_0
    Statement: Eq.{1} Nat (Nat.lcm (Nat.succ Nat.zero)) (Nat.lcm Nat.zero)
  - lcm_comp_succ_eq_1
    Statement: Eq.{1} Nat (Nat.lcm (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - lcm_comp_succ_eq_2
    Statement: Eq.{1} Nat (Nat.lcm (Nat.succ Nat.zero)) Nat.zero
  - lcm_comp_succ_eq_3
    Statement: Eq.{1} Nat (Nat.lcm (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - lcm_comp_add1_eq_0
    Statement: Eq.{1} Nat (Nat.lcm ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.lcm Nat.zero)
  - lcm_comp_add1_eq_1
    Statement: Eq.{1} Nat (Nat.lcm ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)
  - lcm_comp_add1_eq_2
    Statement: Eq.{1} Nat (Nat.lcm ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) Nat.zero
  - lcm_comp_add1_eq_3
    Statement: Eq.{1} Nat (Nat.lcm ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.succ Nat.zero)
  - lcm_comp_add2_eq_0
    Statement: Eq.{1} Nat (Nat.lcm ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.lcm Nat.zero)
  - lcm_comp_add2_eq_1
    Statement: Eq.{1} Nat (Nat.lcm ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)
  - lcm_comp_add2_eq_2
    Statement: Eq.{1} Nat (Nat.lcm ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) Nat.zero
  - lcm_comp_add2_eq_3
    Statement: Eq.{1} Nat (Nat.lcm ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.succ Nat.zero)
  - succ_comp_add1_eq_0
    Statement: Eq.{1} Nat (Nat.succ ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.succ Nat.zero)
  - succ_comp_add1_eq_1
    Statement: Eq.{1} Nat (Nat.succ ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)
  - succ_comp_add1_eq_2
    Statement: Eq.{1} Nat (Nat.succ ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) Nat.zero
  - succ_comp_add1_eq_3
    Statement: Eq.{1} Nat (Nat.succ ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.succ Nat.zero)
  - succ_comp_add2_eq_0
    Statement: Eq.{1} Nat (Nat.succ ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.succ Nat.zero)
  - succ_comp_add2_eq_1
    Statement: Eq.{1} Nat (Nat.succ ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)
  - succ_comp_add2_eq_2
    Statement: Eq.{1} Nat (Nat.succ ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) Nat.zero
  - succ_comp_add2_eq_3
    Statement: Eq.{1} Nat (Nat.succ ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.succ Nat.zero)
  - add1_comp_succ_eq_0
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) (Nat.succ Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)
  - add1_comp_succ_eq_1
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - add1_comp_succ_eq_2
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) (Nat.succ Nat.zero)) Nat.zero
  - add1_comp_succ_eq_3
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - add1_comp_add2_eq_0
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)
  - add1_comp_add2_eq_1
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)
  - add1_comp_add2_eq_2
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) Nat.zero
  - add1_comp_add2_eq_3
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.succ Nat.zero)
  - add2_comp_succ_eq_0
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) (Nat.succ Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)
  - add2_comp_succ_eq_1
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - add2_comp_succ_eq_2
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) (Nat.succ Nat.zero)) Nat.zero
  - add2_comp_succ_eq_3
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - add2_comp_add1_eq_0
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)
  - add2_comp_add1_eq_1
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)
  - add2_comp_add1_eq_2
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) Nat.zero
  - add2_comp_add1_eq_3
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.succ Nat.zero)
  - succ_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat (Nat.succ Nat.zero) (Nat.succ (Nat.succ Nat.zero))
  - add1_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) (Nat.succ Nat.zero))
  - add2_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) (Nat.succ Nat.zero))
  - succ_compose_add1_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 1 x)) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 1 x)) (Nat.succ Nat.zero))
  - cross_apply_zero_add_zero_to_zero
    Statement: True
  - cross_apply_zero_add_zero_to_succ
    Statement: True
  - cross_apply_zero_add_zero_to_one
    Statement: True
  - cross_apply_zero_add_zero_to_two
    Statement: True
  - cross_apply_zero_add_zero_to_add
    Statement: True
  - cross_apply_one_add_one_eq_two_to_zero
    Statement: True
  - cross_apply_one_add_one_eq_two_to_succ
    Statement: True
  - cross_apply_one_add_one_eq_two_to_one
    Statement: True
  - cross_apply_one_add_one_eq_two_to_two
    Statement: True
  - cross_apply_one_add_one_eq_two_to_add
    Statement: True
  - cross_apply_two_add_one_eq_three_to_zero
    Statement: True
  - cross_apply_two_add_one_eq_three_to_succ
    Statement: True
  - cross_apply_two_add_one_eq_three_to_one
    Statement: True
  - cross_apply_two_add_one_eq_three_to_two
    Statement: True
  - cross_apply_two_add_one_eq_three_to_add
    Statement: True
  - extension_zero_add_zero
    Statement: True
  - extension_one_add_one_eq_two
    Statement: True
  - extension_two_add_one_eq_three
    Statement: True
All Theorems (212):
  - add_assoc
    Statement: forall (n : Nat) (m : Nat) (k : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n m) k) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m k))
  - add_comm
    Statement: forall (n : Nat) (m : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n m) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m n)
  - add_zero
    Statement: forall (n : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) n
  - zero_add
    Statement: forall (n : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) n) n
  - mul_assoc
    Statement: forall (n : Nat) (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n m) k) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m k))
  - mul_comm
    Statement: forall (n : Nat) (m : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n m) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m n)
  - mul_one
    Statement: forall (n : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) n
  - one_mul
    Statement: forall (n : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) n) n
  - mul_zero
    Statement: forall (n : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - zero_mul
    Statement: forall (n : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) n) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - left_distrib
    Statement: forall (n : Nat) (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m k)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n m) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n k))
  - right_distrib
    Statement: forall (n : Nat) (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n m) k) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n k) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m k))
  - dvd_refl
    Statement: forall (a : Nat), Dvd.dvd.{0} Nat Nat.instDvd a a
  - dvd_trans
    Statement: forall {a : Nat} {b : Nat} {c : Nat}, (Dvd.dvd.{0} Nat Nat.instDvd a b) -> (Dvd.dvd.{0} Nat Nat.instDvd b c) -> (Dvd.dvd.{0} Nat Nat.instDvd a c)
  - dvd_add
    Statement: forall {a : Nat} {b : Nat} {c : Nat}, (Dvd.dvd.{0} Nat Nat.instDvd a b) -> (Dvd.dvd.{0} Nat Nat.instDvd a c) -> (Dvd.dvd.{0} Nat Nat.instDvd a (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) b c))
  - dvd_mul
    Statement: forall {k : Nat} {m : Nat} {n : Nat}, Iff (Dvd.dvd.{0} Nat Nat.instDvd k (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m n)) (Exists.{1} Nat (fun (k₁ : Nat) => Exists.{1} Nat (fun (k₂ : Nat) => And (Dvd.dvd.{0} Nat Nat.instDvd k₁ m) (And (Dvd.dvd.{0} Nat Nat.instDvd k₂ n) (Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) k₁ k₂) k)))))
  - gcd_comm
    Statement: forall (m : Nat) (n : Nat), Eq.{1} Nat (Nat.gcd m n) (Nat.gcd n m)
  - gcd_assoc
    Statement: forall (m : Nat) (n : Nat) (k : Nat), Eq.{1} Nat (Nat.gcd (Nat.gcd m n) k) (Nat.gcd m (Nat.gcd n k))
  - gcd_zero_left
    Statement: forall (y : Nat), Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} ([mdata borrowed:1 Nat]) 0 (instOfNatNat 0)) y) y
  - gcd_zero_right
    Statement: forall (n : Nat), Eq.{1} Nat (Nat.gcd n (OfNat.ofNat.{0} ([mdata borrowed:1 Nat]) 0 (instOfNatNat 0))) n
  - lcm_comm
    Statement: forall (m : Nat) (n : Nat), Eq.{1} Nat (Nat.lcm m n) (Nat.lcm n m)
  - lcm_assoc
    Statement: forall (m : Nat) (n : Nat) (k : Nat), Eq.{1} Nat (Nat.lcm (Nat.lcm m n) k) (Nat.lcm m (Nat.lcm n k))
  - prime_def
    Statement: forall {p : Nat}, Iff (Nat.Prime p) (And (LE.le.{0} Nat instLENat (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) p) (forall (m : Nat), (Dvd.dvd.{0} Nat Nat.instDvd m p) -> (Or (Eq.{1} Nat m (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (Eq.{1} Nat m p))))
  - prime_two
    Statement: Nat.Prime (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - prime_three
    Statement: Nat.Prime (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - prime_five
    Statement: Nat.Prime (OfNat.ofNat.{0} Nat 5 (instOfNatNat 5))
  - prime_seven
    Statement: Nat.Prime (OfNat.ofNat.{0} Nat 7 (instOfNatNat 7))
  - mod_mod
    Statement: forall (a : Nat) (n : Nat), Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) a n) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) a n)
  - add_mod
    Statement: forall (a : Nat) (b : Nat) (n : Nat), Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) a b) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) a n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) b n)) n)
  - mul_mod
    Statement: forall (a : Nat) (b : Nat) (n : Nat), Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) a b) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) a n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) b n)) n)
  - mod_two_eq_zero_or_one
    Statement: forall (n : Nat), Or (Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) n (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) n (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))
  - fib_zero
    Statement: Eq.{1} Nat (Nat.fib (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - fib_one
    Statement: Eq.{1} Nat (Nat.fib (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - fib_add
    Statement: forall (m : Nat) (n : Nat), Eq.{1} Nat (Nat.fib (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m n) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (Nat.fib m) (Nat.fib n)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (Nat.fib (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Nat.fib (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))))
  - zero_eq_zero
    Statement: Eq.{1} Nat Nat.zero Nat.zero
  - add_comm
    Statement: forall (n : Nat) (m : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n m) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m n)
  - zero_add_zero
    Statement: Eq.{1} Nat (Nat.add Nat.zero Nat.zero) Nat.zero
  - one_add_one_eq_two
    Statement: Eq.{1} Nat (Nat.add (Nat.succ Nat.zero) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ Nat.zero))
  - two_add_one_eq_three
    Statement: Eq.{1} Nat (Nat.add (Nat.succ (Nat.succ Nat.zero)) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ (Nat.succ Nat.zero)))
  - add_assoc_spec_nat_0
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) m) k) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m k))
  - add_assoc_spec_nat_1
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) m) k) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m k))
  - add_assoc_spec_nat_2
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) m) k) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m k))
  - add_assoc_spec_nat_3
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) m) k) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m k))
  - add_assoc_spec_nat_4
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) m) k) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m k))
  - add_comm_spec_nat_0
    Statement: forall (m : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) m) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)))
  - add_comm_spec_nat_1
    Statement: forall (m : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) m) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))
  - add_comm_spec_nat_2
    Statement: forall (m : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) m) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)))
  - add_comm_spec_nat_3
    Statement: forall (m : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) m) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)))
  - add_comm_spec_nat_4
    Statement: forall (m : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) m) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)))
  - add_zero_spec_nat_0
    Statement: Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - add_zero_spec_nat_1
    Statement: Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - add_zero_spec_nat_2
    Statement: Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - add_zero_spec_nat_3
    Statement: Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - add_zero_spec_nat_4
    Statement: Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - zero_add_spec_nat_0
    Statement: Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - zero_add_spec_nat_1
    Statement: Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - zero_add_spec_nat_2
    Statement: Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - zero_add_spec_nat_3
    Statement: Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - zero_add_spec_nat_4
    Statement: Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - mul_assoc_spec_nat_0
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) m) k) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m k))
  - mul_assoc_spec_nat_1
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) m) k) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m k))
  - mul_assoc_spec_nat_2
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) m) k) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m k))
  - mul_assoc_spec_nat_3
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) m) k) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m k))
  - mul_assoc_spec_nat_4
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) m) k) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m k))
  - mul_comm_spec_nat_0
    Statement: forall (m : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) m) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)))
  - mul_comm_spec_nat_1
    Statement: forall (m : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) m) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))
  - mul_comm_spec_nat_2
    Statement: forall (m : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) m) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)))
  - mul_comm_spec_nat_3
    Statement: forall (m : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) m) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)))
  - mul_comm_spec_nat_4
    Statement: forall (m : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) m) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)))
  - mul_one_spec_nat_0
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - mul_one_spec_nat_1
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - mul_one_spec_nat_2
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - mul_one_spec_nat_3
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - mul_one_spec_nat_4
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - one_mul_spec_nat_0
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - one_mul_spec_nat_1
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - one_mul_spec_nat_2
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - one_mul_spec_nat_3
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - one_mul_spec_nat_4
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - mul_zero_spec_nat_0
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - mul_zero_spec_nat_1
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - mul_zero_spec_nat_2
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - mul_zero_spec_nat_3
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - mul_zero_spec_nat_4
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - zero_mul_spec_nat_0
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - zero_mul_spec_nat_1
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - zero_mul_spec_nat_2
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - zero_mul_spec_nat_3
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - zero_mul_spec_nat_4
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - fib_zero_on_nat_0
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - fib_zero_on_zero
    Statement: Eq.{1} Nat Nat.zero (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - fib_one_on_nat_1
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - fib_one_on_one
    Statement: Eq.{1} Nat (Nat.succ Nat.zero) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - zero_eq_zero_on_nat_0
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) Nat.zero
  - zero_add_zero_on_nat_0
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) Nat.zero
  - one_add_one_eq_two_on_nat_2
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (Nat.succ (Nat.succ Nat.zero))
  - one_add_one_eq_two_on_prime_2
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (Nat.succ (Nat.succ Nat.zero))
  - one_add_one_eq_two_on_two
    Statement: Eq.{1} Nat (Nat.succ (Nat.succ Nat.zero)) (Nat.succ (Nat.succ Nat.zero))
  - two_add_one_eq_three_on_nat_3
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (Nat.succ (Nat.succ (Nat.succ Nat.zero)))
  - two_add_one_eq_three_on_prime_3
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (Nat.succ (Nat.succ (Nat.succ Nat.zero)))
  - intermediate_for_zero_add_zero_via_add
    Statement: Eq.{1} Nat (Nat.add Nat.zero Nat.zero) Nat.zero
  - intermediate_for_zero_add_zero_via_zero
    Statement: Eq.{1} Nat (Nat.add Nat.zero Nat.zero) Nat.zero
  - dual_of_zero_add_zero
    Statement: Eq.{1} Nat (Nat.add Nat.zero Nat.zero) Nat.zero
  - intermediate_for_one_add_one_eq_two_via_add
    Statement: Eq.{1} Nat (Nat.add (Nat.succ Nat.zero) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ Nat.zero))
  - intermediate_for_one_add_one_eq_two_via_one
    Statement: Eq.{1} Nat (Nat.add (Nat.succ Nat.zero) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ Nat.zero))
  - intermediate_for_one_add_one_eq_two_via_two
    Statement: Eq.{1} Nat (Nat.add (Nat.succ Nat.zero) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ Nat.zero))
  - dual_of_one_add_one_eq_two
    Statement: Eq.{1} Nat (Nat.add (Nat.succ Nat.zero) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ Nat.zero))
  - intermediate_for_two_add_one_eq_three_via_add
    Statement: Eq.{1} Nat (Nat.add (Nat.succ (Nat.succ Nat.zero)) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ (Nat.succ Nat.zero)))
  - intermediate_for_two_add_one_eq_three_via_two
    Statement: Eq.{1} Nat (Nat.add (Nat.succ (Nat.succ Nat.zero)) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ (Nat.succ Nat.zero)))
  - intermediate_for_two_add_one_eq_three_via_one
    Statement: Eq.{1} Nat (Nat.add (Nat.succ (Nat.succ Nat.zero)) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ (Nat.succ Nat.zero)))
  - intermediate_for_two_add_one_eq_three_via_succ
    Statement: Eq.{1} Nat (Nat.add (Nat.succ (Nat.succ Nat.zero)) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ (Nat.succ Nat.zero)))
  - dual_of_two_add_one_eq_three
    Statement: Eq.{1} Nat (Nat.add (Nat.succ (Nat.succ Nat.zero)) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ (Nat.succ Nat.zero)))
  - left_distrib_spec_nat_0
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m k)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) m) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) k))
  - left_distrib_spec_nat_1
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m k)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) m) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) k))
  - left_distrib_spec_nat_2
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m k)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) m) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) k))
  - left_distrib_spec_nat_3
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m k)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) m) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) k))
  - left_distrib_spec_nat_4
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m k)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) m) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) k))
  - right_distrib_spec_nat_0
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) m) k) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) k) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m k))
  - right_distrib_spec_nat_1
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) m) k) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) k) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m k))
  - right_distrib_spec_nat_2
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) m) k) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) k) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m k))
  - right_distrib_spec_nat_3
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) m) k) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) k) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m k))
  - right_distrib_spec_nat_4
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) m) k) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) k) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m k))
  - dvd_refl_spec_nat_0
    Statement: Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - dvd_refl_spec_nat_1
    Statement: Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - dvd_refl_spec_nat_2
    Statement: Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - dvd_refl_spec_nat_3
    Statement: Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - dvd_refl_spec_nat_4
    Statement: Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - dvd_trans_spec_nat_0
    Statement: forall {b : Nat} {c : Nat}, (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) b) -> (Dvd.dvd.{0} Nat Nat.instDvd b c) -> (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) c)
  - dvd_trans_spec_nat_1
    Statement: forall {b : Nat} {c : Nat}, (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) b) -> (Dvd.dvd.{0} Nat Nat.instDvd b c) -> (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) c)
  - dvd_trans_spec_nat_2
    Statement: forall {b : Nat} {c : Nat}, (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) b) -> (Dvd.dvd.{0} Nat Nat.instDvd b c) -> (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) c)
  - dvd_trans_spec_nat_3
    Statement: forall {b : Nat} {c : Nat}, (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) b) -> (Dvd.dvd.{0} Nat Nat.instDvd b c) -> (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) c)
  - dvd_trans_spec_nat_4
    Statement: forall {b : Nat} {c : Nat}, (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) b) -> (Dvd.dvd.{0} Nat Nat.instDvd b c) -> (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) c)
  - dvd_add_spec_nat_0
    Statement: forall {b : Nat} {c : Nat}, (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) b) -> (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) c) -> (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) b c))
  - dvd_add_spec_nat_1
    Statement: forall {b : Nat} {c : Nat}, (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) b) -> (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) c) -> (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) b c))
  - dvd_add_spec_nat_2
    Statement: forall {b : Nat} {c : Nat}, (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) b) -> (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) c) -> (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) b c))
  - dvd_add_spec_nat_3
    Statement: forall {b : Nat} {c : Nat}, (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) b) -> (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) c) -> (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) b c))
  - dvd_add_spec_nat_4
    Statement: forall {b : Nat} {c : Nat}, (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) b) -> (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) c) -> (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) b c))
  - dvd_mul_spec_nat_0
    Statement: forall {m : Nat} {n : Nat}, Iff (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m n)) (Exists.{1} Nat (fun (k₁ : Nat) => Exists.{1} Nat (fun (k₂ : Nat) => And (Dvd.dvd.{0} Nat Nat.instDvd k₁ m) (And (Dvd.dvd.{0} Nat Nat.instDvd k₂ n) (Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) k₁ k₂) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)))))))
  - dvd_mul_spec_nat_1
    Statement: forall {m : Nat} {n : Nat}, Iff (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m n)) (Exists.{1} Nat (fun (k₁ : Nat) => Exists.{1} Nat (fun (k₂ : Nat) => And (Dvd.dvd.{0} Nat Nat.instDvd k₁ m) (And (Dvd.dvd.{0} Nat Nat.instDvd k₂ n) (Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) k₁ k₂) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))))))
  - dvd_mul_spec_nat_2
    Statement: forall {m : Nat} {n : Nat}, Iff (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m n)) (Exists.{1} Nat (fun (k₁ : Nat) => Exists.{1} Nat (fun (k₂ : Nat) => And (Dvd.dvd.{0} Nat Nat.instDvd k₁ m) (And (Dvd.dvd.{0} Nat Nat.instDvd k₂ n) (Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) k₁ k₂) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)))))))
  - dvd_mul_spec_nat_3
    Statement: forall {m : Nat} {n : Nat}, Iff (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m n)) (Exists.{1} Nat (fun (k₁ : Nat) => Exists.{1} Nat (fun (k₂ : Nat) => And (Dvd.dvd.{0} Nat Nat.instDvd k₁ m) (And (Dvd.dvd.{0} Nat Nat.instDvd k₂ n) (Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) k₁ k₂) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)))))))
  - dvd_mul_spec_nat_4
    Statement: forall {m : Nat} {n : Nat}, Iff (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m n)) (Exists.{1} Nat (fun (k₁ : Nat) => Exists.{1} Nat (fun (k₂ : Nat) => And (Dvd.dvd.{0} Nat Nat.instDvd k₁ m) (And (Dvd.dvd.{0} Nat Nat.instDvd k₂ n) (Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) k₁ k₂) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)))))))
  - gcd_comm_spec_nat_0
    Statement: forall (n : Nat), Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) n) (Nat.gcd n (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)))
  - gcd_comm_spec_nat_1
    Statement: forall (n : Nat), Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) n) (Nat.gcd n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))
  - gcd_comm_spec_nat_2
    Statement: forall (n : Nat), Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) n) (Nat.gcd n (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)))
  - gcd_comm_spec_nat_3
    Statement: forall (n : Nat), Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) n) (Nat.gcd n (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)))
  - gcd_comm_spec_nat_4
    Statement: forall (n : Nat), Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) n) (Nat.gcd n (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)))
  - gcd_assoc_spec_nat_0
    Statement: forall (n : Nat) (k : Nat), Eq.{1} Nat (Nat.gcd (Nat.gcd (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) n) k) (Nat.gcd (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (Nat.gcd n k))
  - gcd_assoc_spec_nat_1
    Statement: forall (n : Nat) (k : Nat), Eq.{1} Nat (Nat.gcd (Nat.gcd (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) n) k) (Nat.gcd (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (Nat.gcd n k))
  - gcd_assoc_spec_nat_2
    Statement: forall (n : Nat) (k : Nat), Eq.{1} Nat (Nat.gcd (Nat.gcd (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) n) k) (Nat.gcd (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (Nat.gcd n k))
  - gcd_assoc_spec_nat_3
    Statement: forall (n : Nat) (k : Nat), Eq.{1} Nat (Nat.gcd (Nat.gcd (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) n) k) (Nat.gcd (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (Nat.gcd n k))
  - gcd_assoc_spec_nat_4
    Statement: forall (n : Nat) (k : Nat), Eq.{1} Nat (Nat.gcd (Nat.gcd (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) n) k) (Nat.gcd (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (Nat.gcd n k))
  - gcd_zero_left_spec_nat_0
    Statement: Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} ([mdata borrowed:1 Nat]) 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - gcd_zero_left_spec_nat_1
    Statement: Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} ([mdata borrowed:1 Nat]) 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - gcd_zero_left_spec_nat_2
    Statement: Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} ([mdata borrowed:1 Nat]) 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - gcd_zero_left_spec_nat_3
    Statement: Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} ([mdata borrowed:1 Nat]) 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - gcd_zero_left_spec_nat_4
    Statement: Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} ([mdata borrowed:1 Nat]) 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - gcd_zero_right_spec_nat_0
    Statement: Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} ([mdata borrowed:1 Nat]) 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - gcd_zero_right_spec_nat_1
    Statement: Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} ([mdata borrowed:1 Nat]) 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - gcd_zero_right_spec_nat_2
    Statement: Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} ([mdata borrowed:1 Nat]) 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - gcd_zero_right_spec_nat_3
    Statement: Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (OfNat.ofNat.{0} ([mdata borrowed:1 Nat]) 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - gcd_zero_right_spec_nat_4
    Statement: Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (OfNat.ofNat.{0} ([mdata borrowed:1 Nat]) 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - fib_one_on_succ_applied_to_nat_0
    Statement: Eq.{1} Nat 1 (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - fib_one_on_add1_applied_to_nat_0
    Statement: Eq.{1} Nat 1 (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - one_add_one_eq_two_on_succ_applied_to_nat_1
    Statement: Eq.{1} Nat 2 (Nat.succ (Nat.succ Nat.zero))
  - one_add_one_eq_two_on_add1_applied_to_nat_1
    Statement: Eq.{1} Nat 2 (Nat.succ (Nat.succ Nat.zero))
  - one_add_one_eq_two_on_add2_applied_to_nat_0
    Statement: Eq.{1} Nat 2 (Nat.succ (Nat.succ Nat.zero))
  - two_add_one_eq_three_on_num_3
    Statement: Eq.{1} Nat (Nat.succ (Nat.succ (Nat.succ Nat.zero))) (Nat.succ (Nat.succ (Nat.succ Nat.zero)))
  - two_add_one_eq_three_on_succ_applied_to_nat_2
    Statement: Eq.{1} Nat 3 (Nat.succ (Nat.succ (Nat.succ Nat.zero)))
  - two_add_one_eq_three_on_add1_applied_to_nat_2
    Statement: Eq.{1} Nat 3 (Nat.succ (Nat.succ (Nat.succ Nat.zero)))
  - two_add_one_eq_three_on_add2_applied_to_nat_1
    Statement: Eq.{1} Nat 3 (Nat.succ (Nat.succ (Nat.succ Nat.zero)))
  - add_zero_spec_nat_1_on_succ_applied_to_nat_0
    Statement: Eq.{1} Nat 1 (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - add_zero_spec_nat_1_on_add1_applied_to_nat_0
    Statement: Eq.{1} Nat 1 (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - add_zero_spec_nat_2_on_nat_2
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - add_zero_spec_nat_2_on_prime_2
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - add_zero_spec_nat_2_on_two
    Statement: Eq.{1} Nat (Nat.succ (Nat.succ Nat.zero)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - add_zero_spec_nat_2_on_succ_applied_to_nat_1
    Statement: Eq.{1} Nat 2 (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - add_zero_spec_nat_2_on_add1_applied_to_nat_1
    Statement: Eq.{1} Nat 2 (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - add_zero_spec_nat_2_on_add2_applied_to_nat_0
    Statement: Eq.{1} Nat 2 (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - add_zero_spec_nat_3_on_nat_3
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - add_zero_spec_nat_3_on_prime_3
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - add_zero_spec_nat_3_on_num_3
    Statement: Eq.{1} Nat (Nat.succ (Nat.succ (Nat.succ Nat.zero))) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - add_zero_spec_nat_3_on_succ_applied_to_nat_2
    Statement: Eq.{1} Nat 3 (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - add_zero_spec_nat_3_on_add1_applied_to_nat_2
    Statement: Eq.{1} Nat 3 (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - add_zero_spec_nat_3_on_add2_applied_to_nat_1
    Statement: Eq.{1} Nat 3 (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - add_zero_spec_nat_4_on_nat_4
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - add_zero_spec_nat_4_on_succ_applied_to_nat_3
    Statement: Eq.{1} Nat 4 (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - add_zero_spec_nat_4_on_add1_applied_to_nat_3
    Statement: Eq.{1} Nat 4 (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - add_zero_spec_nat_4_on_add2_applied_to_nat_2
    Statement: Eq.{1} Nat 4 (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - zero_add_spec_nat_1_on_succ_applied_to_nat_0
    Statement: Eq.{1} Nat 1 (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - zero_add_spec_nat_1_on_add1_applied_to_nat_0
    Statement: Eq.{1} Nat 1 (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - zero_add_spec_nat_2_on_nat_2
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - zero_add_spec_nat_2_on_prime_2
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - zero_add_spec_nat_2_on_two
    Statement: Eq.{1} Nat (Nat.succ (Nat.succ Nat.zero)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - zero_add_spec_nat_2_on_succ_applied_to_nat_1
    Statement: Eq.{1} Nat 2 (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - zero_add_spec_nat_2_on_add1_applied_to_nat_1
    Statement: Eq.{1} Nat 2 (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - zero_add_spec_nat_2_on_add2_applied_to_nat_0
    Statement: Eq.{1} Nat 2 (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - zero_add_spec_nat_3_on_nat_3
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - zero_add_spec_nat_3_on_prime_3
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - zero_add_spec_nat_3_on_num_3
    Statement: Eq.{1} Nat (Nat.succ (Nat.succ (Nat.succ Nat.zero))) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - zero_add_spec_nat_3_on_succ_applied_to_nat_2
    Statement: Eq.{1} Nat 3 (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - zero_add_spec_nat_3_on_add1_applied_to_nat_2
    Statement: Eq.{1} Nat 3 (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - zero_add_spec_nat_3_on_add2_applied_to_nat_1
    Statement: Eq.{1} Nat 3 (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - zero_add_spec_nat_4_on_nat_4
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - zero_add_spec_nat_4_on_succ_applied_to_nat_3
    Statement: Eq.{1} Nat 4 (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - zero_add_spec_nat_4_on_add1_applied_to_nat_3
    Statement: Eq.{1} Nat 4 (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - zero_add_spec_nat_4_on_add2_applied_to_nat_2
    Statement: Eq.{1} Nat 4 (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - mul_one_spec_nat_1_on_succ_applied_to_nat_0
    Statement: Eq.{1} Nat 1 (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - mul_one_spec_nat_1_on_add1_applied_to_nat_0
    Statement: Eq.{1} Nat 1 (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - mul_one_spec_nat_2_on_nat_2
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - mul_one_spec_nat_2_on_prime_2
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - mul_one_spec_nat_2_on_two
    Statement: Eq.{1} Nat (Nat.succ (Nat.succ Nat.zero)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))

================================================================================
=== ITERATION 3 COMPLETE ===
Total Concepts: 667 (+132 new)
Patterns: 13
Conjectures: 191
Theorems: 252
Top Concepts:
  - nat_49 (score: 1.000000)
  - add_assoc (score: 1.000000)
  - add_comm (score: 1.000000)
  - add_zero (score: 1.000000)
  - zero_add (score: 1.000000)
  - mul_assoc (score: 1.000000)
  - mul_comm (score: 1.000000)
  - mul_one (score: 1.000000)
  - one_mul (score: 1.000000)
  - mul_zero (score: 1.000000)
Generation Methods:
  seed: 9
  application: 54
  specialization: 140
  pattern_recognition: 5
  composition: 60
  lemma_application: 61
All Patterns (13):
  - natural_number_sequence: Sequence: 0, 1, 2, ... (natural numbers via successor)
  - variation_add_assoc: Variation pattern based on theorem add_assoc
  - variation_add_comm: Variation pattern based on theorem add_comm
  - variation_add_zero: Variation pattern based on theorem add_zero
  - succ_iteration_pattern: Repeated application of succ
  - add_iteration_pattern: Repeated application of add
  - add1_iteration_pattern: Repeated application of add1
  - add2_iteration_pattern: Repeated application of add2
  - meta_pattern_application_successful: Meta-pattern: application has been successful (20 concepts)
  - meta_pattern_composition_successful: Meta-pattern: composition has been successful (6 concepts)
  - meta_pattern_specialization_successful: Meta-pattern: specialization has been successful (50 concepts)
  - revived_natural_number_sequence: Revived: Sequence: 0, 1, 2, ... (natural numbers via successor)
  - revived_variation_add_assoc: Revived: Variation pattern based on theorem add_assoc
All Conjectures (191):
  - function_lemma_for_zero_add_zero
    Statement: Eq.{1} Nat (Nat.add Nat.zero Nat.zero)
  - function_lemma_for_one_add_one_eq_two
    Statement: Eq.{1} Nat (Nat.add (Nat.succ Nat.zero) (Nat.succ Nat.zero))
  - function_lemma_for_two_add_one_eq_three
    Statement: Eq.{1} Nat (Nat.add (Nat.succ (Nat.succ Nat.zero)) (Nat.succ Nat.zero))
  - add_comp_succ_eq_0
    Statement: Eq.{1} Nat (Nat.add (Nat.succ Nat.zero)) (Nat.add Nat.zero)
  - add_comp_succ_eq_1
    Statement: Eq.{1} Nat (Nat.add (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - add_comp_succ_eq_2
    Statement: Eq.{1} Nat (Nat.add (Nat.succ Nat.zero)) Nat.zero
  - add_comp_succ_eq_3
    Statement: Eq.{1} Nat (Nat.add (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - add_comp_add1_eq_0
    Statement: Eq.{1} Nat (Nat.add ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.add Nat.zero)
  - add_comp_add1_eq_1
    Statement: Eq.{1} Nat (Nat.add ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)
  - add_comp_add1_eq_2
    Statement: Eq.{1} Nat (Nat.add ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) Nat.zero
  - add_comp_add1_eq_3
    Statement: Eq.{1} Nat (Nat.add ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.succ Nat.zero)
  - add_comp_add2_eq_0
    Statement: Eq.{1} Nat (Nat.add ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.add Nat.zero)
  - add_comp_add2_eq_1
    Statement: Eq.{1} Nat (Nat.add ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)
  - add_comp_add2_eq_2
    Statement: Eq.{1} Nat (Nat.add ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) Nat.zero
  - add_comp_add2_eq_3
    Statement: Eq.{1} Nat (Nat.add ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.succ Nat.zero)
  - mul_comp_succ_eq_0
    Statement: Eq.{1} Nat (Nat.mul (Nat.succ Nat.zero)) (Nat.mul Nat.zero)
  - mul_comp_succ_eq_1
    Statement: Eq.{1} Nat (Nat.mul (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - mul_comp_succ_eq_2
    Statement: Eq.{1} Nat (Nat.mul (Nat.succ Nat.zero)) Nat.zero
  - mul_comp_succ_eq_3
    Statement: Eq.{1} Nat (Nat.mul (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - mul_comp_add1_eq_0
    Statement: Eq.{1} Nat (Nat.mul ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.mul Nat.zero)
  - mul_comp_add1_eq_1
    Statement: Eq.{1} Nat (Nat.mul ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)
  - mul_comp_add1_eq_2
    Statement: Eq.{1} Nat (Nat.mul ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) Nat.zero
  - mul_comp_add1_eq_3
    Statement: Eq.{1} Nat (Nat.mul ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.succ Nat.zero)
  - mul_comp_add2_eq_0
    Statement: Eq.{1} Nat (Nat.mul ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.mul Nat.zero)
  - mul_comp_add2_eq_1
    Statement: Eq.{1} Nat (Nat.mul ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)
  - mul_comp_add2_eq_2
    Statement: Eq.{1} Nat (Nat.mul ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) Nat.zero
  - mul_comp_add2_eq_3
    Statement: Eq.{1} Nat (Nat.mul ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.succ Nat.zero)
  - sub_comp_succ_eq_0
    Statement: Eq.{1} Nat (Nat.sub (Nat.succ Nat.zero)) (Nat.sub Nat.zero)
  - sub_comp_succ_eq_1
    Statement: Eq.{1} Nat (Nat.sub (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - sub_comp_succ_eq_2
    Statement: Eq.{1} Nat (Nat.sub (Nat.succ Nat.zero)) Nat.zero
  - sub_comp_succ_eq_3
    Statement: Eq.{1} Nat (Nat.sub (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - sub_comp_add1_eq_0
    Statement: Eq.{1} Nat (Nat.sub ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.sub Nat.zero)
  - sub_comp_add1_eq_1
    Statement: Eq.{1} Nat (Nat.sub ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)
  - sub_comp_add1_eq_2
    Statement: Eq.{1} Nat (Nat.sub ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) Nat.zero
  - sub_comp_add1_eq_3
    Statement: Eq.{1} Nat (Nat.sub ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.succ Nat.zero)
  - sub_comp_add2_eq_0
    Statement: Eq.{1} Nat (Nat.sub ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.sub Nat.zero)
  - sub_comp_add2_eq_1
    Statement: Eq.{1} Nat (Nat.sub ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)
  - sub_comp_add2_eq_2
    Statement: Eq.{1} Nat (Nat.sub ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) Nat.zero
  - sub_comp_add2_eq_3
    Statement: Eq.{1} Nat (Nat.sub ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.succ Nat.zero)
  - mod_comp_succ_eq_0
    Statement: Eq.{1} Nat (Nat.mod (Nat.succ Nat.zero)) (Nat.mod Nat.zero)
  - mod_comp_succ_eq_1
    Statement: Eq.{1} Nat (Nat.mod (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - mod_comp_succ_eq_2
    Statement: Eq.{1} Nat (Nat.mod (Nat.succ Nat.zero)) Nat.zero
  - mod_comp_succ_eq_3
    Statement: Eq.{1} Nat (Nat.mod (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - mod_comp_add1_eq_0
    Statement: Eq.{1} Nat (Nat.mod ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.mod Nat.zero)
  - mod_comp_add1_eq_1
    Statement: Eq.{1} Nat (Nat.mod ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)
  - mod_comp_add1_eq_2
    Statement: Eq.{1} Nat (Nat.mod ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) Nat.zero
  - mod_comp_add1_eq_3
    Statement: Eq.{1} Nat (Nat.mod ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.succ Nat.zero)
  - mod_comp_add2_eq_0
    Statement: Eq.{1} Nat (Nat.mod ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.mod Nat.zero)
  - mod_comp_add2_eq_1
    Statement: Eq.{1} Nat (Nat.mod ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)
  - mod_comp_add2_eq_2
    Statement: Eq.{1} Nat (Nat.mod ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) Nat.zero
  - mod_comp_add2_eq_3
    Statement: Eq.{1} Nat (Nat.mod ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.succ Nat.zero)
  - gcd_comp_succ_eq_0
    Statement: Eq.{1} Nat (Nat.gcd (Nat.succ Nat.zero)) (Nat.gcd Nat.zero)
  - gcd_comp_succ_eq_1
    Statement: Eq.{1} Nat (Nat.gcd (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - gcd_comp_succ_eq_2
    Statement: Eq.{1} Nat (Nat.gcd (Nat.succ Nat.zero)) Nat.zero
  - gcd_comp_succ_eq_3
    Statement: Eq.{1} Nat (Nat.gcd (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - gcd_comp_add1_eq_0
    Statement: Eq.{1} Nat (Nat.gcd ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.gcd Nat.zero)
  - gcd_comp_add1_eq_1
    Statement: Eq.{1} Nat (Nat.gcd ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)
  - gcd_comp_add1_eq_2
    Statement: Eq.{1} Nat (Nat.gcd ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) Nat.zero
  - gcd_comp_add1_eq_3
    Statement: Eq.{1} Nat (Nat.gcd ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.succ Nat.zero)
  - gcd_comp_add2_eq_0
    Statement: Eq.{1} Nat (Nat.gcd ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.gcd Nat.zero)
  - gcd_comp_add2_eq_1
    Statement: Eq.{1} Nat (Nat.gcd ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)
  - gcd_comp_add2_eq_2
    Statement: Eq.{1} Nat (Nat.gcd ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) Nat.zero
  - gcd_comp_add2_eq_3
    Statement: Eq.{1} Nat (Nat.gcd ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.succ Nat.zero)
  - lcm_comp_succ_eq_0
    Statement: Eq.{1} Nat (Nat.lcm (Nat.succ Nat.zero)) (Nat.lcm Nat.zero)
  - lcm_comp_succ_eq_1
    Statement: Eq.{1} Nat (Nat.lcm (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - lcm_comp_succ_eq_2
    Statement: Eq.{1} Nat (Nat.lcm (Nat.succ Nat.zero)) Nat.zero
  - lcm_comp_succ_eq_3
    Statement: Eq.{1} Nat (Nat.lcm (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - lcm_comp_add1_eq_0
    Statement: Eq.{1} Nat (Nat.lcm ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.lcm Nat.zero)
  - lcm_comp_add1_eq_1
    Statement: Eq.{1} Nat (Nat.lcm ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)
  - lcm_comp_add1_eq_2
    Statement: Eq.{1} Nat (Nat.lcm ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) Nat.zero
  - lcm_comp_add1_eq_3
    Statement: Eq.{1} Nat (Nat.lcm ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.succ Nat.zero)
  - lcm_comp_add2_eq_0
    Statement: Eq.{1} Nat (Nat.lcm ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.lcm Nat.zero)
  - lcm_comp_add2_eq_1
    Statement: Eq.{1} Nat (Nat.lcm ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)
  - lcm_comp_add2_eq_2
    Statement: Eq.{1} Nat (Nat.lcm ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) Nat.zero
  - lcm_comp_add2_eq_3
    Statement: Eq.{1} Nat (Nat.lcm ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.succ Nat.zero)
  - succ_comp_add1_eq_0
    Statement: Eq.{1} Nat (Nat.succ ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.succ Nat.zero)
  - succ_comp_add1_eq_1
    Statement: Eq.{1} Nat (Nat.succ ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)
  - succ_comp_add1_eq_2
    Statement: Eq.{1} Nat (Nat.succ ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) Nat.zero
  - succ_comp_add1_eq_3
    Statement: Eq.{1} Nat (Nat.succ ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.succ Nat.zero)
  - succ_comp_add2_eq_0
    Statement: Eq.{1} Nat (Nat.succ ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.succ Nat.zero)
  - succ_comp_add2_eq_1
    Statement: Eq.{1} Nat (Nat.succ ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)
  - succ_comp_add2_eq_2
    Statement: Eq.{1} Nat (Nat.succ ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) Nat.zero
  - succ_comp_add2_eq_3
    Statement: Eq.{1} Nat (Nat.succ ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.succ Nat.zero)
  - add1_comp_succ_eq_0
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) (Nat.succ Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)
  - add1_comp_succ_eq_1
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - add1_comp_succ_eq_2
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) (Nat.succ Nat.zero)) Nat.zero
  - add1_comp_succ_eq_3
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - add1_comp_add2_eq_0
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)
  - add1_comp_add2_eq_1
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)
  - add1_comp_add2_eq_2
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) Nat.zero
  - add1_comp_add2_eq_3
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.succ Nat.zero)
  - add2_comp_succ_eq_0
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) (Nat.succ Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)
  - add2_comp_succ_eq_1
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - add2_comp_succ_eq_2
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) (Nat.succ Nat.zero)) Nat.zero
  - add2_comp_succ_eq_3
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - add2_comp_add1_eq_0
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)
  - add2_comp_add1_eq_1
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)
  - add2_comp_add1_eq_2
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) Nat.zero
  - add2_comp_add1_eq_3
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.succ Nat.zero)
  - succ_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat (Nat.succ Nat.zero) (Nat.succ (Nat.succ Nat.zero))
  - add1_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) (Nat.succ Nat.zero))
  - add2_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) (Nat.succ Nat.zero))
  - succ_compose_add1_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 1 x)) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 1 x)) (Nat.succ Nat.zero))
  - cross_apply_zero_add_zero_to_zero
    Statement: True
  - cross_apply_zero_add_zero_to_succ
    Statement: True
  - cross_apply_zero_add_zero_to_one
    Statement: True
  - cross_apply_zero_add_zero_to_two
    Statement: True
  - cross_apply_zero_add_zero_to_add
    Statement: True
  - cross_apply_one_add_one_eq_two_to_zero
    Statement: True
  - cross_apply_one_add_one_eq_two_to_succ
    Statement: True
  - cross_apply_one_add_one_eq_two_to_one
    Statement: True
  - cross_apply_one_add_one_eq_two_to_two
    Statement: True
  - cross_apply_one_add_one_eq_two_to_add
    Statement: True
  - cross_apply_two_add_one_eq_three_to_zero
    Statement: True
  - cross_apply_two_add_one_eq_three_to_succ
    Statement: True
  - cross_apply_two_add_one_eq_three_to_one
    Statement: True
  - cross_apply_two_add_one_eq_three_to_two
    Statement: True
  - cross_apply_two_add_one_eq_three_to_add
    Statement: True
  - extension_zero_add_zero
    Statement: True
  - extension_one_add_one_eq_two
    Statement: True
  - extension_two_add_one_eq_three
    Statement: True
  - lemma_for_cross_apply_zero_add_zero_to_zero
    Statement: True
  - inverse_cross_apply_zero_add_zero_to_zero
    Statement: True
  - lemma_for_cross_apply_zero_add_zero_to_succ
    Statement: True
  - inverse_cross_apply_zero_add_zero_to_succ
    Statement: True
  - lemma_for_cross_apply_zero_add_zero_to_one
    Statement: True
  - inverse_cross_apply_zero_add_zero_to_one
    Statement: True
  - lemma_for_cross_apply_zero_add_zero_to_two
    Statement: True
  - inverse_cross_apply_zero_add_zero_to_two
    Statement: True
  - lemma_for_cross_apply_zero_add_zero_to_add
    Statement: True
  - inverse_cross_apply_zero_add_zero_to_add
    Statement: True
  - succ_compose_add2_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 2 x)) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 2 x)) (Nat.succ Nat.zero))
  - add1_compose_succ_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 1 x)) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 1 x)) (Nat.succ Nat.zero))
  - add1_compose_add2_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add 1 (Nat.add 2 x)) Nat.zero) ((fun (x : Nat) => Nat.add 1 (Nat.add 2 x)) (Nat.succ Nat.zero))
  - add2_compose_succ_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 2 x)) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 2 x)) (Nat.succ Nat.zero))
  - add2_compose_add1_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add 2 (Nat.add 1 x)) Nat.zero) ((fun (x : Nat) => Nat.add 2 (Nat.add 1 x)) (Nat.succ Nat.zero))
  - succ_compose_succ_compose_add1_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 1 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 1 x))) (Nat.succ Nat.zero))
  - succ_compose_succ_compose_add2_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 2 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 2 x))) (Nat.succ Nat.zero))
  - succ_compose_add1_compose_succ_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 1 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 1 x))) (Nat.succ Nat.zero))
  - succ_compose_add1_compose_add2_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 2 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 2 x))) (Nat.succ Nat.zero))
  - succ_compose_add2_compose_succ_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 2 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 2 x))) (Nat.succ Nat.zero))
  - succ_compose_add2_compose_add1_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 2 (Nat.add 1 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 2 (Nat.add 1 x))) (Nat.succ Nat.zero))
  - add1_compose_succ_compose_add1_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 1 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 1 x))) (Nat.succ Nat.zero))
  - add1_compose_succ_compose_add2_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 2 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 2 x))) (Nat.succ Nat.zero))
  - add1_compose_add1_compose_succ_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 1 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 1 x))) (Nat.succ Nat.zero))
  - add1_compose_add1_compose_add2_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add 1 (Nat.add 1 (Nat.add 2 x))) Nat.zero) ((fun (x : Nat) => Nat.add 1 (Nat.add 1 (Nat.add 2 x))) (Nat.succ Nat.zero))
  - add1_compose_add2_compose_succ_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 2 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 2 x))) (Nat.succ Nat.zero))
  - add1_compose_add2_compose_add1_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add 1 (Nat.add 2 (Nat.add 1 x))) Nat.zero) ((fun (x : Nat) => Nat.add 1 (Nat.add 2 (Nat.add 1 x))) (Nat.succ Nat.zero))
  - add2_compose_succ_compose_add1_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 2 (Nat.add 1 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 2 (Nat.add 1 x))) (Nat.succ Nat.zero))
  - add2_compose_succ_compose_add2_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 2 (Nat.add 2 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 2 (Nat.add 2 x))) (Nat.succ Nat.zero))
  - add2_compose_add1_compose_succ_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 2 (Nat.add 1 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 2 (Nat.add 1 x))) (Nat.succ Nat.zero))
  - add2_compose_add1_compose_add2_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add 2 (Nat.add 1 (Nat.add 2 x))) Nat.zero) ((fun (x : Nat) => Nat.add 2 (Nat.add 1 (Nat.add 2 x))) (Nat.succ Nat.zero))
  - add2_compose_add2_compose_succ_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 2 (Nat.add 2 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 2 (Nat.add 2 x))) (Nat.succ Nat.zero))
  - add2_compose_add2_compose_add1_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add 2 (Nat.add 2 (Nat.add 1 x))) Nat.zero) ((fun (x : Nat) => Nat.add 2 (Nat.add 2 (Nat.add 1 x))) (Nat.succ Nat.zero))
  - succ_compose_add1_compose_succ_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 1 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 1 x))) (Nat.succ Nat.zero))
  - succ_compose_add1_compose_add1_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 1 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 1 x))) (Nat.succ Nat.zero))
  - succ_compose_add1_compose_add2_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 2 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 2 x))) (Nat.succ Nat.zero))
  - succ_compose_add1_compose_succ_compose_add2_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 1 (Nat.add 2 x)))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 1 (Nat.add 2 x)))) (Nat.succ Nat.zero))
  - succ_compose_add1_compose_add1_compose_succ_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 1 (Nat.add 1 x)))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 1 (Nat.add 1 x)))) (Nat.succ Nat.zero))
  - succ_compose_add1_compose_add1_compose_add2_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 1 (Nat.add 2 x)))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 1 (Nat.add 2 x)))) (Nat.succ Nat.zero))
  - succ_compose_add1_compose_add2_compose_succ_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 1 (Nat.add 2 x)))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 1 (Nat.add 2 x)))) (Nat.succ Nat.zero))
  - succ_compose_add1_compose_add2_compose_add1_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 2 (Nat.add 1 x)))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 2 (Nat.add 1 x)))) (Nat.succ Nat.zero))
  - succ_compose_add2_compose_succ_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 2 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 2 x))) (Nat.succ Nat.zero))
  - succ_compose_add2_compose_add1_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 2 (Nat.add 1 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 2 (Nat.add 1 x))) (Nat.succ Nat.zero))
  - succ_compose_add2_compose_add2_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 2 (Nat.add 2 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 2 (Nat.add 2 x))) (Nat.succ Nat.zero))
  - succ_compose_add2_compose_succ_compose_add1_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 2 (Nat.add 1 x)))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 2 (Nat.add 1 x)))) (Nat.succ Nat.zero))
  - succ_compose_add2_compose_add1_compose_succ_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 2 (Nat.add 1 x)))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 2 (Nat.add 1 x)))) (Nat.succ Nat.zero))
  - succ_compose_add2_compose_add1_compose_add2_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 2 (Nat.add 1 (Nat.add 2 x)))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 2 (Nat.add 1 (Nat.add 2 x)))) (Nat.succ Nat.zero))
  - succ_compose_add2_compose_add2_compose_succ_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 2 (Nat.add 2 x)))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 2 (Nat.add 2 x)))) (Nat.succ Nat.zero))
  - succ_compose_add2_compose_add2_compose_add1_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 2 (Nat.add 2 (Nat.add 1 x)))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 2 (Nat.add 2 (Nat.add 1 x)))) (Nat.succ Nat.zero))
  - add1_compose_succ_compose_succ_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 1 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 1 x))) (Nat.succ Nat.zero))
  - add1_compose_succ_compose_add1_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 1 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 1 x))) (Nat.succ Nat.zero))
  - add1_compose_succ_compose_add2_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 2 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 2 x))) (Nat.succ Nat.zero))
  - add1_compose_succ_compose_succ_compose_add1_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 1 (Nat.add 1 x)))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 1 (Nat.add 1 x)))) (Nat.succ Nat.zero))
  - add1_compose_succ_compose_succ_compose_add2_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 1 (Nat.add 2 x)))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 1 (Nat.add 2 x)))) (Nat.succ Nat.zero))
  - add1_compose_succ_compose_add1_compose_add2_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 1 (Nat.add 2 x)))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 1 (Nat.add 2 x)))) (Nat.succ Nat.zero))
  - add1_compose_succ_compose_add2_compose_succ_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 1 (Nat.add 2 x)))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 1 (Nat.add 2 x)))) (Nat.succ Nat.zero))
  - add1_compose_succ_compose_add2_compose_add1_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 2 (Nat.add 1 x)))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 2 (Nat.add 1 x)))) (Nat.succ Nat.zero))
  - add1_compose_add2_compose_succ_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 2 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 2 x))) (Nat.succ Nat.zero))
  - add1_compose_add2_compose_add1_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add 1 (Nat.add 2 (Nat.add 1 x))) Nat.zero) ((fun (x : Nat) => Nat.add 1 (Nat.add 2 (Nat.add 1 x))) (Nat.succ Nat.zero))
  - add1_compose_add2_compose_add2_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add 1 (Nat.add 2 (Nat.add 2 x))) Nat.zero) ((fun (x : Nat) => Nat.add 1 (Nat.add 2 (Nat.add 2 x))) (Nat.succ Nat.zero))
  - cross_apply_one_add_one_eq_two_on_succ_applied_to_nat_1_to_zero
    Statement: True
  - cross_apply_one_add_one_eq_two_on_succ_applied_to_nat_1_to_succ
    Statement: True
  - cross_apply_one_add_one_eq_two_on_succ_applied_to_nat_1_to_one
    Statement: True
  - cross_apply_one_add_one_eq_two_on_succ_applied_to_nat_1_to_two
    Statement: True
  - cross_apply_one_add_one_eq_two_on_succ_applied_to_nat_1_to_add
    Statement: True
  - cross_apply_one_add_one_eq_two_on_add1_applied_to_nat_1_to_zero
    Statement: True
  - cross_apply_one_add_one_eq_two_on_add1_applied_to_nat_1_to_succ
    Statement: True
  - cross_apply_one_add_one_eq_two_on_add1_applied_to_nat_1_to_one
    Statement: True
  - cross_apply_one_add_one_eq_two_on_add1_applied_to_nat_1_to_two
    Statement: True
  - cross_apply_one_add_one_eq_two_on_add1_applied_to_nat_1_to_add
    Statement: True
All Theorems (252):
  - add_assoc
    Statement: forall (n : Nat) (m : Nat) (k : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n m) k) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m k))
  - add_comm
    Statement: forall (n : Nat) (m : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n m) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m n)
  - add_zero
    Statement: forall (n : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) n
  - zero_add
    Statement: forall (n : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) n) n
  - mul_assoc
    Statement: forall (n : Nat) (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n m) k) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m k))
  - mul_comm
    Statement: forall (n : Nat) (m : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n m) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m n)
  - mul_one
    Statement: forall (n : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) n
  - one_mul
    Statement: forall (n : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) n) n
  - mul_zero
    Statement: forall (n : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - zero_mul
    Statement: forall (n : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) n) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - left_distrib
    Statement: forall (n : Nat) (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m k)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n m) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n k))
  - right_distrib
    Statement: forall (n : Nat) (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n m) k) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n k) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m k))
  - dvd_refl
    Statement: forall (a : Nat), Dvd.dvd.{0} Nat Nat.instDvd a a
  - dvd_trans
    Statement: forall {a : Nat} {b : Nat} {c : Nat}, (Dvd.dvd.{0} Nat Nat.instDvd a b) -> (Dvd.dvd.{0} Nat Nat.instDvd b c) -> (Dvd.dvd.{0} Nat Nat.instDvd a c)
  - dvd_add
    Statement: forall {a : Nat} {b : Nat} {c : Nat}, (Dvd.dvd.{0} Nat Nat.instDvd a b) -> (Dvd.dvd.{0} Nat Nat.instDvd a c) -> (Dvd.dvd.{0} Nat Nat.instDvd a (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) b c))
  - dvd_mul
    Statement: forall {k : Nat} {m : Nat} {n : Nat}, Iff (Dvd.dvd.{0} Nat Nat.instDvd k (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m n)) (Exists.{1} Nat (fun (k₁ : Nat) => Exists.{1} Nat (fun (k₂ : Nat) => And (Dvd.dvd.{0} Nat Nat.instDvd k₁ m) (And (Dvd.dvd.{0} Nat Nat.instDvd k₂ n) (Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) k₁ k₂) k)))))
  - gcd_comm
    Statement: forall (m : Nat) (n : Nat), Eq.{1} Nat (Nat.gcd m n) (Nat.gcd n m)
  - gcd_assoc
    Statement: forall (m : Nat) (n : Nat) (k : Nat), Eq.{1} Nat (Nat.gcd (Nat.gcd m n) k) (Nat.gcd m (Nat.gcd n k))
  - gcd_zero_left
    Statement: forall (y : Nat), Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} ([mdata borrowed:1 Nat]) 0 (instOfNatNat 0)) y) y
  - gcd_zero_right
    Statement: forall (n : Nat), Eq.{1} Nat (Nat.gcd n (OfNat.ofNat.{0} ([mdata borrowed:1 Nat]) 0 (instOfNatNat 0))) n
  - lcm_comm
    Statement: forall (m : Nat) (n : Nat), Eq.{1} Nat (Nat.lcm m n) (Nat.lcm n m)
  - lcm_assoc
    Statement: forall (m : Nat) (n : Nat) (k : Nat), Eq.{1} Nat (Nat.lcm (Nat.lcm m n) k) (Nat.lcm m (Nat.lcm n k))
  - prime_def
    Statement: forall {p : Nat}, Iff (Nat.Prime p) (And (LE.le.{0} Nat instLENat (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) p) (forall (m : Nat), (Dvd.dvd.{0} Nat Nat.instDvd m p) -> (Or (Eq.{1} Nat m (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (Eq.{1} Nat m p))))
  - prime_two
    Statement: Nat.Prime (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - prime_three
    Statement: Nat.Prime (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - prime_five
    Statement: Nat.Prime (OfNat.ofNat.{0} Nat 5 (instOfNatNat 5))
  - prime_seven
    Statement: Nat.Prime (OfNat.ofNat.{0} Nat 7 (instOfNatNat 7))
  - mod_mod
    Statement: forall (a : Nat) (n : Nat), Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) a n) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) a n)
  - add_mod
    Statement: forall (a : Nat) (b : Nat) (n : Nat), Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) a b) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) a n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) b n)) n)
  - mul_mod
    Statement: forall (a : Nat) (b : Nat) (n : Nat), Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) a b) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) a n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) b n)) n)
  - mod_two_eq_zero_or_one
    Statement: forall (n : Nat), Or (Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) n (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) n (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))
  - fib_zero
    Statement: Eq.{1} Nat (Nat.fib (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - fib_one
    Statement: Eq.{1} Nat (Nat.fib (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - fib_add
    Statement: forall (m : Nat) (n : Nat), Eq.{1} Nat (Nat.fib (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m n) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (Nat.fib m) (Nat.fib n)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (Nat.fib (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Nat.fib (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))))
  - zero_eq_zero
    Statement: Eq.{1} Nat Nat.zero Nat.zero
  - add_comm
    Statement: forall (n : Nat) (m : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n m) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m n)
  - zero_add_zero
    Statement: Eq.{1} Nat (Nat.add Nat.zero Nat.zero) Nat.zero
  - one_add_one_eq_two
    Statement: Eq.{1} Nat (Nat.add (Nat.succ Nat.zero) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ Nat.zero))
  - two_add_one_eq_three
    Statement: Eq.{1} Nat (Nat.add (Nat.succ (Nat.succ Nat.zero)) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ (Nat.succ Nat.zero)))
  - add_assoc_spec_nat_0
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) m) k) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m k))
  - add_assoc_spec_nat_1
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) m) k) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m k))
  - add_assoc_spec_nat_2
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) m) k) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m k))
  - add_assoc_spec_nat_3
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) m) k) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m k))
  - add_assoc_spec_nat_4
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) m) k) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m k))
  - add_comm_spec_nat_0
    Statement: forall (m : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) m) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)))
  - add_comm_spec_nat_1
    Statement: forall (m : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) m) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))
  - add_comm_spec_nat_2
    Statement: forall (m : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) m) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)))
  - add_comm_spec_nat_3
    Statement: forall (m : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) m) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)))
  - add_comm_spec_nat_4
    Statement: forall (m : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) m) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)))
  - add_zero_spec_nat_0
    Statement: Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - add_zero_spec_nat_1
    Statement: Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - add_zero_spec_nat_2
    Statement: Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - add_zero_spec_nat_3
    Statement: Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - add_zero_spec_nat_4
    Statement: Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - zero_add_spec_nat_0
    Statement: Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - zero_add_spec_nat_1
    Statement: Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - zero_add_spec_nat_2
    Statement: Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - zero_add_spec_nat_3
    Statement: Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - zero_add_spec_nat_4
    Statement: Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - mul_assoc_spec_nat_0
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) m) k) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m k))
  - mul_assoc_spec_nat_1
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) m) k) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m k))
  - mul_assoc_spec_nat_2
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) m) k) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m k))
  - mul_assoc_spec_nat_3
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) m) k) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m k))
  - mul_assoc_spec_nat_4
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) m) k) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m k))
  - mul_comm_spec_nat_0
    Statement: forall (m : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) m) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)))
  - mul_comm_spec_nat_1
    Statement: forall (m : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) m) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))
  - mul_comm_spec_nat_2
    Statement: forall (m : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) m) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)))
  - mul_comm_spec_nat_3
    Statement: forall (m : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) m) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)))
  - mul_comm_spec_nat_4
    Statement: forall (m : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) m) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)))
  - mul_one_spec_nat_0
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - mul_one_spec_nat_1
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - mul_one_spec_nat_2
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - mul_one_spec_nat_3
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - mul_one_spec_nat_4
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - one_mul_spec_nat_0
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - one_mul_spec_nat_1
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - one_mul_spec_nat_2
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - one_mul_spec_nat_3
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - one_mul_spec_nat_4
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - mul_zero_spec_nat_0
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - mul_zero_spec_nat_1
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - mul_zero_spec_nat_2
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - mul_zero_spec_nat_3
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - mul_zero_spec_nat_4
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - zero_mul_spec_nat_0
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - zero_mul_spec_nat_1
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - zero_mul_spec_nat_2
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - zero_mul_spec_nat_3
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - zero_mul_spec_nat_4
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - fib_zero_on_nat_0
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - fib_zero_on_zero
    Statement: Eq.{1} Nat Nat.zero (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - fib_one_on_nat_1
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - fib_one_on_one
    Statement: Eq.{1} Nat (Nat.succ Nat.zero) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - zero_eq_zero_on_nat_0
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) Nat.zero
  - zero_add_zero_on_nat_0
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) Nat.zero
  - one_add_one_eq_two_on_nat_2
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (Nat.succ (Nat.succ Nat.zero))
  - one_add_one_eq_two_on_prime_2
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (Nat.succ (Nat.succ Nat.zero))
  - one_add_one_eq_two_on_two
    Statement: Eq.{1} Nat (Nat.succ (Nat.succ Nat.zero)) (Nat.succ (Nat.succ Nat.zero))
  - two_add_one_eq_three_on_nat_3
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (Nat.succ (Nat.succ (Nat.succ Nat.zero)))
  - two_add_one_eq_three_on_prime_3
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (Nat.succ (Nat.succ (Nat.succ Nat.zero)))
  - intermediate_for_zero_add_zero_via_add
    Statement: Eq.{1} Nat (Nat.add Nat.zero Nat.zero) Nat.zero
  - intermediate_for_zero_add_zero_via_zero
    Statement: Eq.{1} Nat (Nat.add Nat.zero Nat.zero) Nat.zero
  - dual_of_zero_add_zero
    Statement: Eq.{1} Nat (Nat.add Nat.zero Nat.zero) Nat.zero
  - intermediate_for_one_add_one_eq_two_via_add
    Statement: Eq.{1} Nat (Nat.add (Nat.succ Nat.zero) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ Nat.zero))
  - intermediate_for_one_add_one_eq_two_via_one
    Statement: Eq.{1} Nat (Nat.add (Nat.succ Nat.zero) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ Nat.zero))
  - intermediate_for_one_add_one_eq_two_via_two
    Statement: Eq.{1} Nat (Nat.add (Nat.succ Nat.zero) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ Nat.zero))
  - dual_of_one_add_one_eq_two
    Statement: Eq.{1} Nat (Nat.add (Nat.succ Nat.zero) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ Nat.zero))
  - intermediate_for_two_add_one_eq_three_via_add
    Statement: Eq.{1} Nat (Nat.add (Nat.succ (Nat.succ Nat.zero)) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ (Nat.succ Nat.zero)))
  - intermediate_for_two_add_one_eq_three_via_two
    Statement: Eq.{1} Nat (Nat.add (Nat.succ (Nat.succ Nat.zero)) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ (Nat.succ Nat.zero)))
  - intermediate_for_two_add_one_eq_three_via_one
    Statement: Eq.{1} Nat (Nat.add (Nat.succ (Nat.succ Nat.zero)) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ (Nat.succ Nat.zero)))
  - intermediate_for_two_add_one_eq_three_via_succ
    Statement: Eq.{1} Nat (Nat.add (Nat.succ (Nat.succ Nat.zero)) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ (Nat.succ Nat.zero)))
  - dual_of_two_add_one_eq_three
    Statement: Eq.{1} Nat (Nat.add (Nat.succ (Nat.succ Nat.zero)) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ (Nat.succ Nat.zero)))
  - left_distrib_spec_nat_0
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m k)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) m) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) k))
  - left_distrib_spec_nat_1
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m k)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) m) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) k))
  - left_distrib_spec_nat_2
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m k)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) m) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) k))
  - left_distrib_spec_nat_3
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m k)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) m) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) k))
  - left_distrib_spec_nat_4
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m k)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) m) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) k))
  - right_distrib_spec_nat_0
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) m) k) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) k) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m k))
  - right_distrib_spec_nat_1
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) m) k) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) k) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m k))
  - right_distrib_spec_nat_2
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) m) k) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) k) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m k))
  - right_distrib_spec_nat_3
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) m) k) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) k) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m k))
  - right_distrib_spec_nat_4
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) m) k) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) k) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m k))
  - dvd_refl_spec_nat_0
    Statement: Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - dvd_refl_spec_nat_1
    Statement: Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - dvd_refl_spec_nat_2
    Statement: Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - dvd_refl_spec_nat_3
    Statement: Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - dvd_refl_spec_nat_4
    Statement: Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - dvd_trans_spec_nat_0
    Statement: forall {b : Nat} {c : Nat}, (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) b) -> (Dvd.dvd.{0} Nat Nat.instDvd b c) -> (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) c)
  - dvd_trans_spec_nat_1
    Statement: forall {b : Nat} {c : Nat}, (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) b) -> (Dvd.dvd.{0} Nat Nat.instDvd b c) -> (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) c)
  - dvd_trans_spec_nat_2
    Statement: forall {b : Nat} {c : Nat}, (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) b) -> (Dvd.dvd.{0} Nat Nat.instDvd b c) -> (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) c)
  - dvd_trans_spec_nat_3
    Statement: forall {b : Nat} {c : Nat}, (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) b) -> (Dvd.dvd.{0} Nat Nat.instDvd b c) -> (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) c)
  - dvd_trans_spec_nat_4
    Statement: forall {b : Nat} {c : Nat}, (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) b) -> (Dvd.dvd.{0} Nat Nat.instDvd b c) -> (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) c)
  - dvd_add_spec_nat_0
    Statement: forall {b : Nat} {c : Nat}, (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) b) -> (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) c) -> (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) b c))
  - dvd_add_spec_nat_1
    Statement: forall {b : Nat} {c : Nat}, (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) b) -> (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) c) -> (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) b c))
  - dvd_add_spec_nat_2
    Statement: forall {b : Nat} {c : Nat}, (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) b) -> (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) c) -> (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) b c))
  - dvd_add_spec_nat_3
    Statement: forall {b : Nat} {c : Nat}, (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) b) -> (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) c) -> (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) b c))
  - dvd_add_spec_nat_4
    Statement: forall {b : Nat} {c : Nat}, (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) b) -> (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) c) -> (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) b c))
  - dvd_mul_spec_nat_0
    Statement: forall {m : Nat} {n : Nat}, Iff (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m n)) (Exists.{1} Nat (fun (k₁ : Nat) => Exists.{1} Nat (fun (k₂ : Nat) => And (Dvd.dvd.{0} Nat Nat.instDvd k₁ m) (And (Dvd.dvd.{0} Nat Nat.instDvd k₂ n) (Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) k₁ k₂) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)))))))
  - dvd_mul_spec_nat_1
    Statement: forall {m : Nat} {n : Nat}, Iff (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m n)) (Exists.{1} Nat (fun (k₁ : Nat) => Exists.{1} Nat (fun (k₂ : Nat) => And (Dvd.dvd.{0} Nat Nat.instDvd k₁ m) (And (Dvd.dvd.{0} Nat Nat.instDvd k₂ n) (Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) k₁ k₂) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))))))
  - dvd_mul_spec_nat_2
    Statement: forall {m : Nat} {n : Nat}, Iff (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m n)) (Exists.{1} Nat (fun (k₁ : Nat) => Exists.{1} Nat (fun (k₂ : Nat) => And (Dvd.dvd.{0} Nat Nat.instDvd k₁ m) (And (Dvd.dvd.{0} Nat Nat.instDvd k₂ n) (Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) k₁ k₂) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)))))))
  - dvd_mul_spec_nat_3
    Statement: forall {m : Nat} {n : Nat}, Iff (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m n)) (Exists.{1} Nat (fun (k₁ : Nat) => Exists.{1} Nat (fun (k₂ : Nat) => And (Dvd.dvd.{0} Nat Nat.instDvd k₁ m) (And (Dvd.dvd.{0} Nat Nat.instDvd k₂ n) (Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) k₁ k₂) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)))))))
  - dvd_mul_spec_nat_4
    Statement: forall {m : Nat} {n : Nat}, Iff (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m n)) (Exists.{1} Nat (fun (k₁ : Nat) => Exists.{1} Nat (fun (k₂ : Nat) => And (Dvd.dvd.{0} Nat Nat.instDvd k₁ m) (And (Dvd.dvd.{0} Nat Nat.instDvd k₂ n) (Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) k₁ k₂) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)))))))
  - gcd_comm_spec_nat_0
    Statement: forall (n : Nat), Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) n) (Nat.gcd n (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)))
  - gcd_comm_spec_nat_1
    Statement: forall (n : Nat), Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) n) (Nat.gcd n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))
  - gcd_comm_spec_nat_2
    Statement: forall (n : Nat), Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) n) (Nat.gcd n (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)))
  - gcd_comm_spec_nat_3
    Statement: forall (n : Nat), Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) n) (Nat.gcd n (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)))
  - gcd_comm_spec_nat_4
    Statement: forall (n : Nat), Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) n) (Nat.gcd n (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)))
  - gcd_assoc_spec_nat_0
    Statement: forall (n : Nat) (k : Nat), Eq.{1} Nat (Nat.gcd (Nat.gcd (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) n) k) (Nat.gcd (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (Nat.gcd n k))
  - gcd_assoc_spec_nat_1
    Statement: forall (n : Nat) (k : Nat), Eq.{1} Nat (Nat.gcd (Nat.gcd (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) n) k) (Nat.gcd (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (Nat.gcd n k))
  - gcd_assoc_spec_nat_2
    Statement: forall (n : Nat) (k : Nat), Eq.{1} Nat (Nat.gcd (Nat.gcd (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) n) k) (Nat.gcd (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (Nat.gcd n k))
  - gcd_assoc_spec_nat_3
    Statement: forall (n : Nat) (k : Nat), Eq.{1} Nat (Nat.gcd (Nat.gcd (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) n) k) (Nat.gcd (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (Nat.gcd n k))
  - gcd_assoc_spec_nat_4
    Statement: forall (n : Nat) (k : Nat), Eq.{1} Nat (Nat.gcd (Nat.gcd (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) n) k) (Nat.gcd (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (Nat.gcd n k))
  - gcd_zero_left_spec_nat_0
    Statement: Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} ([mdata borrowed:1 Nat]) 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - gcd_zero_left_spec_nat_1
    Statement: Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} ([mdata borrowed:1 Nat]) 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - gcd_zero_left_spec_nat_2
    Statement: Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} ([mdata borrowed:1 Nat]) 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - gcd_zero_left_spec_nat_3
    Statement: Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} ([mdata borrowed:1 Nat]) 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - gcd_zero_left_spec_nat_4
    Statement: Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} ([mdata borrowed:1 Nat]) 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - gcd_zero_right_spec_nat_0
    Statement: Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} ([mdata borrowed:1 Nat]) 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - gcd_zero_right_spec_nat_1
    Statement: Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} ([mdata borrowed:1 Nat]) 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - gcd_zero_right_spec_nat_2
    Statement: Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} ([mdata borrowed:1 Nat]) 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - gcd_zero_right_spec_nat_3
    Statement: Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (OfNat.ofNat.{0} ([mdata borrowed:1 Nat]) 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - gcd_zero_right_spec_nat_4
    Statement: Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (OfNat.ofNat.{0} ([mdata borrowed:1 Nat]) 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - fib_one_on_succ_applied_to_nat_0
    Statement: Eq.{1} Nat 1 (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - fib_one_on_add1_applied_to_nat_0
    Statement: Eq.{1} Nat 1 (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - one_add_one_eq_two_on_succ_applied_to_nat_1
    Statement: Eq.{1} Nat 2 (Nat.succ (Nat.succ Nat.zero))
  - one_add_one_eq_two_on_add1_applied_to_nat_1
    Statement: Eq.{1} Nat 2 (Nat.succ (Nat.succ Nat.zero))
  - one_add_one_eq_two_on_add2_applied_to_nat_0
    Statement: Eq.{1} Nat 2 (Nat.succ (Nat.succ Nat.zero))
  - two_add_one_eq_three_on_num_3
    Statement: Eq.{1} Nat (Nat.succ (Nat.succ (Nat.succ Nat.zero))) (Nat.succ (Nat.succ (Nat.succ Nat.zero)))
  - two_add_one_eq_three_on_succ_applied_to_nat_2
    Statement: Eq.{1} Nat 3 (Nat.succ (Nat.succ (Nat.succ Nat.zero)))
  - two_add_one_eq_three_on_add1_applied_to_nat_2
    Statement: Eq.{1} Nat 3 (Nat.succ (Nat.succ (Nat.succ Nat.zero)))
  - two_add_one_eq_three_on_add2_applied_to_nat_1
    Statement: Eq.{1} Nat 3 (Nat.succ (Nat.succ (Nat.succ Nat.zero)))
  - add_zero_spec_nat_1_on_succ_applied_to_nat_0
    Statement: Eq.{1} Nat 1 (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - add_zero_spec_nat_1_on_add1_applied_to_nat_0
    Statement: Eq.{1} Nat 1 (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - add_zero_spec_nat_2_on_nat_2
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - add_zero_spec_nat_2_on_prime_2
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - add_zero_spec_nat_2_on_two
    Statement: Eq.{1} Nat (Nat.succ (Nat.succ Nat.zero)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - add_zero_spec_nat_2_on_succ_applied_to_nat_1
    Statement: Eq.{1} Nat 2 (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - add_zero_spec_nat_2_on_add1_applied_to_nat_1
    Statement: Eq.{1} Nat 2 (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - add_zero_spec_nat_2_on_add2_applied_to_nat_0
    Statement: Eq.{1} Nat 2 (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - add_zero_spec_nat_3_on_nat_3
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - add_zero_spec_nat_3_on_prime_3
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - add_zero_spec_nat_3_on_num_3
    Statement: Eq.{1} Nat (Nat.succ (Nat.succ (Nat.succ Nat.zero))) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - add_zero_spec_nat_3_on_succ_applied_to_nat_2
    Statement: Eq.{1} Nat 3 (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - add_zero_spec_nat_3_on_add1_applied_to_nat_2
    Statement: Eq.{1} Nat 3 (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - add_zero_spec_nat_3_on_add2_applied_to_nat_1
    Statement: Eq.{1} Nat 3 (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - add_zero_spec_nat_4_on_nat_4
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - add_zero_spec_nat_4_on_succ_applied_to_nat_3
    Statement: Eq.{1} Nat 4 (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - add_zero_spec_nat_4_on_add1_applied_to_nat_3
    Statement: Eq.{1} Nat 4 (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - add_zero_spec_nat_4_on_add2_applied_to_nat_2
    Statement: Eq.{1} Nat 4 (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - zero_add_spec_nat_1_on_succ_applied_to_nat_0
    Statement: Eq.{1} Nat 1 (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - zero_add_spec_nat_1_on_add1_applied_to_nat_0
    Statement: Eq.{1} Nat 1 (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - zero_add_spec_nat_2_on_nat_2
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - zero_add_spec_nat_2_on_prime_2
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - zero_add_spec_nat_2_on_two
    Statement: Eq.{1} Nat (Nat.succ (Nat.succ Nat.zero)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - zero_add_spec_nat_2_on_succ_applied_to_nat_1
    Statement: Eq.{1} Nat 2 (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - zero_add_spec_nat_2_on_add1_applied_to_nat_1
    Statement: Eq.{1} Nat 2 (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - zero_add_spec_nat_2_on_add2_applied_to_nat_0
    Statement: Eq.{1} Nat 2 (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - zero_add_spec_nat_3_on_nat_3
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - zero_add_spec_nat_3_on_prime_3
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - zero_add_spec_nat_3_on_num_3
    Statement: Eq.{1} Nat (Nat.succ (Nat.succ (Nat.succ Nat.zero))) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - zero_add_spec_nat_3_on_succ_applied_to_nat_2
    Statement: Eq.{1} Nat 3 (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - zero_add_spec_nat_3_on_add1_applied_to_nat_2
    Statement: Eq.{1} Nat 3 (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - zero_add_spec_nat_3_on_add2_applied_to_nat_1
    Statement: Eq.{1} Nat 3 (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - zero_add_spec_nat_4_on_nat_4
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - zero_add_spec_nat_4_on_succ_applied_to_nat_3
    Statement: Eq.{1} Nat 4 (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - zero_add_spec_nat_4_on_add1_applied_to_nat_3
    Statement: Eq.{1} Nat 4 (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - zero_add_spec_nat_4_on_add2_applied_to_nat_2
    Statement: Eq.{1} Nat 4 (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - mul_one_spec_nat_1_on_succ_applied_to_nat_0
    Statement: Eq.{1} Nat 1 (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - mul_one_spec_nat_1_on_add1_applied_to_nat_0
    Statement: Eq.{1} Nat 1 (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - mul_one_spec_nat_2_on_nat_2
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - mul_one_spec_nat_2_on_prime_2
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - mul_one_spec_nat_2_on_two
    Statement: Eq.{1} Nat (Nat.succ (Nat.succ Nat.zero)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - lcm_comm_spec_nat_0
    Statement: forall (n : Nat), Eq.{1} Nat (Nat.lcm (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) n) (Nat.lcm n (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)))
  - lcm_comm_spec_nat_1
    Statement: forall (n : Nat), Eq.{1} Nat (Nat.lcm (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) n) (Nat.lcm n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))
  - lcm_comm_spec_nat_2
    Statement: forall (n : Nat), Eq.{1} Nat (Nat.lcm (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) n) (Nat.lcm n (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)))
  - lcm_comm_spec_nat_3
    Statement: forall (n : Nat), Eq.{1} Nat (Nat.lcm (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) n) (Nat.lcm n (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)))
  - lcm_comm_spec_nat_4
    Statement: forall (n : Nat), Eq.{1} Nat (Nat.lcm (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) n) (Nat.lcm n (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)))
  - lcm_assoc_spec_nat_0
    Statement: forall (n : Nat) (k : Nat), Eq.{1} Nat (Nat.lcm (Nat.lcm (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) n) k) (Nat.lcm (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (Nat.lcm n k))
  - lcm_assoc_spec_nat_1
    Statement: forall (n : Nat) (k : Nat), Eq.{1} Nat (Nat.lcm (Nat.lcm (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) n) k) (Nat.lcm (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (Nat.lcm n k))
  - lcm_assoc_spec_nat_2
    Statement: forall (n : Nat) (k : Nat), Eq.{1} Nat (Nat.lcm (Nat.lcm (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) n) k) (Nat.lcm (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (Nat.lcm n k))
  - lcm_assoc_spec_nat_3
    Statement: forall (n : Nat) (k : Nat), Eq.{1} Nat (Nat.lcm (Nat.lcm (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) n) k) (Nat.lcm (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (Nat.lcm n k))
  - lcm_assoc_spec_nat_4
    Statement: forall (n : Nat) (k : Nat), Eq.{1} Nat (Nat.lcm (Nat.lcm (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) n) k) (Nat.lcm (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (Nat.lcm n k))
  - prime_def_spec_nat_0
    Statement: Iff (Nat.Prime (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (And (LE.le.{0} Nat instLENat (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (forall (m : Nat), (Dvd.dvd.{0} Nat Nat.instDvd m (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) -> (Or (Eq.{1} Nat m (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (Eq.{1} Nat m (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))))))
  - prime_def_spec_nat_1
    Statement: Iff (Nat.Prime (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (And (LE.le.{0} Nat instLENat (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (forall (m : Nat), (Dvd.dvd.{0} Nat Nat.instDvd m (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) -> (Or (Eq.{1} Nat m (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (Eq.{1} Nat m (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))))
  - prime_def_spec_nat_2
    Statement: Iff (Nat.Prime (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (And (LE.le.{0} Nat instLENat (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (forall (m : Nat), (Dvd.dvd.{0} Nat Nat.instDvd m (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) -> (Or (Eq.{1} Nat m (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (Eq.{1} Nat m (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))))))
  - prime_def_spec_nat_3
    Statement: Iff (Nat.Prime (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))) (And (LE.le.{0} Nat instLENat (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))) (forall (m : Nat), (Dvd.dvd.{0} Nat Nat.instDvd m (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))) -> (Or (Eq.{1} Nat m (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (Eq.{1} Nat m (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))))))
  - prime_def_spec_nat_4
    Statement: Iff (Nat.Prime (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))) (And (LE.le.{0} Nat instLENat (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))) (forall (m : Nat), (Dvd.dvd.{0} Nat Nat.instDvd m (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))) -> (Or (Eq.{1} Nat m (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (Eq.{1} Nat m (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))))))
  - mod_mod_spec_nat_0
    Statement: forall (n : Nat), Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) n) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) n)
  - mod_mod_spec_nat_1
    Statement: forall (n : Nat), Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) n) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) n)
  - mod_mod_spec_nat_2
    Statement: forall (n : Nat), Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) n) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) n)
  - mod_mod_spec_nat_3
    Statement: forall (n : Nat), Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) n) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) n)
  - mod_mod_spec_nat_4
    Statement: forall (n : Nat), Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) n) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) n)
  - add_mod_spec_nat_0
    Statement: forall (b : Nat) (n : Nat), Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) b) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) b n)) n)
  - add_mod_spec_nat_1
    Statement: forall (b : Nat) (n : Nat), Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) b) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) b n)) n)
  - add_mod_spec_nat_2
    Statement: forall (b : Nat) (n : Nat), Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) b) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) b n)) n)
  - add_mod_spec_nat_3
    Statement: forall (b : Nat) (n : Nat), Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) b) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) b n)) n)
  - add_mod_spec_nat_4
    Statement: forall (b : Nat) (n : Nat), Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) b) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) b n)) n)
  - mul_mod_spec_nat_0
    Statement: forall (b : Nat) (n : Nat), Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) b) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) b n)) n)
  - mul_mod_spec_nat_1
    Statement: forall (b : Nat) (n : Nat), Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) b) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) b n)) n)
  - mul_mod_spec_nat_2
    Statement: forall (b : Nat) (n : Nat), Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) b) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) b n)) n)
  - mul_mod_spec_nat_3
    Statement: forall (b : Nat) (n : Nat), Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) b) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) b n)) n)
  - mul_mod_spec_nat_4
    Statement: forall (b : Nat) (n : Nat), Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) b) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) b n)) n)
  - mod_two_eq_zero_or_one_spec_nat_0
    Statement: Or (Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))
  - mod_two_eq_zero_or_one_spec_nat_1
    Statement: Or (Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))
  - mod_two_eq_zero_or_one_spec_nat_2
    Statement: Or (Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))
  - mod_two_eq_zero_or_one_spec_nat_3
    Statement: Or (Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))
  - mod_two_eq_zero_or_one_spec_nat_4
    Statement: Or (Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))
  - fib_add_spec_nat_0
    Statement: forall (n : Nat), Eq.{1} Nat (Nat.fib (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) n) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (Nat.fib (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (Nat.fib n)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (Nat.fib (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Nat.fib (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))))
  - fib_add_spec_nat_1
    Statement: forall (n : Nat), Eq.{1} Nat (Nat.fib (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) n) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (Nat.fib (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (Nat.fib n)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (Nat.fib (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Nat.fib (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))))
  - fib_add_spec_nat_2
    Statement: forall (n : Nat), Eq.{1} Nat (Nat.fib (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) n) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (Nat.fib (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (Nat.fib n)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (Nat.fib (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Nat.fib (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))))
  - fib_add_spec_nat_3
    Statement: forall (n : Nat), Eq.{1} Nat (Nat.fib (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) n) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (Nat.fib (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))) (Nat.fib n)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (Nat.fib (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Nat.fib (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))))
  - fib_add_spec_nat_4
    Statement: forall (n : Nat), Eq.{1} Nat (Nat.fib (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) n) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (Nat.fib (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))) (Nat.fib n)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (Nat.fib (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Nat.fib (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))))

================================================================================
=== ITERATION 4 COMPLETE ===
Total Concepts: 743 (+76 new)
Patterns: 13
Conjectures: 241
Theorems: 266
Top Concepts:
  - nat_49 (score: 1.000000)
  - add_assoc (score: 1.000000)
  - add_comm (score: 1.000000)
  - add_zero (score: 1.000000)
  - zero_add (score: 1.000000)
  - mul_assoc (score: 1.000000)
  - mul_comm (score: 1.000000)
  - mul_one (score: 1.000000)
  - one_mul (score: 1.000000)
  - mul_zero (score: 1.000000)
Generation Methods:
  seed: 9
  application: 66
  specialization: 140
  pattern_recognition: 5
  composition: 60
  lemma_application: 75
All Patterns (13):
  - natural_number_sequence: Sequence: 0, 1, 2, ... (natural numbers via successor)
  - variation_add_assoc: Variation pattern based on theorem add_assoc
  - variation_add_comm: Variation pattern based on theorem add_comm
  - variation_add_zero: Variation pattern based on theorem add_zero
  - succ_iteration_pattern: Repeated application of succ
  - add_iteration_pattern: Repeated application of add
  - add1_iteration_pattern: Repeated application of add1
  - add2_iteration_pattern: Repeated application of add2
  - meta_pattern_application_successful: Meta-pattern: application has been successful (20 concepts)
  - meta_pattern_composition_successful: Meta-pattern: composition has been successful (6 concepts)
  - meta_pattern_specialization_successful: Meta-pattern: specialization has been successful (50 concepts)
  - revived_natural_number_sequence: Revived: Sequence: 0, 1, 2, ... (natural numbers via successor)
  - revived_variation_add_assoc: Revived: Variation pattern based on theorem add_assoc
All Conjectures (241):
  - function_lemma_for_zero_add_zero
    Statement: Eq.{1} Nat (Nat.add Nat.zero Nat.zero)
  - function_lemma_for_one_add_one_eq_two
    Statement: Eq.{1} Nat (Nat.add (Nat.succ Nat.zero) (Nat.succ Nat.zero))
  - function_lemma_for_two_add_one_eq_three
    Statement: Eq.{1} Nat (Nat.add (Nat.succ (Nat.succ Nat.zero)) (Nat.succ Nat.zero))
  - add_comp_succ_eq_0
    Statement: Eq.{1} Nat (Nat.add (Nat.succ Nat.zero)) (Nat.add Nat.zero)
  - add_comp_succ_eq_1
    Statement: Eq.{1} Nat (Nat.add (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - add_comp_succ_eq_2
    Statement: Eq.{1} Nat (Nat.add (Nat.succ Nat.zero)) Nat.zero
  - add_comp_succ_eq_3
    Statement: Eq.{1} Nat (Nat.add (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - add_comp_add1_eq_0
    Statement: Eq.{1} Nat (Nat.add ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.add Nat.zero)
  - add_comp_add1_eq_1
    Statement: Eq.{1} Nat (Nat.add ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)
  - add_comp_add1_eq_2
    Statement: Eq.{1} Nat (Nat.add ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) Nat.zero
  - add_comp_add1_eq_3
    Statement: Eq.{1} Nat (Nat.add ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.succ Nat.zero)
  - add_comp_add2_eq_0
    Statement: Eq.{1} Nat (Nat.add ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.add Nat.zero)
  - add_comp_add2_eq_1
    Statement: Eq.{1} Nat (Nat.add ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)
  - add_comp_add2_eq_2
    Statement: Eq.{1} Nat (Nat.add ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) Nat.zero
  - add_comp_add2_eq_3
    Statement: Eq.{1} Nat (Nat.add ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.succ Nat.zero)
  - mul_comp_succ_eq_0
    Statement: Eq.{1} Nat (Nat.mul (Nat.succ Nat.zero)) (Nat.mul Nat.zero)
  - mul_comp_succ_eq_1
    Statement: Eq.{1} Nat (Nat.mul (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - mul_comp_succ_eq_2
    Statement: Eq.{1} Nat (Nat.mul (Nat.succ Nat.zero)) Nat.zero
  - mul_comp_succ_eq_3
    Statement: Eq.{1} Nat (Nat.mul (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - mul_comp_add1_eq_0
    Statement: Eq.{1} Nat (Nat.mul ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.mul Nat.zero)
  - mul_comp_add1_eq_1
    Statement: Eq.{1} Nat (Nat.mul ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)
  - mul_comp_add1_eq_2
    Statement: Eq.{1} Nat (Nat.mul ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) Nat.zero
  - mul_comp_add1_eq_3
    Statement: Eq.{1} Nat (Nat.mul ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.succ Nat.zero)
  - mul_comp_add2_eq_0
    Statement: Eq.{1} Nat (Nat.mul ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.mul Nat.zero)
  - mul_comp_add2_eq_1
    Statement: Eq.{1} Nat (Nat.mul ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)
  - mul_comp_add2_eq_2
    Statement: Eq.{1} Nat (Nat.mul ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) Nat.zero
  - mul_comp_add2_eq_3
    Statement: Eq.{1} Nat (Nat.mul ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.succ Nat.zero)
  - sub_comp_succ_eq_0
    Statement: Eq.{1} Nat (Nat.sub (Nat.succ Nat.zero)) (Nat.sub Nat.zero)
  - sub_comp_succ_eq_1
    Statement: Eq.{1} Nat (Nat.sub (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - sub_comp_succ_eq_2
    Statement: Eq.{1} Nat (Nat.sub (Nat.succ Nat.zero)) Nat.zero
  - sub_comp_succ_eq_3
    Statement: Eq.{1} Nat (Nat.sub (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - sub_comp_add1_eq_0
    Statement: Eq.{1} Nat (Nat.sub ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.sub Nat.zero)
  - sub_comp_add1_eq_1
    Statement: Eq.{1} Nat (Nat.sub ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)
  - sub_comp_add1_eq_2
    Statement: Eq.{1} Nat (Nat.sub ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) Nat.zero
  - sub_comp_add1_eq_3
    Statement: Eq.{1} Nat (Nat.sub ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.succ Nat.zero)
  - sub_comp_add2_eq_0
    Statement: Eq.{1} Nat (Nat.sub ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.sub Nat.zero)
  - sub_comp_add2_eq_1
    Statement: Eq.{1} Nat (Nat.sub ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)
  - sub_comp_add2_eq_2
    Statement: Eq.{1} Nat (Nat.sub ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) Nat.zero
  - sub_comp_add2_eq_3
    Statement: Eq.{1} Nat (Nat.sub ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.succ Nat.zero)
  - mod_comp_succ_eq_0
    Statement: Eq.{1} Nat (Nat.mod (Nat.succ Nat.zero)) (Nat.mod Nat.zero)
  - mod_comp_succ_eq_1
    Statement: Eq.{1} Nat (Nat.mod (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - mod_comp_succ_eq_2
    Statement: Eq.{1} Nat (Nat.mod (Nat.succ Nat.zero)) Nat.zero
  - mod_comp_succ_eq_3
    Statement: Eq.{1} Nat (Nat.mod (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - mod_comp_add1_eq_0
    Statement: Eq.{1} Nat (Nat.mod ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.mod Nat.zero)
  - mod_comp_add1_eq_1
    Statement: Eq.{1} Nat (Nat.mod ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)
  - mod_comp_add1_eq_2
    Statement: Eq.{1} Nat (Nat.mod ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) Nat.zero
  - mod_comp_add1_eq_3
    Statement: Eq.{1} Nat (Nat.mod ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.succ Nat.zero)
  - mod_comp_add2_eq_0
    Statement: Eq.{1} Nat (Nat.mod ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.mod Nat.zero)
  - mod_comp_add2_eq_1
    Statement: Eq.{1} Nat (Nat.mod ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)
  - mod_comp_add2_eq_2
    Statement: Eq.{1} Nat (Nat.mod ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) Nat.zero
  - mod_comp_add2_eq_3
    Statement: Eq.{1} Nat (Nat.mod ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.succ Nat.zero)
  - gcd_comp_succ_eq_0
    Statement: Eq.{1} Nat (Nat.gcd (Nat.succ Nat.zero)) (Nat.gcd Nat.zero)
  - gcd_comp_succ_eq_1
    Statement: Eq.{1} Nat (Nat.gcd (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - gcd_comp_succ_eq_2
    Statement: Eq.{1} Nat (Nat.gcd (Nat.succ Nat.zero)) Nat.zero
  - gcd_comp_succ_eq_3
    Statement: Eq.{1} Nat (Nat.gcd (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - gcd_comp_add1_eq_0
    Statement: Eq.{1} Nat (Nat.gcd ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.gcd Nat.zero)
  - gcd_comp_add1_eq_1
    Statement: Eq.{1} Nat (Nat.gcd ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)
  - gcd_comp_add1_eq_2
    Statement: Eq.{1} Nat (Nat.gcd ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) Nat.zero
  - gcd_comp_add1_eq_3
    Statement: Eq.{1} Nat (Nat.gcd ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.succ Nat.zero)
  - gcd_comp_add2_eq_0
    Statement: Eq.{1} Nat (Nat.gcd ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.gcd Nat.zero)
  - gcd_comp_add2_eq_1
    Statement: Eq.{1} Nat (Nat.gcd ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)
  - gcd_comp_add2_eq_2
    Statement: Eq.{1} Nat (Nat.gcd ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) Nat.zero
  - gcd_comp_add2_eq_3
    Statement: Eq.{1} Nat (Nat.gcd ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.succ Nat.zero)
  - lcm_comp_succ_eq_0
    Statement: Eq.{1} Nat (Nat.lcm (Nat.succ Nat.zero)) (Nat.lcm Nat.zero)
  - lcm_comp_succ_eq_1
    Statement: Eq.{1} Nat (Nat.lcm (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - lcm_comp_succ_eq_2
    Statement: Eq.{1} Nat (Nat.lcm (Nat.succ Nat.zero)) Nat.zero
  - lcm_comp_succ_eq_3
    Statement: Eq.{1} Nat (Nat.lcm (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - lcm_comp_add1_eq_0
    Statement: Eq.{1} Nat (Nat.lcm ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.lcm Nat.zero)
  - lcm_comp_add1_eq_1
    Statement: Eq.{1} Nat (Nat.lcm ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)
  - lcm_comp_add1_eq_2
    Statement: Eq.{1} Nat (Nat.lcm ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) Nat.zero
  - lcm_comp_add1_eq_3
    Statement: Eq.{1} Nat (Nat.lcm ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.succ Nat.zero)
  - lcm_comp_add2_eq_0
    Statement: Eq.{1} Nat (Nat.lcm ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.lcm Nat.zero)
  - lcm_comp_add2_eq_1
    Statement: Eq.{1} Nat (Nat.lcm ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)
  - lcm_comp_add2_eq_2
    Statement: Eq.{1} Nat (Nat.lcm ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) Nat.zero
  - lcm_comp_add2_eq_3
    Statement: Eq.{1} Nat (Nat.lcm ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.succ Nat.zero)
  - succ_comp_add1_eq_0
    Statement: Eq.{1} Nat (Nat.succ ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.succ Nat.zero)
  - succ_comp_add1_eq_1
    Statement: Eq.{1} Nat (Nat.succ ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)
  - succ_comp_add1_eq_2
    Statement: Eq.{1} Nat (Nat.succ ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) Nat.zero
  - succ_comp_add1_eq_3
    Statement: Eq.{1} Nat (Nat.succ ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.succ Nat.zero)
  - succ_comp_add2_eq_0
    Statement: Eq.{1} Nat (Nat.succ ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.succ Nat.zero)
  - succ_comp_add2_eq_1
    Statement: Eq.{1} Nat (Nat.succ ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)
  - succ_comp_add2_eq_2
    Statement: Eq.{1} Nat (Nat.succ ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) Nat.zero
  - succ_comp_add2_eq_3
    Statement: Eq.{1} Nat (Nat.succ ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.succ Nat.zero)
  - add1_comp_succ_eq_0
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) (Nat.succ Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)
  - add1_comp_succ_eq_1
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - add1_comp_succ_eq_2
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) (Nat.succ Nat.zero)) Nat.zero
  - add1_comp_succ_eq_3
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - add1_comp_add2_eq_0
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)
  - add1_comp_add2_eq_1
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)
  - add1_comp_add2_eq_2
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) Nat.zero
  - add1_comp_add2_eq_3
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)) (Nat.succ Nat.zero)
  - add2_comp_succ_eq_0
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) (Nat.succ Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)
  - add2_comp_succ_eq_1
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - add2_comp_succ_eq_2
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) (Nat.succ Nat.zero)) Nat.zero
  - add2_comp_succ_eq_3
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) (Nat.succ Nat.zero)) (Nat.succ Nat.zero)
  - add2_comp_add1_eq_0
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero)
  - add2_comp_add1_eq_1
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)
  - add2_comp_add1_eq_2
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) Nat.zero
  - add2_comp_add1_eq_3
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero)) (Nat.succ Nat.zero)
  - succ_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat (Nat.succ Nat.zero) (Nat.succ (Nat.succ Nat.zero))
  - add1_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) (Nat.succ Nat.zero))
  - add2_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) (Nat.succ Nat.zero))
  - succ_compose_add1_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 1 x)) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 1 x)) (Nat.succ Nat.zero))
  - cross_apply_zero_add_zero_to_zero
    Statement: True
  - cross_apply_zero_add_zero_to_succ
    Statement: True
  - cross_apply_zero_add_zero_to_one
    Statement: True
  - cross_apply_zero_add_zero_to_two
    Statement: True
  - cross_apply_zero_add_zero_to_add
    Statement: True
  - cross_apply_one_add_one_eq_two_to_zero
    Statement: True
  - cross_apply_one_add_one_eq_two_to_succ
    Statement: True
  - cross_apply_one_add_one_eq_two_to_one
    Statement: True
  - cross_apply_one_add_one_eq_two_to_two
    Statement: True
  - cross_apply_one_add_one_eq_two_to_add
    Statement: True
  - cross_apply_two_add_one_eq_three_to_zero
    Statement: True
  - cross_apply_two_add_one_eq_three_to_succ
    Statement: True
  - cross_apply_two_add_one_eq_three_to_one
    Statement: True
  - cross_apply_two_add_one_eq_three_to_two
    Statement: True
  - cross_apply_two_add_one_eq_three_to_add
    Statement: True
  - extension_zero_add_zero
    Statement: True
  - extension_one_add_one_eq_two
    Statement: True
  - extension_two_add_one_eq_three
    Statement: True
  - lemma_for_cross_apply_zero_add_zero_to_zero
    Statement: True
  - inverse_cross_apply_zero_add_zero_to_zero
    Statement: True
  - lemma_for_cross_apply_zero_add_zero_to_succ
    Statement: True
  - inverse_cross_apply_zero_add_zero_to_succ
    Statement: True
  - lemma_for_cross_apply_zero_add_zero_to_one
    Statement: True
  - inverse_cross_apply_zero_add_zero_to_one
    Statement: True
  - lemma_for_cross_apply_zero_add_zero_to_two
    Statement: True
  - inverse_cross_apply_zero_add_zero_to_two
    Statement: True
  - lemma_for_cross_apply_zero_add_zero_to_add
    Statement: True
  - inverse_cross_apply_zero_add_zero_to_add
    Statement: True
  - succ_compose_add2_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 2 x)) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 2 x)) (Nat.succ Nat.zero))
  - add1_compose_succ_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 1 x)) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 1 x)) (Nat.succ Nat.zero))
  - add1_compose_add2_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add 1 (Nat.add 2 x)) Nat.zero) ((fun (x : Nat) => Nat.add 1 (Nat.add 2 x)) (Nat.succ Nat.zero))
  - add2_compose_succ_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 2 x)) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 2 x)) (Nat.succ Nat.zero))
  - add2_compose_add1_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add 2 (Nat.add 1 x)) Nat.zero) ((fun (x : Nat) => Nat.add 2 (Nat.add 1 x)) (Nat.succ Nat.zero))
  - succ_compose_succ_compose_add1_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 1 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 1 x))) (Nat.succ Nat.zero))
  - succ_compose_succ_compose_add2_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 2 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 2 x))) (Nat.succ Nat.zero))
  - succ_compose_add1_compose_succ_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 1 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 1 x))) (Nat.succ Nat.zero))
  - succ_compose_add1_compose_add2_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 2 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 2 x))) (Nat.succ Nat.zero))
  - succ_compose_add2_compose_succ_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 2 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 2 x))) (Nat.succ Nat.zero))
  - succ_compose_add2_compose_add1_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 2 (Nat.add 1 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 2 (Nat.add 1 x))) (Nat.succ Nat.zero))
  - add1_compose_succ_compose_add1_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 1 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 1 x))) (Nat.succ Nat.zero))
  - add1_compose_succ_compose_add2_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 2 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 2 x))) (Nat.succ Nat.zero))
  - add1_compose_add1_compose_succ_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 1 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 1 x))) (Nat.succ Nat.zero))
  - add1_compose_add1_compose_add2_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add 1 (Nat.add 1 (Nat.add 2 x))) Nat.zero) ((fun (x : Nat) => Nat.add 1 (Nat.add 1 (Nat.add 2 x))) (Nat.succ Nat.zero))
  - add1_compose_add2_compose_succ_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 2 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 2 x))) (Nat.succ Nat.zero))
  - add1_compose_add2_compose_add1_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add 1 (Nat.add 2 (Nat.add 1 x))) Nat.zero) ((fun (x : Nat) => Nat.add 1 (Nat.add 2 (Nat.add 1 x))) (Nat.succ Nat.zero))
  - add2_compose_succ_compose_add1_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 2 (Nat.add 1 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 2 (Nat.add 1 x))) (Nat.succ Nat.zero))
  - add2_compose_succ_compose_add2_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 2 (Nat.add 2 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 2 (Nat.add 2 x))) (Nat.succ Nat.zero))
  - add2_compose_add1_compose_succ_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 2 (Nat.add 1 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 2 (Nat.add 1 x))) (Nat.succ Nat.zero))
  - add2_compose_add1_compose_add2_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add 2 (Nat.add 1 (Nat.add 2 x))) Nat.zero) ((fun (x : Nat) => Nat.add 2 (Nat.add 1 (Nat.add 2 x))) (Nat.succ Nat.zero))
  - add2_compose_add2_compose_succ_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 2 (Nat.add 2 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 2 (Nat.add 2 x))) (Nat.succ Nat.zero))
  - add2_compose_add2_compose_add1_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add 2 (Nat.add 2 (Nat.add 1 x))) Nat.zero) ((fun (x : Nat) => Nat.add 2 (Nat.add 2 (Nat.add 1 x))) (Nat.succ Nat.zero))
  - succ_compose_add1_compose_succ_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 1 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 1 x))) (Nat.succ Nat.zero))
  - succ_compose_add1_compose_add1_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 1 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 1 x))) (Nat.succ Nat.zero))
  - succ_compose_add1_compose_add2_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 2 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 2 x))) (Nat.succ Nat.zero))
  - succ_compose_add1_compose_succ_compose_add2_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 1 (Nat.add 2 x)))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 1 (Nat.add 2 x)))) (Nat.succ Nat.zero))
  - succ_compose_add1_compose_add1_compose_succ_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 1 (Nat.add 1 x)))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 1 (Nat.add 1 x)))) (Nat.succ Nat.zero))
  - succ_compose_add1_compose_add1_compose_add2_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 1 (Nat.add 2 x)))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 1 (Nat.add 2 x)))) (Nat.succ Nat.zero))
  - succ_compose_add1_compose_add2_compose_succ_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 1 (Nat.add 2 x)))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 1 (Nat.add 2 x)))) (Nat.succ Nat.zero))
  - succ_compose_add1_compose_add2_compose_add1_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 2 (Nat.add 1 x)))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 2 (Nat.add 1 x)))) (Nat.succ Nat.zero))
  - succ_compose_add2_compose_succ_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 2 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 2 x))) (Nat.succ Nat.zero))
  - succ_compose_add2_compose_add1_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 2 (Nat.add 1 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 2 (Nat.add 1 x))) (Nat.succ Nat.zero))
  - succ_compose_add2_compose_add2_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 2 (Nat.add 2 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 2 (Nat.add 2 x))) (Nat.succ Nat.zero))
  - succ_compose_add2_compose_succ_compose_add1_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 2 (Nat.add 1 x)))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 2 (Nat.add 1 x)))) (Nat.succ Nat.zero))
  - succ_compose_add2_compose_add1_compose_succ_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 2 (Nat.add 1 x)))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 2 (Nat.add 1 x)))) (Nat.succ Nat.zero))
  - succ_compose_add2_compose_add1_compose_add2_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 2 (Nat.add 1 (Nat.add 2 x)))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 2 (Nat.add 1 (Nat.add 2 x)))) (Nat.succ Nat.zero))
  - succ_compose_add2_compose_add2_compose_succ_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 2 (Nat.add 2 x)))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 2 (Nat.add 2 x)))) (Nat.succ Nat.zero))
  - succ_compose_add2_compose_add2_compose_add1_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 2 (Nat.add 2 (Nat.add 1 x)))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 2 (Nat.add 2 (Nat.add 1 x)))) (Nat.succ Nat.zero))
  - add1_compose_succ_compose_succ_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 1 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 1 x))) (Nat.succ Nat.zero))
  - add1_compose_succ_compose_add1_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 1 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 1 x))) (Nat.succ Nat.zero))
  - add1_compose_succ_compose_add2_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 2 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 2 x))) (Nat.succ Nat.zero))
  - add1_compose_succ_compose_succ_compose_add1_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 1 (Nat.add 1 x)))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 1 (Nat.add 1 x)))) (Nat.succ Nat.zero))
  - add1_compose_succ_compose_succ_compose_add2_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 1 (Nat.add 2 x)))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 1 (Nat.add 2 x)))) (Nat.succ Nat.zero))
  - add1_compose_succ_compose_add1_compose_add2_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 1 (Nat.add 2 x)))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 1 (Nat.add 2 x)))) (Nat.succ Nat.zero))
  - add1_compose_succ_compose_add2_compose_succ_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 1 (Nat.add 2 x)))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 1 (Nat.add 2 x)))) (Nat.succ Nat.zero))
  - add1_compose_succ_compose_add2_compose_add1_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 2 (Nat.add 1 x)))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 2 (Nat.add 1 x)))) (Nat.succ Nat.zero))
  - add1_compose_add2_compose_succ_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 2 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 2 x))) (Nat.succ Nat.zero))
  - add1_compose_add2_compose_add1_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add 1 (Nat.add 2 (Nat.add 1 x))) Nat.zero) ((fun (x : Nat) => Nat.add 1 (Nat.add 2 (Nat.add 1 x))) (Nat.succ Nat.zero))
  - add1_compose_add2_compose_add2_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add 1 (Nat.add 2 (Nat.add 2 x))) Nat.zero) ((fun (x : Nat) => Nat.add 1 (Nat.add 2 (Nat.add 2 x))) (Nat.succ Nat.zero))
  - cross_apply_one_add_one_eq_two_on_succ_applied_to_nat_1_to_zero
    Statement: True
  - cross_apply_one_add_one_eq_two_on_succ_applied_to_nat_1_to_succ
    Statement: True
  - cross_apply_one_add_one_eq_two_on_succ_applied_to_nat_1_to_one
    Statement: True
  - cross_apply_one_add_one_eq_two_on_succ_applied_to_nat_1_to_two
    Statement: True
  - cross_apply_one_add_one_eq_two_on_succ_applied_to_nat_1_to_add
    Statement: True
  - cross_apply_one_add_one_eq_two_on_add1_applied_to_nat_1_to_zero
    Statement: True
  - cross_apply_one_add_one_eq_two_on_add1_applied_to_nat_1_to_succ
    Statement: True
  - cross_apply_one_add_one_eq_two_on_add1_applied_to_nat_1_to_one
    Statement: True
  - cross_apply_one_add_one_eq_two_on_add1_applied_to_nat_1_to_two
    Statement: True
  - cross_apply_one_add_one_eq_two_on_add1_applied_to_nat_1_to_add
    Statement: True
  - add1_compose_add2_compose_succ_compose_add1_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 2 (Nat.add 1 x)))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 2 (Nat.add 1 x)))) (Nat.succ Nat.zero))
  - add1_compose_add2_compose_succ_compose_add2_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 2 (Nat.add 2 x)))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 2 (Nat.add 2 x)))) (Nat.succ Nat.zero))
  - add1_compose_add2_compose_add1_compose_succ_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 2 (Nat.add 1 x)))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 2 (Nat.add 1 x)))) (Nat.succ Nat.zero))
  - add1_compose_add2_compose_add2_compose_succ_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 2 (Nat.add 2 x)))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 2 (Nat.add 2 x)))) (Nat.succ Nat.zero))
  - add1_compose_add2_compose_add2_compose_add1_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add 1 (Nat.add 2 (Nat.add 2 (Nat.add 1 x)))) Nat.zero) ((fun (x : Nat) => Nat.add 1 (Nat.add 2 (Nat.add 2 (Nat.add 1 x)))) (Nat.succ Nat.zero))
  - add2_compose_add1_compose_add1_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add 2 (Nat.add 1 (Nat.add 1 x))) Nat.zero) ((fun (x : Nat) => Nat.add 2 (Nat.add 1 (Nat.add 1 x))) (Nat.succ Nat.zero))
  - add2_compose_add1_compose_succ_compose_add1_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 2 (Nat.add 1 (Nat.add 1 x)))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 2 (Nat.add 1 (Nat.add 1 x)))) (Nat.succ Nat.zero))
  - add2_compose_add1_compose_add1_compose_succ_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 2 (Nat.add 1 (Nat.add 1 x)))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 2 (Nat.add 1 (Nat.add 1 x)))) (Nat.succ Nat.zero))
  - add2_compose_add1_compose_add1_compose_add2_preserves_add_assoc_spec_nat_0_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add 2 (Nat.add 1 (Nat.add 1 (Nat.add 2 x)))) Nat.zero) ((fun (x : Nat) => Nat.add 2 (Nat.add 1 (Nat.add 1 (Nat.add 2 x)))) (Nat.succ Nat.zero))
  - succ_preserves_add_assoc_spec_nat_1_maybe
    Statement: Eq.{1} Nat (Nat.succ Nat.zero) (Nat.succ (Nat.succ Nat.zero))
  - add1_preserves_add_assoc_spec_nat_1_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) Nat.zero) ((fun (x : Nat) => Nat.add (Nat.succ Nat.zero) x) (Nat.succ Nat.zero))
  - add2_preserves_add_assoc_spec_nat_1_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) Nat.zero) ((fun (x : Nat) => Nat.add (Nat.succ (Nat.succ Nat.zero)) x) (Nat.succ Nat.zero))
  - succ_compose_add1_preserves_add_assoc_spec_nat_1_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 1 x)) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 1 x)) (Nat.succ Nat.zero))
  - succ_compose_add2_preserves_add_assoc_spec_nat_1_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 2 x)) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 2 x)) (Nat.succ Nat.zero))
  - add1_compose_succ_preserves_add_assoc_spec_nat_1_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 1 x)) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 1 x)) (Nat.succ Nat.zero))
  - add1_compose_add2_preserves_add_assoc_spec_nat_1_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add 1 (Nat.add 2 x)) Nat.zero) ((fun (x : Nat) => Nat.add 1 (Nat.add 2 x)) (Nat.succ Nat.zero))
  - add2_compose_succ_preserves_add_assoc_spec_nat_1_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 2 x)) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 2 x)) (Nat.succ Nat.zero))
  - add2_compose_add1_preserves_add_assoc_spec_nat_1_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add 2 (Nat.add 1 x)) Nat.zero) ((fun (x : Nat) => Nat.add 2 (Nat.add 1 x)) (Nat.succ Nat.zero))
  - succ_compose_succ_compose_add1_preserves_add_assoc_spec_nat_1_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 1 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 1 x))) (Nat.succ Nat.zero))
  - succ_compose_succ_compose_add2_preserves_add_assoc_spec_nat_1_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 2 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 2 x))) (Nat.succ Nat.zero))
  - succ_compose_add1_compose_succ_preserves_add_assoc_spec_nat_1_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 1 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 1 x))) (Nat.succ Nat.zero))
  - succ_compose_add1_compose_add2_preserves_add_assoc_spec_nat_1_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 2 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 2 x))) (Nat.succ Nat.zero))
  - succ_compose_add2_compose_succ_preserves_add_assoc_spec_nat_1_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 2 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 2 x))) (Nat.succ Nat.zero))
  - succ_compose_add2_compose_add1_preserves_add_assoc_spec_nat_1_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 2 (Nat.add 1 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 2 (Nat.add 1 x))) (Nat.succ Nat.zero))
  - add1_compose_succ_compose_add1_preserves_add_assoc_spec_nat_1_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 1 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 1 x))) (Nat.succ Nat.zero))
  - add1_compose_succ_compose_add2_preserves_add_assoc_spec_nat_1_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 2 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 2 x))) (Nat.succ Nat.zero))
  - add1_compose_add1_compose_succ_preserves_add_assoc_spec_nat_1_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 1 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 1 x))) (Nat.succ Nat.zero))
  - add1_compose_add1_compose_add2_preserves_add_assoc_spec_nat_1_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add 1 (Nat.add 1 (Nat.add 2 x))) Nat.zero) ((fun (x : Nat) => Nat.add 1 (Nat.add 1 (Nat.add 2 x))) (Nat.succ Nat.zero))
  - add1_compose_add2_compose_succ_preserves_add_assoc_spec_nat_1_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 2 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 2 x))) (Nat.succ Nat.zero))
  - add1_compose_add2_compose_add1_preserves_add_assoc_spec_nat_1_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add 1 (Nat.add 2 (Nat.add 1 x))) Nat.zero) ((fun (x : Nat) => Nat.add 1 (Nat.add 2 (Nat.add 1 x))) (Nat.succ Nat.zero))
  - add2_compose_succ_compose_add1_preserves_add_assoc_spec_nat_1_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 2 (Nat.add 1 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 2 (Nat.add 1 x))) (Nat.succ Nat.zero))
  - add2_compose_succ_compose_add2_preserves_add_assoc_spec_nat_1_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 2 (Nat.add 2 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 2 (Nat.add 2 x))) (Nat.succ Nat.zero))
  - add2_compose_add1_compose_succ_preserves_add_assoc_spec_nat_1_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 2 (Nat.add 1 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 2 (Nat.add 1 x))) (Nat.succ Nat.zero))
  - add2_compose_add1_compose_add2_preserves_add_assoc_spec_nat_1_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add 2 (Nat.add 1 (Nat.add 2 x))) Nat.zero) ((fun (x : Nat) => Nat.add 2 (Nat.add 1 (Nat.add 2 x))) (Nat.succ Nat.zero))
  - add2_compose_add2_compose_succ_preserves_add_assoc_spec_nat_1_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 2 (Nat.add 2 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 2 (Nat.add 2 x))) (Nat.succ Nat.zero))
  - add2_compose_add2_compose_add1_preserves_add_assoc_spec_nat_1_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.add 2 (Nat.add 2 (Nat.add 1 x))) Nat.zero) ((fun (x : Nat) => Nat.add 2 (Nat.add 2 (Nat.add 1 x))) (Nat.succ Nat.zero))
  - succ_compose_add1_compose_succ_preserves_add_assoc_spec_nat_1_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 1 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 1 x))) (Nat.succ Nat.zero))
  - succ_compose_add1_compose_add1_preserves_add_assoc_spec_nat_1_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 1 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 1 x))) (Nat.succ Nat.zero))
  - succ_compose_add1_compose_add2_preserves_add_assoc_spec_nat_1_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 2 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 2 x))) (Nat.succ Nat.zero))
  - succ_compose_add1_compose_succ_compose_add2_preserves_add_assoc_spec_nat_1_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 1 (Nat.add 2 x)))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 1 (Nat.add 2 x)))) (Nat.succ Nat.zero))
  - succ_compose_add1_compose_add1_compose_succ_preserves_add_assoc_spec_nat_1_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 1 (Nat.add 1 x)))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 1 (Nat.add 1 x)))) (Nat.succ Nat.zero))
  - succ_compose_add1_compose_add1_compose_add2_preserves_add_assoc_spec_nat_1_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 1 (Nat.add 2 x)))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 1 (Nat.add 2 x)))) (Nat.succ Nat.zero))
  - succ_compose_add1_compose_add2_compose_succ_preserves_add_assoc_spec_nat_1_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 1 (Nat.add 2 x)))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 1 (Nat.add 2 x)))) (Nat.succ Nat.zero))
  - succ_compose_add1_compose_add2_compose_add1_preserves_add_assoc_spec_nat_1_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 2 (Nat.add 1 x)))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 1 (Nat.add 2 (Nat.add 1 x)))) (Nat.succ Nat.zero))
  - succ_compose_add2_compose_succ_preserves_add_assoc_spec_nat_1_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 2 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 2 x))) (Nat.succ Nat.zero))
  - succ_compose_add2_compose_add1_preserves_add_assoc_spec_nat_1_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 2 (Nat.add 1 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 2 (Nat.add 1 x))) (Nat.succ Nat.zero))
  - succ_compose_add2_compose_add2_preserves_add_assoc_spec_nat_1_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 2 (Nat.add 2 x))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 2 (Nat.add 2 x))) (Nat.succ Nat.zero))
  - succ_compose_add2_compose_succ_compose_add1_preserves_add_assoc_spec_nat_1_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 2 (Nat.add 1 x)))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 2 (Nat.add 1 x)))) (Nat.succ Nat.zero))
  - succ_compose_add2_compose_add1_compose_succ_preserves_add_assoc_spec_nat_1_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 2 (Nat.add 1 x)))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.succ (Nat.add 2 (Nat.add 1 x)))) (Nat.succ Nat.zero))
  - succ_compose_add2_compose_add1_compose_add2_preserves_add_assoc_spec_nat_1_maybe
    Statement: Eq.{1} Nat ((fun (x : Nat) => Nat.succ (Nat.add 2 (Nat.add 1 (Nat.add 2 x)))) Nat.zero) ((fun (x : Nat) => Nat.succ (Nat.add 2 (Nat.add 1 (Nat.add 2 x)))) (Nat.succ Nat.zero))
All Theorems (266):
  - add_assoc
    Statement: forall (n : Nat) (m : Nat) (k : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n m) k) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m k))
  - add_comm
    Statement: forall (n : Nat) (m : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n m) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m n)
  - add_zero
    Statement: forall (n : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) n
  - zero_add
    Statement: forall (n : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) n) n
  - mul_assoc
    Statement: forall (n : Nat) (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n m) k) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m k))
  - mul_comm
    Statement: forall (n : Nat) (m : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n m) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m n)
  - mul_one
    Statement: forall (n : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) n
  - one_mul
    Statement: forall (n : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) n) n
  - mul_zero
    Statement: forall (n : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - zero_mul
    Statement: forall (n : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) n) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - left_distrib
    Statement: forall (n : Nat) (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m k)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n m) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n k))
  - right_distrib
    Statement: forall (n : Nat) (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n m) k) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) n k) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m k))
  - dvd_refl
    Statement: forall (a : Nat), Dvd.dvd.{0} Nat Nat.instDvd a a
  - dvd_trans
    Statement: forall {a : Nat} {b : Nat} {c : Nat}, (Dvd.dvd.{0} Nat Nat.instDvd a b) -> (Dvd.dvd.{0} Nat Nat.instDvd b c) -> (Dvd.dvd.{0} Nat Nat.instDvd a c)
  - dvd_add
    Statement: forall {a : Nat} {b : Nat} {c : Nat}, (Dvd.dvd.{0} Nat Nat.instDvd a b) -> (Dvd.dvd.{0} Nat Nat.instDvd a c) -> (Dvd.dvd.{0} Nat Nat.instDvd a (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) b c))
  - dvd_mul
    Statement: forall {k : Nat} {m : Nat} {n : Nat}, Iff (Dvd.dvd.{0} Nat Nat.instDvd k (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m n)) (Exists.{1} Nat (fun (k₁ : Nat) => Exists.{1} Nat (fun (k₂ : Nat) => And (Dvd.dvd.{0} Nat Nat.instDvd k₁ m) (And (Dvd.dvd.{0} Nat Nat.instDvd k₂ n) (Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) k₁ k₂) k)))))
  - gcd_comm
    Statement: forall (m : Nat) (n : Nat), Eq.{1} Nat (Nat.gcd m n) (Nat.gcd n m)
  - gcd_assoc
    Statement: forall (m : Nat) (n : Nat) (k : Nat), Eq.{1} Nat (Nat.gcd (Nat.gcd m n) k) (Nat.gcd m (Nat.gcd n k))
  - gcd_zero_left
    Statement: forall (y : Nat), Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} ([mdata borrowed:1 Nat]) 0 (instOfNatNat 0)) y) y
  - gcd_zero_right
    Statement: forall (n : Nat), Eq.{1} Nat (Nat.gcd n (OfNat.ofNat.{0} ([mdata borrowed:1 Nat]) 0 (instOfNatNat 0))) n
  - lcm_comm
    Statement: forall (m : Nat) (n : Nat), Eq.{1} Nat (Nat.lcm m n) (Nat.lcm n m)
  - lcm_assoc
    Statement: forall (m : Nat) (n : Nat) (k : Nat), Eq.{1} Nat (Nat.lcm (Nat.lcm m n) k) (Nat.lcm m (Nat.lcm n k))
  - prime_def
    Statement: forall {p : Nat}, Iff (Nat.Prime p) (And (LE.le.{0} Nat instLENat (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) p) (forall (m : Nat), (Dvd.dvd.{0} Nat Nat.instDvd m p) -> (Or (Eq.{1} Nat m (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (Eq.{1} Nat m p))))
  - prime_two
    Statement: Nat.Prime (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - prime_three
    Statement: Nat.Prime (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - prime_five
    Statement: Nat.Prime (OfNat.ofNat.{0} Nat 5 (instOfNatNat 5))
  - prime_seven
    Statement: Nat.Prime (OfNat.ofNat.{0} Nat 7 (instOfNatNat 7))
  - mod_mod
    Statement: forall (a : Nat) (n : Nat), Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) a n) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) a n)
  - add_mod
    Statement: forall (a : Nat) (b : Nat) (n : Nat), Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) a b) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) a n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) b n)) n)
  - mul_mod
    Statement: forall (a : Nat) (b : Nat) (n : Nat), Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) a b) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) a n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) b n)) n)
  - mod_two_eq_zero_or_one
    Statement: forall (n : Nat), Or (Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) n (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) n (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))
  - fib_zero
    Statement: Eq.{1} Nat (Nat.fib (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - fib_one
    Statement: Eq.{1} Nat (Nat.fib (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - fib_add
    Statement: forall (m : Nat) (n : Nat), Eq.{1} Nat (Nat.fib (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m n) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (Nat.fib m) (Nat.fib n)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (Nat.fib (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Nat.fib (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))))
  - zero_eq_zero
    Statement: Eq.{1} Nat Nat.zero Nat.zero
  - add_comm
    Statement: forall (n : Nat) (m : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n m) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m n)
  - zero_add_zero
    Statement: Eq.{1} Nat (Nat.add Nat.zero Nat.zero) Nat.zero
  - one_add_one_eq_two
    Statement: Eq.{1} Nat (Nat.add (Nat.succ Nat.zero) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ Nat.zero))
  - two_add_one_eq_three
    Statement: Eq.{1} Nat (Nat.add (Nat.succ (Nat.succ Nat.zero)) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ (Nat.succ Nat.zero)))
  - add_assoc_spec_nat_0
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) m) k) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m k))
  - add_assoc_spec_nat_1
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) m) k) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m k))
  - add_assoc_spec_nat_2
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) m) k) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m k))
  - add_assoc_spec_nat_3
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) m) k) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m k))
  - add_assoc_spec_nat_4
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) m) k) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m k))
  - add_comm_spec_nat_0
    Statement: forall (m : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) m) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)))
  - add_comm_spec_nat_1
    Statement: forall (m : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) m) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))
  - add_comm_spec_nat_2
    Statement: forall (m : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) m) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)))
  - add_comm_spec_nat_3
    Statement: forall (m : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) m) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)))
  - add_comm_spec_nat_4
    Statement: forall (m : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) m) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)))
  - add_zero_spec_nat_0
    Statement: Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - add_zero_spec_nat_1
    Statement: Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - add_zero_spec_nat_2
    Statement: Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - add_zero_spec_nat_3
    Statement: Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - add_zero_spec_nat_4
    Statement: Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - zero_add_spec_nat_0
    Statement: Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - zero_add_spec_nat_1
    Statement: Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - zero_add_spec_nat_2
    Statement: Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - zero_add_spec_nat_3
    Statement: Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - zero_add_spec_nat_4
    Statement: Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - mul_assoc_spec_nat_0
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) m) k) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m k))
  - mul_assoc_spec_nat_1
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) m) k) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m k))
  - mul_assoc_spec_nat_2
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) m) k) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m k))
  - mul_assoc_spec_nat_3
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) m) k) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m k))
  - mul_assoc_spec_nat_4
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) m) k) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m k))
  - mul_comm_spec_nat_0
    Statement: forall (m : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) m) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)))
  - mul_comm_spec_nat_1
    Statement: forall (m : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) m) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))
  - mul_comm_spec_nat_2
    Statement: forall (m : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) m) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)))
  - mul_comm_spec_nat_3
    Statement: forall (m : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) m) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)))
  - mul_comm_spec_nat_4
    Statement: forall (m : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) m) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)))
  - mul_one_spec_nat_0
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - mul_one_spec_nat_1
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - mul_one_spec_nat_2
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - mul_one_spec_nat_3
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - mul_one_spec_nat_4
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - one_mul_spec_nat_0
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - one_mul_spec_nat_1
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - one_mul_spec_nat_2
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - one_mul_spec_nat_3
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - one_mul_spec_nat_4
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - mul_zero_spec_nat_0
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - mul_zero_spec_nat_1
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - mul_zero_spec_nat_2
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - mul_zero_spec_nat_3
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - mul_zero_spec_nat_4
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - zero_mul_spec_nat_0
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - zero_mul_spec_nat_1
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - zero_mul_spec_nat_2
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - zero_mul_spec_nat_3
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - zero_mul_spec_nat_4
    Statement: Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - fib_zero_on_nat_0
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - fib_zero_on_zero
    Statement: Eq.{1} Nat Nat.zero (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - fib_one_on_nat_1
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - fib_one_on_one
    Statement: Eq.{1} Nat (Nat.succ Nat.zero) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - zero_eq_zero_on_nat_0
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) Nat.zero
  - zero_add_zero_on_nat_0
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) Nat.zero
  - one_add_one_eq_two_on_nat_2
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (Nat.succ (Nat.succ Nat.zero))
  - one_add_one_eq_two_on_prime_2
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (Nat.succ (Nat.succ Nat.zero))
  - one_add_one_eq_two_on_two
    Statement: Eq.{1} Nat (Nat.succ (Nat.succ Nat.zero)) (Nat.succ (Nat.succ Nat.zero))
  - two_add_one_eq_three_on_nat_3
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (Nat.succ (Nat.succ (Nat.succ Nat.zero)))
  - two_add_one_eq_three_on_prime_3
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (Nat.succ (Nat.succ (Nat.succ Nat.zero)))
  - intermediate_for_zero_add_zero_via_add
    Statement: Eq.{1} Nat (Nat.add Nat.zero Nat.zero) Nat.zero
  - intermediate_for_zero_add_zero_via_zero
    Statement: Eq.{1} Nat (Nat.add Nat.zero Nat.zero) Nat.zero
  - dual_of_zero_add_zero
    Statement: Eq.{1} Nat (Nat.add Nat.zero Nat.zero) Nat.zero
  - intermediate_for_one_add_one_eq_two_via_add
    Statement: Eq.{1} Nat (Nat.add (Nat.succ Nat.zero) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ Nat.zero))
  - intermediate_for_one_add_one_eq_two_via_one
    Statement: Eq.{1} Nat (Nat.add (Nat.succ Nat.zero) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ Nat.zero))
  - intermediate_for_one_add_one_eq_two_via_two
    Statement: Eq.{1} Nat (Nat.add (Nat.succ Nat.zero) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ Nat.zero))
  - dual_of_one_add_one_eq_two
    Statement: Eq.{1} Nat (Nat.add (Nat.succ Nat.zero) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ Nat.zero))
  - intermediate_for_two_add_one_eq_three_via_add
    Statement: Eq.{1} Nat (Nat.add (Nat.succ (Nat.succ Nat.zero)) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ (Nat.succ Nat.zero)))
  - intermediate_for_two_add_one_eq_three_via_two
    Statement: Eq.{1} Nat (Nat.add (Nat.succ (Nat.succ Nat.zero)) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ (Nat.succ Nat.zero)))
  - intermediate_for_two_add_one_eq_three_via_one
    Statement: Eq.{1} Nat (Nat.add (Nat.succ (Nat.succ Nat.zero)) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ (Nat.succ Nat.zero)))
  - intermediate_for_two_add_one_eq_three_via_succ
    Statement: Eq.{1} Nat (Nat.add (Nat.succ (Nat.succ Nat.zero)) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ (Nat.succ Nat.zero)))
  - dual_of_two_add_one_eq_three
    Statement: Eq.{1} Nat (Nat.add (Nat.succ (Nat.succ Nat.zero)) (Nat.succ Nat.zero)) (Nat.succ (Nat.succ (Nat.succ Nat.zero)))
  - left_distrib_spec_nat_0
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m k)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) m) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) k))
  - left_distrib_spec_nat_1
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m k)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) m) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) k))
  - left_distrib_spec_nat_2
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m k)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) m) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) k))
  - left_distrib_spec_nat_3
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m k)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) m) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) k))
  - left_distrib_spec_nat_4
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) m k)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) m) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) k))
  - right_distrib_spec_nat_0
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) m) k) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) k) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m k))
  - right_distrib_spec_nat_1
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) m) k) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) k) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m k))
  - right_distrib_spec_nat_2
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) m) k) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) k) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m k))
  - right_distrib_spec_nat_3
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) m) k) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) k) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m k))
  - right_distrib_spec_nat_4
    Statement: forall (m : Nat) (k : Nat), Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) m) k) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) k) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m k))
  - dvd_refl_spec_nat_0
    Statement: Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - dvd_refl_spec_nat_1
    Statement: Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - dvd_refl_spec_nat_2
    Statement: Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - dvd_refl_spec_nat_3
    Statement: Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - dvd_refl_spec_nat_4
    Statement: Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - dvd_trans_spec_nat_0
    Statement: forall {b : Nat} {c : Nat}, (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) b) -> (Dvd.dvd.{0} Nat Nat.instDvd b c) -> (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) c)
  - dvd_trans_spec_nat_1
    Statement: forall {b : Nat} {c : Nat}, (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) b) -> (Dvd.dvd.{0} Nat Nat.instDvd b c) -> (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) c)
  - dvd_trans_spec_nat_2
    Statement: forall {b : Nat} {c : Nat}, (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) b) -> (Dvd.dvd.{0} Nat Nat.instDvd b c) -> (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) c)
  - dvd_trans_spec_nat_3
    Statement: forall {b : Nat} {c : Nat}, (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) b) -> (Dvd.dvd.{0} Nat Nat.instDvd b c) -> (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) c)
  - dvd_trans_spec_nat_4
    Statement: forall {b : Nat} {c : Nat}, (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) b) -> (Dvd.dvd.{0} Nat Nat.instDvd b c) -> (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) c)
  - dvd_add_spec_nat_0
    Statement: forall {b : Nat} {c : Nat}, (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) b) -> (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) c) -> (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) b c))
  - dvd_add_spec_nat_1
    Statement: forall {b : Nat} {c : Nat}, (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) b) -> (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) c) -> (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) b c))
  - dvd_add_spec_nat_2
    Statement: forall {b : Nat} {c : Nat}, (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) b) -> (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) c) -> (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) b c))
  - dvd_add_spec_nat_3
    Statement: forall {b : Nat} {c : Nat}, (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) b) -> (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) c) -> (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) b c))
  - dvd_add_spec_nat_4
    Statement: forall {b : Nat} {c : Nat}, (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) b) -> (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) c) -> (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) b c))
  - dvd_mul_spec_nat_0
    Statement: forall {m : Nat} {n : Nat}, Iff (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m n)) (Exists.{1} Nat (fun (k₁ : Nat) => Exists.{1} Nat (fun (k₂ : Nat) => And (Dvd.dvd.{0} Nat Nat.instDvd k₁ m) (And (Dvd.dvd.{0} Nat Nat.instDvd k₂ n) (Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) k₁ k₂) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)))))))
  - dvd_mul_spec_nat_1
    Statement: forall {m : Nat} {n : Nat}, Iff (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m n)) (Exists.{1} Nat (fun (k₁ : Nat) => Exists.{1} Nat (fun (k₂ : Nat) => And (Dvd.dvd.{0} Nat Nat.instDvd k₁ m) (And (Dvd.dvd.{0} Nat Nat.instDvd k₂ n) (Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) k₁ k₂) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))))))
  - dvd_mul_spec_nat_2
    Statement: forall {m : Nat} {n : Nat}, Iff (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m n)) (Exists.{1} Nat (fun (k₁ : Nat) => Exists.{1} Nat (fun (k₂ : Nat) => And (Dvd.dvd.{0} Nat Nat.instDvd k₁ m) (And (Dvd.dvd.{0} Nat Nat.instDvd k₂ n) (Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) k₁ k₂) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)))))))
  - dvd_mul_spec_nat_3
    Statement: forall {m : Nat} {n : Nat}, Iff (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m n)) (Exists.{1} Nat (fun (k₁ : Nat) => Exists.{1} Nat (fun (k₂ : Nat) => And (Dvd.dvd.{0} Nat Nat.instDvd k₁ m) (And (Dvd.dvd.{0} Nat Nat.instDvd k₂ n) (Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) k₁ k₂) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)))))))
  - dvd_mul_spec_nat_4
    Statement: forall {m : Nat} {n : Nat}, Iff (Dvd.dvd.{0} Nat Nat.instDvd (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) m n)) (Exists.{1} Nat (fun (k₁ : Nat) => Exists.{1} Nat (fun (k₂ : Nat) => And (Dvd.dvd.{0} Nat Nat.instDvd k₁ m) (And (Dvd.dvd.{0} Nat Nat.instDvd k₂ n) (Eq.{1} Nat (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) k₁ k₂) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)))))))
  - gcd_comm_spec_nat_0
    Statement: forall (n : Nat), Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) n) (Nat.gcd n (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)))
  - gcd_comm_spec_nat_1
    Statement: forall (n : Nat), Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) n) (Nat.gcd n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))
  - gcd_comm_spec_nat_2
    Statement: forall (n : Nat), Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) n) (Nat.gcd n (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)))
  - gcd_comm_spec_nat_3
    Statement: forall (n : Nat), Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) n) (Nat.gcd n (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)))
  - gcd_comm_spec_nat_4
    Statement: forall (n : Nat), Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) n) (Nat.gcd n (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)))
  - gcd_assoc_spec_nat_0
    Statement: forall (n : Nat) (k : Nat), Eq.{1} Nat (Nat.gcd (Nat.gcd (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) n) k) (Nat.gcd (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (Nat.gcd n k))
  - gcd_assoc_spec_nat_1
    Statement: forall (n : Nat) (k : Nat), Eq.{1} Nat (Nat.gcd (Nat.gcd (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) n) k) (Nat.gcd (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (Nat.gcd n k))
  - gcd_assoc_spec_nat_2
    Statement: forall (n : Nat) (k : Nat), Eq.{1} Nat (Nat.gcd (Nat.gcd (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) n) k) (Nat.gcd (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (Nat.gcd n k))
  - gcd_assoc_spec_nat_3
    Statement: forall (n : Nat) (k : Nat), Eq.{1} Nat (Nat.gcd (Nat.gcd (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) n) k) (Nat.gcd (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (Nat.gcd n k))
  - gcd_assoc_spec_nat_4
    Statement: forall (n : Nat) (k : Nat), Eq.{1} Nat (Nat.gcd (Nat.gcd (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) n) k) (Nat.gcd (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (Nat.gcd n k))
  - gcd_zero_left_spec_nat_0
    Statement: Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} ([mdata borrowed:1 Nat]) 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - gcd_zero_left_spec_nat_1
    Statement: Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} ([mdata borrowed:1 Nat]) 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - gcd_zero_left_spec_nat_2
    Statement: Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} ([mdata borrowed:1 Nat]) 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - gcd_zero_left_spec_nat_3
    Statement: Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} ([mdata borrowed:1 Nat]) 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - gcd_zero_left_spec_nat_4
    Statement: Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} ([mdata borrowed:1 Nat]) 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - gcd_zero_right_spec_nat_0
    Statement: Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} ([mdata borrowed:1 Nat]) 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))
  - gcd_zero_right_spec_nat_1
    Statement: Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} ([mdata borrowed:1 Nat]) 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - gcd_zero_right_spec_nat_2
    Statement: Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} ([mdata borrowed:1 Nat]) 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - gcd_zero_right_spec_nat_3
    Statement: Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (OfNat.ofNat.{0} ([mdata borrowed:1 Nat]) 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - gcd_zero_right_spec_nat_4
    Statement: Eq.{1} Nat (Nat.gcd (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (OfNat.ofNat.{0} ([mdata borrowed:1 Nat]) 0 (instOfNatNat 0))) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - fib_one_on_succ_applied_to_nat_0
    Statement: Eq.{1} Nat 1 (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - fib_one_on_add1_applied_to_nat_0
    Statement: Eq.{1} Nat 1 (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - one_add_one_eq_two_on_succ_applied_to_nat_1
    Statement: Eq.{1} Nat 2 (Nat.succ (Nat.succ Nat.zero))
  - one_add_one_eq_two_on_add1_applied_to_nat_1
    Statement: Eq.{1} Nat 2 (Nat.succ (Nat.succ Nat.zero))
  - one_add_one_eq_two_on_add2_applied_to_nat_0
    Statement: Eq.{1} Nat 2 (Nat.succ (Nat.succ Nat.zero))
  - two_add_one_eq_three_on_num_3
    Statement: Eq.{1} Nat (Nat.succ (Nat.succ (Nat.succ Nat.zero))) (Nat.succ (Nat.succ (Nat.succ Nat.zero)))
  - two_add_one_eq_three_on_succ_applied_to_nat_2
    Statement: Eq.{1} Nat 3 (Nat.succ (Nat.succ (Nat.succ Nat.zero)))
  - two_add_one_eq_three_on_add1_applied_to_nat_2
    Statement: Eq.{1} Nat 3 (Nat.succ (Nat.succ (Nat.succ Nat.zero)))
  - two_add_one_eq_three_on_add2_applied_to_nat_1
    Statement: Eq.{1} Nat 3 (Nat.succ (Nat.succ (Nat.succ Nat.zero)))
  - add_zero_spec_nat_1_on_succ_applied_to_nat_0
    Statement: Eq.{1} Nat 1 (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - add_zero_spec_nat_1_on_add1_applied_to_nat_0
    Statement: Eq.{1} Nat 1 (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - add_zero_spec_nat_2_on_nat_2
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - add_zero_spec_nat_2_on_prime_2
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - add_zero_spec_nat_2_on_two
    Statement: Eq.{1} Nat (Nat.succ (Nat.succ Nat.zero)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - add_zero_spec_nat_2_on_succ_applied_to_nat_1
    Statement: Eq.{1} Nat 2 (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - add_zero_spec_nat_2_on_add1_applied_to_nat_1
    Statement: Eq.{1} Nat 2 (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - add_zero_spec_nat_2_on_add2_applied_to_nat_0
    Statement: Eq.{1} Nat 2 (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - add_zero_spec_nat_3_on_nat_3
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - add_zero_spec_nat_3_on_prime_3
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - add_zero_spec_nat_3_on_num_3
    Statement: Eq.{1} Nat (Nat.succ (Nat.succ (Nat.succ Nat.zero))) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - add_zero_spec_nat_3_on_succ_applied_to_nat_2
    Statement: Eq.{1} Nat 3 (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - add_zero_spec_nat_3_on_add1_applied_to_nat_2
    Statement: Eq.{1} Nat 3 (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - add_zero_spec_nat_3_on_add2_applied_to_nat_1
    Statement: Eq.{1} Nat 3 (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - add_zero_spec_nat_4_on_nat_4
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - add_zero_spec_nat_4_on_succ_applied_to_nat_3
    Statement: Eq.{1} Nat 4 (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - add_zero_spec_nat_4_on_add1_applied_to_nat_3
    Statement: Eq.{1} Nat 4 (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - add_zero_spec_nat_4_on_add2_applied_to_nat_2
    Statement: Eq.{1} Nat 4 (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - zero_add_spec_nat_1_on_succ_applied_to_nat_0
    Statement: Eq.{1} Nat 1 (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - zero_add_spec_nat_1_on_add1_applied_to_nat_0
    Statement: Eq.{1} Nat 1 (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - zero_add_spec_nat_2_on_nat_2
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - zero_add_spec_nat_2_on_prime_2
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - zero_add_spec_nat_2_on_two
    Statement: Eq.{1} Nat (Nat.succ (Nat.succ Nat.zero)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - zero_add_spec_nat_2_on_succ_applied_to_nat_1
    Statement: Eq.{1} Nat 2 (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - zero_add_spec_nat_2_on_add1_applied_to_nat_1
    Statement: Eq.{1} Nat 2 (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - zero_add_spec_nat_2_on_add2_applied_to_nat_0
    Statement: Eq.{1} Nat 2 (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - zero_add_spec_nat_3_on_nat_3
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - zero_add_spec_nat_3_on_prime_3
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - zero_add_spec_nat_3_on_num_3
    Statement: Eq.{1} Nat (Nat.succ (Nat.succ (Nat.succ Nat.zero))) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - zero_add_spec_nat_3_on_succ_applied_to_nat_2
    Statement: Eq.{1} Nat 3 (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - zero_add_spec_nat_3_on_add1_applied_to_nat_2
    Statement: Eq.{1} Nat 3 (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - zero_add_spec_nat_3_on_add2_applied_to_nat_1
    Statement: Eq.{1} Nat 3 (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))
  - zero_add_spec_nat_4_on_nat_4
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - zero_add_spec_nat_4_on_succ_applied_to_nat_3
    Statement: Eq.{1} Nat 4 (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - zero_add_spec_nat_4_on_add1_applied_to_nat_3
    Statement: Eq.{1} Nat 4 (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - zero_add_spec_nat_4_on_add2_applied_to_nat_2
    Statement: Eq.{1} Nat 4 (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - mul_one_spec_nat_1_on_succ_applied_to_nat_0
    Statement: Eq.{1} Nat 1 (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - mul_one_spec_nat_1_on_add1_applied_to_nat_0
    Statement: Eq.{1} Nat 1 (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))
  - mul_one_spec_nat_2_on_nat_2
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - mul_one_spec_nat_2_on_prime_2
    Statement: Eq.{1} Nat (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - mul_one_spec_nat_2_on_two
    Statement: Eq.{1} Nat (Nat.succ (Nat.succ Nat.zero)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))
  - lcm_comm_spec_nat_0
    Statement: forall (n : Nat), Eq.{1} Nat (Nat.lcm (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) n) (Nat.lcm n (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)))
  - lcm_comm_spec_nat_1
    Statement: forall (n : Nat), Eq.{1} Nat (Nat.lcm (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) n) (Nat.lcm n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))
  - lcm_comm_spec_nat_2
    Statement: forall (n : Nat), Eq.{1} Nat (Nat.lcm (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) n) (Nat.lcm n (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)))
  - lcm_comm_spec_nat_3
    Statement: forall (n : Nat), Eq.{1} Nat (Nat.lcm (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) n) (Nat.lcm n (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)))
  - lcm_comm_spec_nat_4
    Statement: forall (n : Nat), Eq.{1} Nat (Nat.lcm (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) n) (Nat.lcm n (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)))
  - lcm_assoc_spec_nat_0
    Statement: forall (n : Nat) (k : Nat), Eq.{1} Nat (Nat.lcm (Nat.lcm (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) n) k) (Nat.lcm (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (Nat.lcm n k))
  - lcm_assoc_spec_nat_1
    Statement: forall (n : Nat) (k : Nat), Eq.{1} Nat (Nat.lcm (Nat.lcm (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) n) k) (Nat.lcm (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (Nat.lcm n k))
  - lcm_assoc_spec_nat_2
    Statement: forall (n : Nat) (k : Nat), Eq.{1} Nat (Nat.lcm (Nat.lcm (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) n) k) (Nat.lcm (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (Nat.lcm n k))
  - lcm_assoc_spec_nat_3
    Statement: forall (n : Nat) (k : Nat), Eq.{1} Nat (Nat.lcm (Nat.lcm (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) n) k) (Nat.lcm (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (Nat.lcm n k))
  - lcm_assoc_spec_nat_4
    Statement: forall (n : Nat) (k : Nat), Eq.{1} Nat (Nat.lcm (Nat.lcm (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) n) k) (Nat.lcm (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (Nat.lcm n k))
  - prime_def_spec_nat_0
    Statement: Iff (Nat.Prime (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (And (LE.le.{0} Nat instLENat (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (forall (m : Nat), (Dvd.dvd.{0} Nat Nat.instDvd m (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) -> (Or (Eq.{1} Nat m (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (Eq.{1} Nat m (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))))))
  - prime_def_spec_nat_1
    Statement: Iff (Nat.Prime (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (And (LE.le.{0} Nat instLENat (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (forall (m : Nat), (Dvd.dvd.{0} Nat Nat.instDvd m (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) -> (Or (Eq.{1} Nat m (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (Eq.{1} Nat m (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))))
  - prime_def_spec_nat_2
    Statement: Iff (Nat.Prime (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (And (LE.le.{0} Nat instLENat (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (forall (m : Nat), (Dvd.dvd.{0} Nat Nat.instDvd m (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) -> (Or (Eq.{1} Nat m (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (Eq.{1} Nat m (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))))))
  - prime_def_spec_nat_3
    Statement: Iff (Nat.Prime (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))) (And (LE.le.{0} Nat instLENat (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))) (forall (m : Nat), (Dvd.dvd.{0} Nat Nat.instDvd m (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))) -> (Or (Eq.{1} Nat m (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (Eq.{1} Nat m (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))))))
  - prime_def_spec_nat_4
    Statement: Iff (Nat.Prime (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))) (And (LE.le.{0} Nat instLENat (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))) (forall (m : Nat), (Dvd.dvd.{0} Nat Nat.instDvd m (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))) -> (Or (Eq.{1} Nat m (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (Eq.{1} Nat m (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))))))
  - mod_mod_spec_nat_0
    Statement: forall (n : Nat), Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) n) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) n)
  - mod_mod_spec_nat_1
    Statement: forall (n : Nat), Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) n) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) n)
  - mod_mod_spec_nat_2
    Statement: forall (n : Nat), Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) n) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) n)
  - mod_mod_spec_nat_3
    Statement: forall (n : Nat), Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) n) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) n)
  - mod_mod_spec_nat_4
    Statement: forall (n : Nat), Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) n) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) n)
  - add_mod_spec_nat_0
    Statement: forall (b : Nat) (n : Nat), Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) b) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) b n)) n)
  - add_mod_spec_nat_1
    Statement: forall (b : Nat) (n : Nat), Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) b) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) b n)) n)
  - add_mod_spec_nat_2
    Statement: forall (b : Nat) (n : Nat), Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) b) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) b n)) n)
  - add_mod_spec_nat_3
    Statement: forall (b : Nat) (n : Nat), Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) b) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) b n)) n)
  - add_mod_spec_nat_4
    Statement: forall (b : Nat) (n : Nat), Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) b) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) b n)) n)
  - mul_mod_spec_nat_0
    Statement: forall (b : Nat) (n : Nat), Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) b) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) b n)) n)
  - mul_mod_spec_nat_1
    Statement: forall (b : Nat) (n : Nat), Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) b) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) b n)) n)
  - mul_mod_spec_nat_2
    Statement: forall (b : Nat) (n : Nat), Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) b) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) b n)) n)
  - mul_mod_spec_nat_3
    Statement: forall (b : Nat) (n : Nat), Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) b) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) b n)) n)
  - mul_mod_spec_nat_4
    Statement: forall (b : Nat) (n : Nat), Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) b) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) n) (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) b n)) n)
  - mod_two_eq_zero_or_one_spec_nat_0
    Statement: Or (Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))
  - mod_two_eq_zero_or_one_spec_nat_1
    Statement: Or (Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))
  - mod_two_eq_zero_or_one_spec_nat_2
    Statement: Or (Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))
  - mod_two_eq_zero_or_one_spec_nat_3
    Statement: Or (Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))
  - mod_two_eq_zero_or_one_spec_nat_4
    Statement: Or (Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (Eq.{1} Nat (HMod.hMod.{0, 0, 0} Nat Nat Nat (instHMod.{0} Nat Nat.instMod) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))
  - fib_add_spec_nat_0
    Statement: forall (n : Nat), Eq.{1} Nat (Nat.fib (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) n) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (Nat.fib (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (Nat.fib n)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (Nat.fib (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Nat.fib (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))))
  - fib_add_spec_nat_1
    Statement: forall (n : Nat), Eq.{1} Nat (Nat.fib (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) n) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (Nat.fib (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) (Nat.fib n)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (Nat.fib (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Nat.fib (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))))
  - fib_add_spec_nat_2
    Statement: forall (n : Nat), Eq.{1} Nat (Nat.fib (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) n) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (Nat.fib (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2))) (Nat.fib n)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (Nat.fib (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Nat.fib (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))))
  - fib_add_spec_nat_3
    Statement: forall (n : Nat), Eq.{1} Nat (Nat.fib (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) n) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (Nat.fib (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3))) (Nat.fib n)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (Nat.fib (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 3 (instOfNatNat 3)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Nat.fib (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))))
  - fib_add_spec_nat_4
    Statement: forall (n : Nat), Eq.{1} Nat (Nat.fib (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) n) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (Nat.fib (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))) (Nat.fib n)) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (Nat.fib (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Nat.fib (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))))
  - add_zero_spec_nat_4_on_num_4
    Statement: Eq.{1} Nat (Nat.succ (Nat.succ (Nat.succ (Nat.succ Nat.zero)))) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - zero_add_spec_nat_4_on_num_4
    Statement: Eq.{1} Nat (Nat.succ (Nat.succ (Nat.succ (Nat.succ Nat.zero)))) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - mul_one_spec_nat_4_on_num_4
    Statement: Eq.{1} Nat (Nat.succ (Nat.succ (Nat.succ (Nat.succ Nat.zero)))) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - one_mul_spec_nat_4_on_num_4
    Statement: Eq.{1} Nat (Nat.succ (Nat.succ (Nat.succ (Nat.succ Nat.zero)))) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - gcd_zero_left_spec_nat_4_on_num_4
    Statement: Eq.{1} Nat (Nat.succ (Nat.succ (Nat.succ (Nat.succ Nat.zero)))) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - gcd_zero_right_spec_nat_4_on_num_4
    Statement: Eq.{1} Nat (Nat.succ (Nat.succ (Nat.succ (Nat.succ Nat.zero)))) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - add_zero_spec_nat_4_on_nat_4_on_num_4
    Statement: Eq.{1} Nat (Nat.succ (Nat.succ (Nat.succ (Nat.succ Nat.zero)))) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - add_zero_spec_nat_4_on_succ_applied_to_nat_3_on_num_4
    Statement: Eq.{1} Nat (Nat.succ (Nat.succ (Nat.succ (Nat.succ Nat.zero)))) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - add_zero_spec_nat_4_on_add1_applied_to_nat_3_on_num_4
    Statement: Eq.{1} Nat (Nat.succ (Nat.succ (Nat.succ (Nat.succ Nat.zero)))) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - add_zero_spec_nat_4_on_add2_applied_to_nat_2_on_num_4
    Statement: Eq.{1} Nat (Nat.succ (Nat.succ (Nat.succ (Nat.succ Nat.zero)))) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - zero_add_spec_nat_4_on_nat_4_on_num_4
    Statement: Eq.{1} Nat (Nat.succ (Nat.succ (Nat.succ (Nat.succ Nat.zero)))) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - zero_add_spec_nat_4_on_succ_applied_to_nat_3_on_num_4
    Statement: Eq.{1} Nat (Nat.succ (Nat.succ (Nat.succ (Nat.succ Nat.zero)))) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - zero_add_spec_nat_4_on_add1_applied_to_nat_3_on_num_4
    Statement: Eq.{1} Nat (Nat.succ (Nat.succ (Nat.succ (Nat.succ Nat.zero)))) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))
  - zero_add_spec_nat_4_on_add2_applied_to_nat_2_on_num_4
    Statement: Eq.{1} Nat (Nat.succ (Nat.succ (Nat.succ (Nat.succ Nat.zero)))) (OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))

================================================================================
